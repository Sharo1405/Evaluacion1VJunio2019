/* The following code was generated by JFlex 1.6.1 */

package analizadores;

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/analizadores/lexico.jflex</tt>
 */
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int comentario1 = 2;
  public static final int comentariomultiple = 4;
  public static final int cadenaEscapes = 6;
  public static final int cadenaEscapes2 = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 50, 51, 53, 52, 52,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    50,  9, 54,  0,  0,  0, 11, 49, 14, 15,  3,  1, 13,  2, 48,  4, 
    56, 47, 47, 47, 47, 47, 47, 47, 47, 47, 17, 16,  7,  8,  6, 12, 
     0, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 
    46, 46, 46, 27, 46, 58, 46, 46, 57, 46, 46, 41, 55, 42,  5, 40, 
     0, 25, 32, 23, 29, 34, 35, 28, 24, 20, 46, 39, 33, 44, 21, 30, 
    38, 46, 26, 36, 22, 31, 43, 37, 45, 46, 46, 18, 10, 19,  0,  0, 
     0,  0,  0,  0,  0, 53,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 46,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 46,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\2\1\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\20\23\1\24\1\25\2\23"+
    "\1\26\1\1\1\27\1\30\1\31\1\32\1\31\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\0"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\23\1\66\14\23\1\67\20\23"+
    "\2\0\1\70\1\71\2\0\1\72\2\23\1\73\22\23"+
    "\1\74\11\23\1\75\1\76\1\77\2\23\1\100\1\101"+
    "\1\102\1\103\13\23\1\104\14\23\1\105\3\23\1\106"+
    "\4\23\1\107\2\23\1\110\2\23\1\111\1\112\2\23"+
    "\1\113\1\23\1\114\3\23\1\115\1\23\1\116\2\23"+
    "\1\117\1\23\1\120\1\121\3\23\1\122\1\123\4\23"+
    "\1\124\4\23\1\125\1\126\1\127\1\23\1\130\1\131"+
    "\1\23\1\132\1\133\1\134\3\23\1\135\1\23\1\136"+
    "\1\137";

  private static int [] zzUnpackAction() {
    int [] result = new int[247];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u0127\0\u01d8\0\u0127\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff"+
    "\0\u033a\0\u0127\0\u0127\0\u0127\0\u0127\0\u0127\0\u0127\0\u0127"+
    "\0\u0127\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7"+
    "\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674\0\u06af"+
    "\0\u06ea\0\u0127\0\u0127\0\u0725\0\u0760\0\u079b\0\u07d6\0\u0127"+
    "\0\u0127\0\u0127\0\u0127\0\u0811\0\u0127\0\u0127\0\u0127\0\u0127"+
    "\0\u084c\0\u0127\0\u0127\0\u0127\0\u0127\0\u0127\0\u0127\0\u0127"+
    "\0\u0127\0\u0127\0\u0127\0\u0127\0\u0887\0\u0127\0\u0127\0\u0127"+
    "\0\u0127\0\u0127\0\u0127\0\u0127\0\u0127\0\u0127\0\u0127\0\u0127"+
    "\0\u08c2\0\u0461\0\u08fd\0\u0938\0\u0973\0\u09ae\0\u09e9\0\u0a24"+
    "\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc"+
    "\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4"+
    "\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\u0f71\0\u0fac"+
    "\0\u07d6\0\u0127\0\u0127\0\u0fe7\0\u1022\0\u0461\0\u105d\0\u1098"+
    "\0\u0461\0\u10d3\0\u110e\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235"+
    "\0\u1270\0\u12ab\0\u12e6\0\u1321\0\u135c\0\u1397\0\u13d2\0\u140d"+
    "\0\u1448\0\u1483\0\u14be\0\u0461\0\u14f9\0\u1534\0\u156f\0\u15aa"+
    "\0\u15e5\0\u1620\0\u165b\0\u1696\0\u16d1\0\u0fac\0\u0127\0\u0127"+
    "\0\u170c\0\u1747\0\u0461\0\u0461\0\u0461\0\u0461\0\u1782\0\u17bd"+
    "\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f\0\u195a\0\u1995"+
    "\0\u19d0\0\u0461\0\u1a0b\0\u1a46\0\u1a81\0\u1abc\0\u1af7\0\u1b32"+
    "\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59\0\u1c94\0\u0461\0\u1ccf"+
    "\0\u1d0a\0\u1d45\0\u0461\0\u1d80\0\u1dbb\0\u1df6\0\u1e31\0\u0461"+
    "\0\u1e6c\0\u1ea7\0\u0461\0\u1ee2\0\u1f1d\0\u0461\0\u0461\0\u1f58"+
    "\0\u1f93\0\u0461\0\u1fce\0\u2009\0\u2044\0\u207f\0\u20ba\0\u0461"+
    "\0\u20f5\0\u0461\0\u2130\0\u216b\0\u0461\0\u21a6\0\u0461\0\u0461"+
    "\0\u21e1\0\u221c\0\u2257\0\u0461\0\u0461\0\u2292\0\u22cd\0\u2308"+
    "\0\u2343\0\u0461\0\u237e\0\u23b9\0\u23f4\0\u242f\0\u0461\0\u0461"+
    "\0\u0461\0\u246a\0\u0461\0\u0461\0\u24a5\0\u0461\0\u0461\0\u0461"+
    "\0\u24e0\0\u251b\0\u2556\0\u0461\0\u2591\0\u0461\0\u0461";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[247];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\2\36\1\44"+
    "\1\36\1\45\1\46\1\47\1\50\1\51\2\36\1\52"+
    "\1\53\1\54\1\55\2\36\1\56\1\6\1\57\3\60"+
    "\1\0\1\61\1\6\1\56\2\36\63\62\1\63\2\60"+
    "\10\62\1\64\57\62\2\60\1\0\5\62\63\65\3\0"+
    "\1\66\1\67\3\65\14\0\1\70\10\0\1\71\1\72"+
    "\2\0\1\73\1\74\4\0\1\75\1\76\2\0\1\77"+
    "\7\0\1\100\5\0\1\101\4\0\1\102\1\103\1\104"+
    "\1\105\1\106\74\0\1\107\73\0\1\110\54\0\1\56"+
    "\10\0\1\56\5\0\1\111\1\112\76\0\1\113\72\0"+
    "\1\114\72\0\1\115\72\0\1\116\74\0\1\117\73\0"+
    "\1\120\103\0\1\36\1\121\15\36\1\122\5\36\2\0"+
    "\1\36\1\123\3\36\10\0\3\36\24\0\13\36\1\124"+
    "\2\36\1\125\6\36\2\0\5\36\10\0\3\36\24\0"+
    "\6\36\1\126\16\36\2\0\5\36\10\0\3\36\24\0"+
    "\4\36\1\127\1\130\4\36\1\131\2\36\1\132\7\36"+
    "\2\0\5\36\10\0\3\36\24\0\25\36\2\0\5\36"+
    "\10\0\3\36\24\0\14\36\1\133\10\36\2\0\5\36"+
    "\10\0\3\36\24\0\16\36\1\134\6\36\2\0\5\36"+
    "\10\0\3\36\24\0\2\36\1\135\22\36\2\0\5\36"+
    "\10\0\3\36\24\0\6\36\1\136\16\36\2\0\5\36"+
    "\10\0\3\36\24\0\12\36\1\137\3\36\1\140\6\36"+
    "\2\0\5\36\10\0\3\36\24\0\6\36\1\141\3\36"+
    "\1\142\12\36\2\0\5\36\10\0\3\36\24\0\15\36"+
    "\1\143\7\36\2\0\2\36\1\144\2\36\10\0\3\36"+
    "\24\0\1\145\4\36\1\146\4\36\1\147\12\36\2\0"+
    "\5\36\10\0\3\36\24\0\2\36\1\150\16\36\1\151"+
    "\3\36\2\0\5\36\10\0\3\36\24\0\4\36\1\152"+
    "\1\36\1\153\16\36\2\0\5\36\10\0\3\36\24\0"+
    "\6\36\1\154\4\36\1\155\11\36\2\0\5\36\10\0"+
    "\3\36\24\0\12\36\1\156\12\36\2\0\5\36\10\0"+
    "\3\36\24\0\5\36\1\157\17\36\2\0\5\36\10\0"+
    "\3\36\57\0\1\56\1\160\7\0\1\56\2\0\61\161"+
    "\1\162\11\161\4\0\1\163\113\0\1\164\72\0\1\165"+
    "\71\0\2\36\1\166\22\36\2\0\5\36\10\0\3\36"+
    "\24\0\22\36\1\167\2\36\2\0\5\36\10\0\3\36"+
    "\24\0\15\36\1\170\7\36\2\0\5\36\10\0\3\36"+
    "\24\0\21\36\1\171\3\36\2\0\5\36\10\0\3\36"+
    "\24\0\13\36\1\172\11\36\2\0\5\36\10\0\3\36"+
    "\24\0\5\36\1\173\17\36\2\0\5\36\10\0\3\36"+
    "\24\0\20\36\1\174\4\36\2\0\5\36\10\0\3\36"+
    "\24\0\1\36\1\175\23\36\2\0\5\36\10\0\3\36"+
    "\24\0\5\36\1\176\17\36\2\0\5\36\10\0\3\36"+
    "\24\0\20\36\1\177\4\36\2\0\5\36\10\0\3\36"+
    "\24\0\2\36\1\200\2\36\1\201\17\36\2\0\5\36"+
    "\10\0\3\36\24\0\6\36\1\202\16\36\2\0\5\36"+
    "\10\0\3\36\24\0\5\36\1\203\17\36\2\0\5\36"+
    "\10\0\3\36\24\0\13\36\1\204\11\36\2\0\5\36"+
    "\10\0\3\36\24\0\17\36\1\205\5\36\2\0\5\36"+
    "\10\0\3\36\24\0\16\36\1\206\6\36\2\0\5\36"+
    "\10\0\3\36\24\0\12\36\1\207\12\36\2\0\5\36"+
    "\10\0\3\36\24\0\20\36\1\210\4\36\2\0\5\36"+
    "\10\0\3\36\24\0\2\36\1\211\22\36\2\0\5\36"+
    "\10\0\3\36\24\0\1\36\1\212\23\36\2\0\5\36"+
    "\10\0\3\36\24\0\15\36\1\213\7\36\2\0\5\36"+
    "\10\0\3\36\24\0\6\36\1\214\16\36\2\0\5\36"+
    "\10\0\3\36\24\0\5\36\1\215\17\36\2\0\5\36"+
    "\10\0\3\36\24\0\1\216\24\36\2\0\5\36\10\0"+
    "\3\36\24\0\1\217\24\36\2\0\5\36\10\0\3\36"+
    "\24\0\1\220\24\36\2\0\5\36\10\0\3\36\24\0"+
    "\1\221\11\36\1\222\12\36\2\0\5\36\10\0\3\36"+
    "\24\0\14\36\1\223\10\36\2\0\5\36\10\0\3\36"+
    "\24\0\1\224\24\36\2\0\5\36\10\0\3\36\24\0"+
    "\1\225\24\36\2\0\5\36\10\0\3\36\57\0\1\226"+
    "\10\0\1\226\27\0\1\227\72\0\1\230\71\0\6\36"+
    "\1\231\3\36\1\232\12\36\2\0\5\36\10\0\3\36"+
    "\24\0\15\36\1\233\7\36\2\0\5\36\10\0\3\36"+
    "\24\0\16\36\1\234\6\36\2\0\5\36\10\0\3\36"+
    "\24\0\6\36\1\235\16\36\2\0\5\36\10\0\3\36"+
    "\24\0\16\36\1\236\6\36\2\0\5\36\10\0\3\36"+
    "\24\0\2\36\1\237\22\36\2\0\5\36\10\0\3\36"+
    "\24\0\20\36\1\240\4\36\2\0\5\36\10\0\3\36"+
    "\24\0\2\36\1\241\22\36\2\0\5\36\10\0\3\36"+
    "\24\0\13\36\1\242\11\36\2\0\5\36\10\0\3\36"+
    "\24\0\11\36\1\243\13\36\2\0\5\36\10\0\3\36"+
    "\24\0\1\244\24\36\2\0\5\36\10\0\3\36\24\0"+
    "\22\36\1\245\2\36\2\0\5\36\10\0\3\36\24\0"+
    "\14\36\1\246\10\36\2\0\5\36\10\0\3\36\24\0"+
    "\5\36\1\247\17\36\2\0\5\36\10\0\3\36\24\0"+
    "\5\36\1\250\17\36\2\0\5\36\10\0\3\36\24\0"+
    "\15\36\1\251\7\36\2\0\5\36\10\0\3\36\24\0"+
    "\16\36\1\252\6\36\2\0\5\36\10\0\3\36\24\0"+
    "\16\36\1\253\6\36\2\0\5\36\10\0\3\36\24\0"+
    "\5\36\1\254\17\36\2\0\5\36\10\0\3\36\24\0"+
    "\20\36\1\255\4\36\2\0\5\36\10\0\3\36\24\0"+
    "\2\36\1\256\22\36\2\0\5\36\10\0\3\36\24\0"+
    "\2\36\1\257\22\36\2\0\5\36\10\0\3\36\24\0"+
    "\15\36\1\260\7\36\2\0\5\36\10\0\3\36\24\0"+
    "\2\36\1\261\22\36\2\0\5\36\10\0\3\36\24\0"+
    "\1\36\1\262\23\36\2\0\1\263\4\36\10\0\3\36"+
    "\24\0\2\36\1\264\22\36\2\0\5\36\10\0\3\36"+
    "\24\0\15\36\1\265\7\36\2\0\5\36\10\0\3\36"+
    "\24\0\11\36\1\266\13\36\2\0\5\36\10\0\3\36"+
    "\24\0\1\36\1\267\23\36\2\0\5\36\10\0\3\36"+
    "\24\0\1\270\24\36\2\0\5\36\10\0\3\36\24\0"+
    "\6\36\1\271\16\36\2\0\5\36\10\0\3\36\24\0"+
    "\1\272\24\36\2\0\5\36\10\0\3\36\24\0\20\36"+
    "\1\273\4\36\2\0\5\36\10\0\3\36\24\0\6\36"+
    "\1\274\16\36\2\0\5\36\10\0\3\36\24\0\6\36"+
    "\1\275\16\36\2\0\5\36\10\0\3\36\24\0\24\36"+
    "\1\276\2\0\5\36\10\0\3\36\24\0\1\36\1\277"+
    "\23\36\2\0\5\36\10\0\3\36\24\0\4\36\1\300"+
    "\20\36\2\0\5\36\10\0\3\36\24\0\15\36\1\301"+
    "\7\36\2\0\5\36\10\0\3\36\24\0\13\36\1\302"+
    "\11\36\2\0\5\36\10\0\3\36\24\0\23\36\1\303"+
    "\1\36\2\0\5\36\10\0\3\36\24\0\16\36\1\304"+
    "\6\36\2\0\5\36\10\0\3\36\24\0\1\36\1\305"+
    "\23\36\2\0\5\36\10\0\3\36\24\0\15\36\1\306"+
    "\7\36\2\0\5\36\10\0\3\36\24\0\16\36\1\307"+
    "\6\36\2\0\5\36\10\0\3\36\24\0\1\310\24\36"+
    "\2\0\5\36\10\0\3\36\24\0\3\36\1\311\21\36"+
    "\2\0\5\36\10\0\3\36\24\0\16\36\1\312\6\36"+
    "\2\0\5\36\10\0\3\36\24\0\16\36\1\313\6\36"+
    "\2\0\5\36\10\0\3\36\24\0\2\36\1\314\22\36"+
    "\2\0\5\36\10\0\3\36\24\0\5\36\1\315\17\36"+
    "\2\0\5\36\10\0\3\36\24\0\16\36\1\316\6\36"+
    "\2\0\5\36\10\0\3\36\24\0\1\317\24\36\2\0"+
    "\5\36\10\0\3\36\24\0\11\36\1\320\13\36\2\0"+
    "\5\36\10\0\3\36\24\0\25\36\2\0\1\36\1\321"+
    "\3\36\10\0\3\36\24\0\2\36\1\322\22\36\2\0"+
    "\5\36\10\0\3\36\24\0\1\36\1\323\23\36\2\0"+
    "\5\36\10\0\3\36\24\0\5\36\1\324\17\36\2\0"+
    "\5\36\10\0\3\36\24\0\1\36\1\325\23\36\2\0"+
    "\5\36\10\0\3\36\24\0\17\36\1\326\5\36\2\0"+
    "\5\36\10\0\3\36\24\0\10\36\1\327\14\36\2\0"+
    "\5\36\10\0\3\36\24\0\16\36\1\330\6\36\2\0"+
    "\5\36\10\0\3\36\24\0\15\36\1\331\7\36\2\0"+
    "\5\36\10\0\3\36\24\0\5\36\1\332\17\36\2\0"+
    "\5\36\10\0\3\36\24\0\11\36\1\333\13\36\2\0"+
    "\5\36\10\0\3\36\24\0\3\36\1\334\21\36\2\0"+
    "\5\36\10\0\3\36\24\0\4\36\1\335\20\36\2\0"+
    "\5\36\10\0\3\36\24\0\24\36\1\336\2\0\5\36"+
    "\10\0\3\36\24\0\15\36\1\337\7\36\2\0\5\36"+
    "\10\0\3\36\24\0\2\36\1\340\22\36\2\0\5\36"+
    "\10\0\3\36\24\0\3\36\1\341\21\36\2\0\5\36"+
    "\10\0\3\36\24\0\3\36\1\342\21\36\2\0\5\36"+
    "\10\0\3\36\24\0\1\343\24\36\2\0\5\36\10\0"+
    "\3\36\24\0\13\36\1\344\11\36\2\0\5\36\10\0"+
    "\3\36\24\0\3\36\1\345\21\36\2\0\5\36\10\0"+
    "\3\36\24\0\1\346\24\36\2\0\5\36\10\0\3\36"+
    "\24\0\2\36\1\347\22\36\2\0\5\36\10\0\3\36"+
    "\24\0\1\36\1\350\23\36\2\0\5\36\10\0\3\36"+
    "\24\0\20\36\1\351\4\36\2\0\5\36\10\0\3\36"+
    "\24\0\17\36\1\352\5\36\2\0\5\36\10\0\3\36"+
    "\24\0\1\36\1\353\23\36\2\0\5\36\10\0\3\36"+
    "\24\0\16\36\1\354\6\36\2\0\5\36\10\0\3\36"+
    "\24\0\2\36\1\355\22\36\2\0\5\36\10\0\3\36"+
    "\24\0\6\36\1\356\16\36\2\0\5\36\10\0\3\36"+
    "\24\0\16\36\1\357\6\36\2\0\5\36\10\0\3\36"+
    "\24\0\2\36\1\360\22\36\2\0\5\36\10\0\3\36"+
    "\24\0\15\36\1\361\7\36\2\0\5\36\10\0\3\36"+
    "\24\0\1\362\24\36\2\0\5\36\10\0\3\36\24\0"+
    "\16\36\1\363\6\36\2\0\5\36\10\0\3\36\24\0"+
    "\16\36\1\364\6\36\2\0\5\36\10\0\3\36\24\0"+
    "\15\36\1\365\7\36\2\0\5\36\10\0\3\36\24\0"+
    "\11\36\1\366\13\36\2\0\5\36\10\0\3\36\24\0"+
    "\16\36\1\367\6\36\2\0\5\36\10\0\3\36";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9676];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\2\1\1\11\1\1\1\11\6\1\10\11"+
    "\20\1\2\11\4\1\4\11\1\1\4\11\1\1\13\11"+
    "\1\0\13\11\37\1\2\0\2\11\2\0\41\1\2\11"+
    "\137\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[247];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //cod

    String paraCadena = "";


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { String errorLex = "Error léxico, caracter irreconocible: '"+yytext()+"' en la línea: "+(yyline+1)+" y columna: "+yycolumn;
        System.err.println(errorLex);
        System.out.println(errorLex);
            }
          case 96: break;
          case 2: 
            { System.out.println("Reconocido: <<"+yytext()+">>, mas");
                                return new Symbol(sym.mas, yyline, yycolumn, yytext());
            }
          case 97: break;
          case 3: 
            { System.out.println("Reconocido: <<"+yytext()+">>, menos");
                                return new Symbol(sym.menos, yyline, yycolumn, yytext());
            }
          case 98: break;
          case 4: 
            { System.out.println("Reconocido: <<"+yytext()+">>, por");
                                return new Symbol(sym.por, yyline, yycolumn, yytext());
            }
          case 99: break;
          case 5: 
            { System.out.println("Reconocido: <<"+yytext()+">>, dividir");
                                return new Symbol(sym.dividir, yyline, yycolumn, yytext());
            }
          case 100: break;
          case 6: 
            { System.out.println("Reconocido: <<"+yytext()+">>, potencia");
                                return new Symbol(sym.potencia, yyline, yycolumn, yytext());
            }
          case 101: break;
          case 7: 
            { System.out.println("Reconocido: <<"+yytext()+">>, mayorq");
                                return new Symbol(sym.mayorq, yyline, yycolumn, yytext());
            }
          case 102: break;
          case 8: 
            { System.out.println("Reconocido: <<"+yytext()+">>, menorq");
                                return new Symbol(sym.menorq, yyline, yycolumn, yytext());
            }
          case 103: break;
          case 9: 
            { System.out.println("Reconocido: <<"+yytext()+">>, igual");
                                return new Symbol(sym.igual, yyline, yycolumn, yytext());
            }
          case 104: break;
          case 10: 
            { System.out.println("Reconocido: <<"+yytext()+">>, diferenteunario");
                                return new Symbol(sym.diferenteunario, yyline, yycolumn, yytext());
            }
          case 105: break;
          case 11: 
            { System.out.println("Reconocido: <<"+yytext()+">>, interrogacion");
                                return new Symbol(sym.interrogacion, yyline, yycolumn, yytext());
            }
          case 106: break;
          case 12: 
            { System.out.println("Reconocido: <<"+yytext()+">>, coma");
                                return new Symbol(sym.coma, yyline, yycolumn, yytext());
            }
          case 107: break;
          case 13: 
            { System.out.println("Reconocido: <<"+yytext()+">>, apar");
                                return new Symbol(sym.apar, yyline, yycolumn, yytext());
            }
          case 108: break;
          case 14: 
            { System.out.println("Reconocido: <<"+yytext()+">>, cpar");
                                return new Symbol(sym.cpar, yyline, yycolumn, yytext());
            }
          case 109: break;
          case 15: 
            { System.out.println("Reconocido: <<"+yytext()+">>, puntoycoma");
                                return new Symbol(sym.puntoycoma, yyline, yycolumn, yytext());
            }
          case 110: break;
          case 16: 
            { System.out.println("Reconocido: <<"+yytext()+">>, dospuntos");
                                return new Symbol(sym.dospuntos, yyline, yycolumn, yytext());
            }
          case 111: break;
          case 17: 
            { System.out.println("Reconocido: <<"+yytext()+">>, allave");
                                return new Symbol(sym.allave, yyline, yycolumn, yytext());
            }
          case 112: break;
          case 18: 
            { System.out.println("Reconocido: <<"+yytext()+">>, cllave");
                                return new Symbol(sym.cllave, yyline, yycolumn, yytext());
            }
          case 113: break;
          case 19: 
            { System.out.println("Reconocido: <<"+yytext()+">>, id");
                                return new Symbol(sym.id, yyline, yycolumn, yytext());
            }
          case 114: break;
          case 20: 
            { System.out.println("Reconocido: <<"+yytext()+">>, acorchete");
                                return new Symbol(sym.acorchete, yyline, yycolumn, yytext());
            }
          case 115: break;
          case 21: 
            { System.out.println("Reconocido: <<"+yytext()+">>, ccorchete");
                                return new Symbol(sym.ccorchete, yyline, yycolumn, yytext());
            }
          case 116: break;
          case 22: 
            { System.out.println("Reconocido: <<"+yytext()+">>, entero");
                                return new Symbol(sym.entero, yyline, yycolumn, yytext());
            }
          case 117: break;
          case 23: 
            { 
            }
          case 118: break;
          case 24: 
            { System.out.println("\"");yybegin(cadenaEscapes); paraCadena ="";
            }
          case 119: break;
          case 25: 
            { /* omitilo weeeeeee */
            }
          case 120: break;
          case 26: 
            { yybegin(YYINITIAL);
            }
          case 121: break;
          case 27: 
            { paraCadena += yytext();
            }
          case 122: break;
          case 28: 
            { System.out.println("\" finalfinalfinal"); System.out.println(paraCadena); yybegin(YYINITIAL); 
                                return new Symbol(sym.cadena, yyline, yycolumn, paraCadena);
            }
          case 123: break;
          case 29: 
            { System.out.println("\\");yybegin(cadenaEscapes2);
            }
          case 124: break;
          case 30: 
            { System.out.println("?"); paraCadena += "?"; yybegin(cadenaEscapes);
            }
          case 125: break;
          case 31: 
            { System.out.println("n"); paraCadena += "\n"; yybegin(cadenaEscapes);
            }
          case 126: break;
          case 32: 
            { System.out.println("t"); paraCadena += "\t"; yybegin(cadenaEscapes);
            }
          case 127: break;
          case 33: 
            { System.out.println("a");  yybegin(cadenaEscapes);
            }
          case 128: break;
          case 34: 
            { System.out.println("r"); paraCadena += "\r"; yybegin(cadenaEscapes);
            }
          case 129: break;
          case 35: 
            { System.out.println("u");  yytext(); yybegin(cadenaEscapes);
            }
          case 130: break;
          case 36: 
            { System.out.println("b"); paraCadena += "\b"; yybegin(cadenaEscapes);
            }
          case 131: break;
          case 37: 
            { System.out.println("f"); paraCadena += "\f"; yybegin(cadenaEscapes);
            }
          case 132: break;
          case 38: 
            { System.out.println("v");  yybegin(cadenaEscapes);
            }
          case 133: break;
          case 39: 
            { System.out.println("'"); paraCadena += "'"; yybegin(cadenaEscapes);
            }
          case 134: break;
          case 40: 
            { System.out.println("\""); paraCadena += "\""; yybegin(cadenaEscapes);
            }
          case 135: break;
          case 41: 
            { System.out.println("\\"); paraCadena += "\\" ; yybegin(cadenaEscapes);
            }
          case 136: break;
          case 42: 
            { System.out.println("0"); paraCadena += '\0'; yybegin(cadenaEscapes);
            }
          case 137: break;
          case 43: 
            { System.out.println("U"); yytext(); yybegin(cadenaEscapes);
            }
          case 138: break;
          case 44: 
            { System.out.println("Reconocido: <<"+yytext()+">>, masmas");
                                return new Symbol(sym.masmas, yyline, yycolumn, yytext());
            }
          case 139: break;
          case 45: 
            { System.out.println("Reconocido: <<"+yytext()+">>, menosmenos");
                                return new Symbol(sym.menosmenos, yyline, yycolumn, yytext());
            }
          case 140: break;
          case 46: 
            { yybegin(comentariomultiple);
            }
          case 141: break;
          case 47: 
            { yybegin(comentario1);
            }
          case 142: break;
          case 48: 
            { System.out.println("Reconocido: <<"+yytext()+">>, mayorigualq");
                                return new Symbol(sym.mayorigualq, yyline, yycolumn, yytext());
            }
          case 143: break;
          case 49: 
            { System.out.println("Reconocido: <<"+yytext()+">>, menorigualq");
                                return new Symbol(sym.menorigualq, yyline, yycolumn, yytext());
            }
          case 144: break;
          case 50: 
            { System.out.println("Reconocido: <<"+yytext()+">>, igualigual");
                                return new Symbol(sym.igualigual, yyline, yycolumn, yytext());
            }
          case 145: break;
          case 51: 
            { System.out.println("Reconocido: <<"+yytext()+">>, diferente");
                                return new Symbol(sym.diferente, yyline, yycolumn, yytext());
            }
          case 146: break;
          case 52: 
            { System.out.println("Reconocido: <<"+yytext()+">>, oor");
                                return new Symbol(sym.oor, yyline, yycolumn, yytext());
            }
          case 147: break;
          case 53: 
            { System.out.println("Reconocido: <<"+yytext()+">>, aand");
                                return new Symbol(sym.aand, yyline, yycolumn, yytext());
            }
          case 148: break;
          case 54: 
            { System.out.println("Reconocido: <<"+yytext()+">>, iff");
                                return new Symbol(sym.iff, yyline, yycolumn, yytext());
            }
          case 149: break;
          case 55: 
            { System.out.println("Reconocido: <<"+yytext()+">>, doo");
                                return new Symbol(sym.doo, yyline, yycolumn, yytext());
            }
          case 150: break;
          case 56: 
            { System.out.println("Reconocido: <<"+yytext()+">>, char");
                                return new Symbol(sym.charER, yyline, yycolumn, yytext());
            }
          case 151: break;
          case 57: 
            { yybegin(YYINITIAL);
                                        System.out.println("Comentario multiple: <<"+yytext()+">> Linea: "+yyline+" ,Columna: "+yycolumn);
            }
          case 152: break;
          case 58: 
            { System.out.println("Reconocido: <<"+yytext()+">>, intt");
                                return new Symbol(sym.intt, yyline, yycolumn, yytext());
            }
          case 153: break;
          case 59: 
            { System.out.println("Reconocido: <<"+yytext()+">>, neww");
                                return new Symbol(sym.neww, yyline, yycolumn, yytext());
            }
          case 154: break;
          case 60: 
            { System.out.println("Reconocido: <<"+yytext()+">>, forr");
                                return new Symbol(sym.forr, yyline, yycolumn, yytext());
            }
          case 155: break;
          case 61: 
            { System.out.println("Reconocido: <<"+yytext()+">>, decimal");
                                return new Symbol(sym.decimal, yyline, yycolumn, yytext());
            }
          case 156: break;
          case 62: 
            { System.out.println("nnn"); paraCadena += "\nnn"; yybegin(cadenaEscapes);
            }
          case 157: break;
          case 63: 
            { System.out.println("Xnn");  yytext(); yybegin(cadenaEscapes);
            }
          case 158: break;
          case 64: 
            { System.out.println("Reconocido: <<"+yytext()+">>, nulo");
                                return new Symbol(sym.nulo, yyline, yycolumn, yytext());
            }
          case 159: break;
          case 65: 
            { System.out.println("Reconocido: <<"+yytext()+">>, truee");
                                return new Symbol(sym.truee, yyline, yycolumn, yytext());
            }
          case 160: break;
          case 66: 
            { System.out.println("Reconocido: <<"+yytext()+">>, charr");
                                return new Symbol(sym.charr, yyline, yycolumn, yytext());
            }
          case 161: break;
          case 67: 
            { System.out.println("Reconocido: <<"+yytext()+">>, casee");
                                return new Symbol(sym.casee, yyline, yycolumn, yytext());
            }
          case 162: break;
          case 68: 
            { System.out.println("Reconocido: <<"+yytext()+">>, elsee");
                                return new Symbol(sym.elsee, yyline, yycolumn, yytext());
            }
          case 163: break;
          case 69: 
            { System.out.println("Reconocido: <<"+yytext()+">>, mainn");
                                return new Symbol(sym.mainn, yyline, yycolumn, yytext());
            }
          case 164: break;
          case 70: 
            { System.out.println("Reconocido: <<"+yytext()+">>, clase");
                                return new Symbol(sym.clase, yyline, yycolumn, yytext());
            }
          case 165: break;
          case 71: 
            { System.out.println("Reconocido: <<"+yytext()+">>, grafica");
                                return new Symbol(sym.grafica, yyline, yycolumn, yytext());
            }
          case 166: break;
          case 72: 
            { System.out.println("Reconocido: <<"+yytext()+">>, breakk");
                                return new Symbol(sym.breakk, yyline, yycolumn, yytext());
            }
          case 167: break;
          case 73: 
            { System.out.println("Reconocido: <<"+yytext()+">>, finall");
                                return new Symbol(sym.finall, yyline, yycolumn, yytext());
            }
          case 168: break;
          case 74: 
            { System.out.println("Reconocido: <<"+yytext()+">>, falsee");
                                return new Symbol(sym.falsee, yyline, yycolumn, yytext());
            }
          case 169: break;
          case 75: 
            { System.out.println("Reconocido: <<"+yytext()+">>, whilee");
                                return new Symbol(sym.whilee, yyline, yycolumn, yytext());
            }
          case 170: break;
          case 76: 
            { System.out.println("Reconocido: <<"+yytext()+">>, print");
                                return new Symbol(sym.print, yyline, yycolumn, yytext());
            }
          case 171: break;
          case 77: 
            { System.out.println("Reconocido: <<"+yytext()+">>, voidd");
                                return new Symbol(sym.voidd, yyline, yycolumn, yytext());
            }
          case 172: break;
          case 78: 
            { System.out.println("Reconocido: <<"+yytext()+">>, importa");
                                return new Symbol(sym.importa, yyline, yycolumn, yytext());
            }
          case 173: break;
          case 79: 
            { System.out.println("Reconocido: <<"+yytext()+">>, retorno");
                                return new Symbol(sym.retorno, yyline, yycolumn, yytext());
            }
          case 174: break;
          case 80: 
            { System.out.println("Reconocido: <<"+yytext()+">>, stringg");
                                return new Symbol(sym.stringg, yyline, yycolumn, yytext());
            }
          case 175: break;
          case 81: 
            { System.out.println("Reconocido: <<"+yytext()+">>, doublee");
                                return new Symbol(sym.doublee, yyline, yycolumn, yytext());
            }
          case 176: break;
          case 82: 
            { System.out.println("Reconocido: <<"+yytext()+">>, estatico");
                                return new Symbol(sym.estatico, yyline, yycolumn, yytext());
            }
          case 177: break;
          case 83: 
            { System.out.println("Reconocido: <<"+yytext()+">>, switchh");
                                return new Symbol(sym.switchh, yyline, yycolumn, yytext());
            }
          case 178: break;
          case 84: 
            { System.out.println("Reconocido: <<"+yytext()+">>, publico");
                                return new Symbol(sym.publico, yyline, yycolumn, yytext());
            }
          case 179: break;
          case 85: 
            { System.out.println("Reconocido: <<"+yytext()+">>, defaultt");
                                return new Symbol(sym.defaultt, yyline, yycolumn, yytext());
            }
          case 180: break;
          case 86: 
            { System.out.println("Reconocido: <<"+yytext()+">>, booleann");
                                return new Symbol(sym.booleann, yyline, yycolumn, yytext());
            }
          case 181: break;
          case 87: 
            { System.out.println("Reconocido: <<"+yytext()+">>, extender");
                                return new Symbol(sym.extender, yyline, yycolumn, yytext());
            }
          case 182: break;
          case 88: 
            { System.out.println("Reconocido: <<"+yytext()+">>, printLinea");
                                return new Symbol(sym.printLinea, yyline, yycolumn, yytext());
            }
          case 183: break;
          case 89: 
            { System.out.println("Reconocido: <<"+yytext()+">>, privado");
                                return new Symbol(sym.privado, yyline, yycolumn, yytext());
            }
          case 184: break;
          case 90: 
            { System.out.println("Reconocido: <<"+yytext()+">>, imprimir");
                                return new Symbol(sym.imprimir, yyline, yycolumn, yytext());
            }
          case 185: break;
          case 91: 
            { System.out.println("Reconocido: <<"+yytext()+">>, continuee");
                                return new Symbol(sym.continuee, yyline, yycolumn, yytext());
            }
          case 186: break;
          case 92: 
            { System.out.println("Reconocido: <<"+yytext()+">>, abstracto");
                                return new Symbol(sym.abstracto, yyline, yycolumn, yytext());
            }
          case 187: break;
          case 93: 
            { System.out.println("Reconocido: <<"+yytext()+">>, read_file");
                                return new Symbol(sym.read_file, yyline, yycolumn, yytext());
            }
          case 188: break;
          case 94: 
            { System.out.println("Reconocido: <<"+yytext()+">>, protegido");
                                return new Symbol(sym.protegido, yyline, yycolumn, yytext());
            }
          case 189: break;
          case 95: 
            { System.out.println("Reconocido: <<"+yytext()+">>, write_file");
                                return new Symbol(sym.write_file, yyline, yycolumn, yytext());
            }
          case 190: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
