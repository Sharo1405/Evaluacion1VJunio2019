/* The following code was generated by JFlex 1.6.1 */

package analizadores;

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/analizadores/lexico.jflex</tt>
 */
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int comentario1 = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 47, 48, 49, 47, 47,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    47,  9, 46,  0,  0,  0, 11, 45, 13, 14,  3,  1,  0,  2, 44,  4, 
    43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 16, 15,  7,  8,  6, 12, 
     0, 24, 31, 22, 28, 33, 34, 27, 23, 40, 39, 42, 32, 38, 20, 29, 
    36, 39, 25, 41, 21, 30, 39, 35, 39, 39, 39,  0,  0,  0,  5, 39, 
     0, 24, 31, 22, 28, 33, 34, 27, 23, 40, 39, 42, 32, 38, 20, 29, 
    36, 39, 25, 41, 21, 30, 39, 35, 39, 39, 39, 17, 10, 18,  0,  0, 
     0,  0,  0,  0,  0, 49,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 39,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 39,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\2\1\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\1\3\22\1\1\7\22\1\23"+
    "\2\1\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\2\0\3\22\1\0\11\22"+
    "\2\0\1\37\1\0\1\40\1\41\1\0\3\22\1\0"+
    "\4\22\1\0\1\22\1\0\1\22\1\41\2\22\1\42"+
    "\1\0\1\43\1\44\1\22\1\0\3\22\1\0\1\22"+
    "\1\0\1\22\1\0\3\22\2\0\1\22\1\0\1\22"+
    "\2\45\1\22\2\46\2\47\2\50\2\22\2\0\1\22"+
    "\1\51\1\52\2\22\1\51\2\0\1\22\1\53\1\22"+
    "\1\54\2\55\1\54";

  private static int [] zzUnpackAction() {
    int [] result = new int[134];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\144\0\372\0\144"+
    "\0\u012c\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226\0\144\0\144"+
    "\0\144\0\144\0\144\0\144\0\144\0\u0258\0\u028a\0\u02bc"+
    "\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c"+
    "\0\u047e\0\u04b0\0\u04e2\0\u0514\0\144\0\144\0\144\0\144"+
    "\0\144\0\144\0\144\0\144\0\144\0\144\0\144\0\u0546"+
    "\0\u0578\0\u05aa\0\u05dc\0\u060e\0\u0640\0\u0672\0\u06a4\0\u06d6"+
    "\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834\0\u04e2"+
    "\0\144\0\u0514\0\144\0\144\0\u0866\0\u0898\0\u08ca\0\u08fc"+
    "\0\u092e\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c"+
    "\0\u0abe\0\u028a\0\u0af0\0\u0b22\0\u0834\0\u0b54\0\u028a\0\u028a"+
    "\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4"+
    "\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74"+
    "\0\u0ea6\0\u0ed8\0\144\0\u028a\0\u0f0a\0\144\0\u028a\0\144"+
    "\0\u028a\0\144\0\u028a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004"+
    "\0\144\0\u028a\0\u1036\0\u1068\0\u028a\0\u109a\0\u10cc\0\u10fe"+
    "\0\u028a\0\u1130\0\144\0\144\0\u028a\0\u028a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[134];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\3\27"+
    "\1\32\1\27\1\33\2\27\1\34\2\27\1\35\1\36"+
    "\1\37\1\3\2\27\1\40\1\41\1\27\1\42\1\3"+
    "\1\43\1\44\2\45\1\0\60\45\1\46\1\45\63\0"+
    "\1\47\62\0\1\50\50\0\1\42\12\0\1\51\65\0"+
    "\1\52\61\0\1\53\61\0\1\54\61\0\1\55\63\0"+
    "\1\56\62\0\1\57\72\0\1\60\21\0\1\61\37\0"+
    "\6\27\1\0\12\27\1\0\6\27\32\0\5\27\1\62"+
    "\1\0\12\27\1\0\6\27\32\0\3\27\1\63\2\27"+
    "\1\0\2\27\1\64\7\27\1\0\6\27\33\0\1\65"+
    "\60\0\6\27\1\0\2\27\1\66\7\27\1\0\6\27"+
    "\32\0\5\27\1\67\1\0\2\27\1\70\7\27\1\0"+
    "\6\27\32\0\4\27\1\71\1\27\1\0\12\27\1\0"+
    "\6\27\32\0\3\27\1\72\2\27\1\0\12\27\1\0"+
    "\6\27\32\0\5\27\1\73\1\0\12\27\1\0\6\27"+
    "\32\0\1\74\5\27\1\0\12\27\1\0\1\75\5\27"+
    "\32\0\1\27\1\76\4\27\1\0\12\27\1\0\6\27"+
    "\61\0\1\42\1\77\5\0\55\100\1\101\4\100\56\102"+
    "\1\103\3\102\25\0\1\104\100\0\1\105\41\0\6\27"+
    "\1\0\3\27\1\106\6\27\1\0\6\27\32\0\4\27"+
    "\1\107\1\27\1\0\12\27\1\0\6\27\32\0\1\110"+
    "\5\27\1\0\12\27\1\0\6\27\37\0\1\111\54\0"+
    "\6\27\1\0\3\27\1\112\6\27\1\0\6\27\32\0"+
    "\6\27\1\0\6\27\1\113\3\27\1\0\6\27\32\0"+
    "\6\27\1\0\2\27\1\114\7\27\1\0\6\27\32\0"+
    "\6\27\1\0\5\27\1\115\4\27\1\0\6\27\31\0"+
    "\1\116\6\27\1\0\12\27\1\0\2\27\1\117\3\27"+
    "\31\0\1\120\6\27\1\0\12\27\1\0\2\27\1\121"+
    "\3\27\32\0\1\27\1\122\4\27\1\0\12\27\1\0"+
    "\6\27\32\0\6\27\1\0\11\27\1\123\1\0\6\27"+
    "\32\0\5\27\1\124\1\0\12\27\1\0\6\27\61\0"+
    "\1\125\37\0\1\126\54\0\6\27\1\0\6\27\1\127"+
    "\3\27\1\0\6\27\32\0\5\27\1\130\1\0\12\27"+
    "\1\0\6\27\32\0\1\27\1\131\4\27\1\0\12\27"+
    "\1\0\6\27\31\0\1\132\24\0\1\132\35\0\6\27"+
    "\1\0\4\27\1\133\5\27\1\0\6\27\32\0\4\27"+
    "\1\134\1\27\1\0\12\27\1\0\6\27\32\0\6\27"+
    "\1\0\5\27\1\135\4\27\1\0\6\27\32\0\6\27"+
    "\1\136\12\27\1\0\3\27\1\137\2\27\46\0\1\140"+
    "\45\0\6\27\1\0\5\27\1\141\4\27\1\0\6\27"+
    "\32\0\1\142\61\0\1\143\5\27\1\0\12\27\1\0"+
    "\6\27\32\0\5\27\1\144\1\0\12\27\1\0\6\27"+
    "\31\0\1\132\6\27\1\0\12\27\1\0\2\27\1\145"+
    "\3\27\31\0\1\146\24\0\1\146\34\0\1\147\6\27"+
    "\1\0\12\27\1\0\2\27\1\150\3\27\32\0\1\151"+
    "\61\0\6\27\1\0\5\27\1\152\4\27\1\0\6\27"+
    "\32\0\6\27\1\0\12\27\1\153\4\27\1\154\1\27"+
    "\32\0\6\27\1\0\6\27\1\155\3\27\1\0\6\27"+
    "\47\0\1\156\44\0\6\27\1\0\6\27\1\157\3\27"+
    "\1\0\6\27\47\0\1\160\44\0\6\27\1\0\6\27"+
    "\1\161\3\27\1\0\6\27\33\0\1\162\60\0\1\27"+
    "\1\163\4\27\1\0\12\27\1\0\6\27\31\0\1\146"+
    "\6\27\1\0\12\27\1\0\2\27\1\164\3\27\32\0"+
    "\1\165\5\27\1\0\12\27\1\0\6\27\54\0\1\166"+
    "\37\0\1\167\61\0\1\170\5\27\1\0\12\27\1\0"+
    "\6\27\41\0\1\171\52\0\6\27\1\0\6\27\1\172"+
    "\3\27\1\0\6\27\32\0\4\27\1\173\1\27\1\0"+
    "\12\27\1\0\6\27\32\0\6\27\1\0\12\27\1\0"+
    "\1\174\5\27\32\0\6\27\1\0\1\175\11\27\1\0"+
    "\6\27\31\0\1\176\24\0\1\176\47\0\1\177\47\0"+
    "\6\27\1\0\3\27\1\200\6\27\1\0\6\27\32\0"+
    "\1\201\5\27\1\0\12\27\1\0\6\27\31\0\1\176"+
    "\6\27\1\0\12\27\1\0\2\27\1\202\3\27\37\0"+
    "\1\203\71\0\1\204\44\0\6\27\1\0\6\27\1\205"+
    "\3\27\1\0\6\27\32\0\5\27\1\206\1\0\12\27"+
    "\1\0\6\27\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4450];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\2\1\1\11\1\1\1\11\6\1\7\11"+
    "\17\1\13\11\2\0\3\1\1\0\11\1\2\0\1\11"+
    "\1\0\2\11\1\0\3\1\1\0\4\1\1\0\1\1"+
    "\1\0\5\1\1\0\3\1\1\0\3\1\1\0\1\1"+
    "\1\0\1\1\1\0\3\1\2\0\1\1\1\0\1\1"+
    "\1\11\2\1\1\11\1\1\1\11\1\1\1\11\3\1"+
    "\2\0\1\1\1\11\4\1\2\0\3\1\2\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[134];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //cod


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { String errorLex = "Error léxico, caracter irreconocible: '"+yytext()+"' en la línea: "+(yyline+1)+" y columna: "+yycolumn;
        System.err.println(errorLex);
        System.out.println(errorLex);
            }
          case 46: break;
          case 2: 
            { System.out.println("Reconocido: <<"+yytext()+">>, mas");
                                return new Symbol(sym.mas, yyline, yycolumn, yytext());
            }
          case 47: break;
          case 3: 
            { System.out.println("Reconocido: <<"+yytext()+">>, menos");
                                return new Symbol(sym.menos, yyline, yycolumn, yytext());
            }
          case 48: break;
          case 4: 
            { System.out.println("Reconocido: <<"+yytext()+">>, por");
                                return new Symbol(sym.por, yyline, yycolumn, yytext());
            }
          case 49: break;
          case 5: 
            { System.out.println("Reconocido: <<"+yytext()+">>, dividir");
                                return new Symbol(sym.dividir, yyline, yycolumn, yytext());
            }
          case 50: break;
          case 6: 
            { System.out.println("Reconocido: <<"+yytext()+">>, potencia");
                                return new Symbol(sym.potencia, yyline, yycolumn, yytext());
            }
          case 51: break;
          case 7: 
            { System.out.println("Reconocido: <<"+yytext()+">>, mayorq");
                                return new Symbol(sym.mayorq, yyline, yycolumn, yytext());
            }
          case 52: break;
          case 8: 
            { System.out.println("Reconocido: <<"+yytext()+">>, menorq");
                                return new Symbol(sym.menorq, yyline, yycolumn, yytext());
            }
          case 53: break;
          case 9: 
            { System.out.println("Reconocido: <<"+yytext()+">>, igual");
                                return new Symbol(sym.igual, yyline, yycolumn, yytext());
            }
          case 54: break;
          case 10: 
            { System.out.println("Reconocido: <<"+yytext()+">>, diferenteunario");
                                return new Symbol(sym.diferenteunario, yyline, yycolumn, yytext());
            }
          case 55: break;
          case 11: 
            { System.out.println("Reconocido: <<"+yytext()+">>, interrogacion");
                                return new Symbol(sym.interrogacion, yyline, yycolumn, yytext());
            }
          case 56: break;
          case 12: 
            { System.out.println("Reconocido: <<"+yytext()+">>, apar");
                                return new Symbol(sym.apar, yyline, yycolumn, yytext());
            }
          case 57: break;
          case 13: 
            { System.out.println("Reconocido: <<"+yytext()+">>, cpar");
                                return new Symbol(sym.cpar, yyline, yycolumn, yytext());
            }
          case 58: break;
          case 14: 
            { System.out.println("Reconocido: <<"+yytext()+">>, puntoycoma");
                                return new Symbol(sym.puntoycoma, yyline, yycolumn, yytext());
            }
          case 59: break;
          case 15: 
            { System.out.println("Reconocido: <<"+yytext()+">>, dospuntos");
                                return new Symbol(sym.dospuntos, yyline, yycolumn, yytext());
            }
          case 60: break;
          case 16: 
            { System.out.println("Reconocido: <<"+yytext()+">>, allave");
                                return new Symbol(sym.allave, yyline, yycolumn, yytext());
            }
          case 61: break;
          case 17: 
            { System.out.println("Reconocido: <<"+yytext()+">>, cllave");
                                return new Symbol(sym.cllave, yyline, yycolumn, yytext());
            }
          case 62: break;
          case 18: 
            { System.out.println("Reconocido: <<"+yytext()+">>, id");
                                return new Symbol(sym.id, yyline, yycolumn, yytext());
            }
          case 63: break;
          case 19: 
            { System.out.println("Reconocido: <<"+yytext()+">>, entero");
                                return new Symbol(sym.entero, yyline, yycolumn, yytext());
            }
          case 64: break;
          case 20: 
            { 
            }
          case 65: break;
          case 21: 
            { yybegin(YYINITIAL);
            }
          case 66: break;
          case 22: 
            { System.out.println("Reconocido: <<"+yytext()+">>, masmas");
                                return new Symbol(sym.masmas, yyline, yycolumn, yytext());
            }
          case 67: break;
          case 23: 
            { System.out.println("Reconocido: <<"+yytext()+">>, menosmenos");
                                return new Symbol(sym.menosmenos, yyline, yycolumn, yytext());
            }
          case 68: break;
          case 24: 
            { yybegin(comentario1);
            }
          case 69: break;
          case 25: 
            { System.out.println("Reconocido: <<"+yytext()+">>, mayorigualq");
                                return new Symbol(sym.mayorigualq, yyline, yycolumn, yytext());
            }
          case 70: break;
          case 26: 
            { System.out.println("Reconocido: <<"+yytext()+">>, menorigualq");
                                return new Symbol(sym.menorigualq, yyline, yycolumn, yytext());
            }
          case 71: break;
          case 27: 
            { System.out.println("Reconocido: <<"+yytext()+">>, igualigual");
                                return new Symbol(sym.igualigual, yyline, yycolumn, yytext());
            }
          case 72: break;
          case 28: 
            { System.out.println("Reconocido: <<"+yytext()+">>, diferente");
                                return new Symbol(sym.diferente, yyline, yycolumn, yytext());
            }
          case 73: break;
          case 29: 
            { System.out.println("Reconocido: <<"+yytext()+">>, oor");
                                return new Symbol(sym.oor, yyline, yycolumn, yytext());
            }
          case 74: break;
          case 30: 
            { System.out.println("Reconocido: <<"+yytext()+">>, aand");
                                return new Symbol(sym.aand, yyline, yycolumn, yytext());
            }
          case 75: break;
          case 31: 
            { System.out.println("Reconocido: <<"+yytext()+">>, char");
                                return new Symbol(sym.charER, yyline, yycolumn, yytext());
            }
          case 76: break;
          case 32: 
            { System.out.println("Reconocido: <<"+yytext()+">>, cadena");
                                return new Symbol(sym.cadena, yyline, yycolumn, yytext());
            }
          case 77: break;
          case 33: 
            { System.out.println("Reconocido: <<"+yytext()+">>, intt");
                                return new Symbol(sym.intt, yyline, yycolumn, yytext());
            }
          case 78: break;
          case 34: 
            { System.out.println("Reconocido: <<"+yytext()+">>, decimal");
                                return new Symbol(sym.decimal, yyline, yycolumn, yytext());
            }
          case 79: break;
          case 35: 
            { System.out.println("Reconocido: <<"+yytext()+">>, truee");
                                return new Symbol(sym.truee, yyline, yycolumn, yytext());
            }
          case 80: break;
          case 36: 
            { System.out.println("Reconocido: <<"+yytext()+">>, charr");
                                return new Symbol(sym.charr, yyline, yycolumn, yytext());
            }
          case 81: break;
          case 37: 
            { System.out.println("Reconocido: <<"+yytext()+">>, breakk");
                                return new Symbol(sym.breakk, yyline, yycolumn, yytext());
            }
          case 82: break;
          case 38: 
            { System.out.println("Reconocido: <<"+yytext()+">>, falsee");
                                return new Symbol(sym.falsee, yyline, yycolumn, yytext());
            }
          case 83: break;
          case 39: 
            { System.out.println("Reconocido: <<"+yytext()+">>, whilee");
                                return new Symbol(sym.whilee, yyline, yycolumn, yytext());
            }
          case 84: break;
          case 40: 
            { System.out.println("Reconocido: <<"+yytext()+">>, print");
                                return new Symbol(sym.print, yyline, yycolumn, yytext());
            }
          case 85: break;
          case 41: 
            { System.out.println("Reconocido: <<"+yytext()+">>, stringg");
                                return new Symbol(sym.stringg, yyline, yycolumn, yytext());
            }
          case 86: break;
          case 42: 
            { System.out.println("Reconocido: <<"+yytext()+">>, doublee");
                                return new Symbol(sym.doublee, yyline, yycolumn, yytext());
            }
          case 87: break;
          case 43: 
            { System.out.println("Reconocido: <<"+yytext()+">>, booleann");
                                return new Symbol(sym.booleann, yyline, yycolumn, yytext());
            }
          case 88: break;
          case 44: 
            { System.out.println("Reconocido: <<"+yytext()+">>, imprimir");
                                return new Symbol(sym.imprimir, yyline, yycolumn, yytext());
            }
          case 89: break;
          case 45: 
            { System.out.println("Reconocido: <<"+yytext()+">>, continuee");
                                return new Symbol(sym.continuee, yyline, yycolumn, yytext());
            }
          case 90: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
