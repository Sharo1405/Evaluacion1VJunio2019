
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jun 18 23:52:34 CST 2019
//----------------------------------------------------

package analizadores;

import ast.clase.*;
import ast.ArbolAST;
import ast.NodoAST;
import ast.entorno.Simbolo;
import ast.expresiones.*;
import ast.expresiones.arreglos.*;
import ast.expresiones.operacion.*;
import ast.expresiones.primitivos.*;
import ast.importaciones.Importar;
import ast.instrucciones.declaraciones.*;
import ast.instrucciones.*;
import ast.instrucciones.Printer;
import ast.instrucciones.Seleccion.*;
import ast.instrucciones.ciclos.*;
import ast.instrucciones.ciclos.RetCont.*;
import java.util.LinkedList;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jun 18 23:52:34 CST 2019
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\254\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\036\004\000\002\036\003\000\002\036\003" +
    "\000\002\042\006\000\002\042\005\000\002\037\004\000" +
    "\002\037\003\000\002\041\007\000\002\041\011\000\002" +
    "\041\006\000\002\041\010\000\002\044\004\000\002\044" +
    "\003\000\002\056\004\000\002\056\003\000\002\040\003" +
    "\000\002\040\003\000\002\043\004\000\002\043\003\000" +
    "\002\045\003\000\002\045\003\000\002\054\010\000\002" +
    "\054\012\000\002\054\007\000\002\054\011\000\002\047" +
    "\010\000\002\047\007\000\002\047\007\000\002\047\006" +
    "\000\002\047\007\000\002\047\007\000\002\047\006\000" +
    "\002\047\010\000\002\047\007\000\002\047\011\000\002" +
    "\047\010\000\002\047\012\000\002\047\011\000\002\047" +
    "\003\000\002\053\005\000\002\053\004\000\002\051\005" +
    "\000\002\051\003\000\002\052\005\000\002\052\004\000" +
    "\002\050\005\000\002\050\004\000\002\033\006\000\002" +
    "\033\005\000\002\030\005\000\002\030\003\000\002\027" +
    "\005\000\002\027\003\000\002\026\005\000\002\026\003" +
    "\000\002\003\005\000\002\004\004\000\002\004\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\061\007" +
    "\000\002\061\006\000\002\062\005\000\002\062\003\000" +
    "\002\060\005\000\002\060\004\000\002\057\006\000\002" +
    "\057\005\000\002\057\006\000\002\057\007\000\002\055" +
    "\007\000\002\055\011\000\002\024\007\000\002\024\011" +
    "\000\002\024\011\000\002\011\003\000\002\011\003\000" +
    "\002\017\012\000\002\017\011\000\002\017\011\000\002" +
    "\017\010\000\002\020\003\000\002\020\004\000\002\023" +
    "\004\000\002\021\003\000\002\021\004\000\002\022\005" +
    "\000\002\022\004\000\002\012\005\000\002\012\003\000" +
    "\002\013\007\000\002\013\011\000\002\010\007\000\002" +
    "\010\004\000\002\010\004\000\002\010\011\000\002\010" +
    "\012\000\002\014\003\000\002\032\004\000\002\032\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\015\007\000\002\015\007\000\002\015\006" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\005\004\000\002\005\004\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\004\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\006\000\002" +
    "\005\005\000\002\005\007\000\002\005\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\005\006\000\002\005\010\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\035\005\000\002" +
    "\035\003\000\002\034\003\000\002\025\006\000\002\025" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u017f\000\014\005\016\077\007\104\011\107\015\110" +
    "\017\001\002\000\014\002\ufffd\077\007\104\011\107\u017f" +
    "\110\017\001\002\000\010\077\007\104\011\110\u0176\001" +
    "\002\000\004\002\000\001\002\000\010\077\uffef\104\uffef" +
    "\110\uffef\001\002\000\004\002\uffff\001\002\000\010\077" +
    "\uffee\104\uffee\110\uffee\001\002\000\012\002\ufff8\077\ufff8" +
    "\104\ufff8\110\ufff8\001\002\000\004\002\u0174\001\002\000" +
    "\010\077\ufff0\104\ufff0\110\ufff0\001\002\000\004\021\u0172" +
    "\001\002\000\100\007\373\014\047\015\052\016\046\017" +
    "\042\020\037\030\346\053\366\054\367\055\377\056\361" +
    "\057\356\062\364\064\344\065\370\066\347\073\354\074" +
    "\374\076\u0102\077\031\100\035\101\044\102\034\103\054" +
    "\104\050\105\u0100\106\375\110\360\113\036\114\u0103\116" +
    "\057\001\002\000\004\007\022\001\002\000\012\002\ufffc" +
    "\077\007\104\011\110\017\001\002\000\012\002\ufff9\077" +
    "\ufff9\104\ufff9\110\ufff9\001\002\000\006\005\023\111\024" +
    "\001\002\000\042\006\045\007\053\014\047\015\052\016" +
    "\046\017\042\020\037\077\031\100\035\101\044\102\034" +
    "\103\054\104\050\110\056\113\036\116\057\001\002\000" +
    "\004\007\025\001\002\000\004\005\026\001\002\000\042" +
    "\006\045\007\053\014\047\015\052\016\046\017\042\020" +
    "\037\077\031\100\035\101\044\102\034\103\054\104\050" +
    "\110\056\113\036\116\057\001\002\000\042\006\uffeb\007" +
    "\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\077\uffeb" +
    "\100\uffeb\101\uffeb\102\uffeb\103\uffeb\104\uffeb\110\uffeb\113" +
    "\uffeb\116\uffeb\001\002\000\036\007\uff94\014\uff94\015\uff94" +
    "\016\uff94\017\uff94\020\uff94\077\uff94\100\uff94\101\uff94\102" +
    "\uff94\103\uff94\104\uff94\110\331\113\uff94\001\002\000\036" +
    "\007\uff93\014\uff93\015\uff93\016\uff93\017\uff93\020\uff93\077" +
    "\uff93\100\uff93\101\uff93\102\uff93\103\uff93\104\uff93\110\uff93" +
    "\113\uff93\001\002\000\006\007\320\011\067\001\002\000" +
    "\034\007\053\014\047\015\052\016\046\017\042\020\037" +
    "\077\031\100\035\101\044\102\034\103\054\104\050\113" +
    "\036\001\002\000\036\007\uff90\014\uff90\015\uff90\016\uff90" +
    "\017\uff90\020\uff90\077\uff90\100\uff90\101\uff90\102\uff90\103" +
    "\uff90\104\uff90\110\uff90\113\uff90\001\002\000\036\007\uff92" +
    "\014\uff92\015\uff92\016\uff92\017\uff92\020\uff92\077\uff92\100" +
    "\uff92\101\uff92\102\uff92\103\uff92\104\uff92\110\uff92\113\uff92" +
    "\001\002\000\010\007\uff80\011\uff80\112\uff80\001\002\000" +
    "\010\007\uff83\011\uff83\112\uff83\001\002\000\106\006\uffd8" +
    "\007\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\030" +
    "\uffd8\053\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8\062\uffd8" +
    "\064\uffd8\065\uffd8\066\uffd8\067\uffd8\070\uffd8\073\uffd8\074" +
    "\uffd8\076\uffd8\077\uffd8\100\uffd8\101\uffd8\102\uffd8\103\uffd8" +
    "\104\uffd8\105\uffd8\106\uffd8\110\uffd8\113\uffd8\114\uffd8\116" +
    "\uffd8\001\002\000\042\006\141\007\053\014\047\015\052" +
    "\016\046\017\042\020\037\077\031\100\035\101\044\102" +
    "\034\103\054\104\050\110\056\113\036\116\057\001\002" +
    "\000\010\007\uff82\011\uff82\112\uff82\001\002\000\012\002" +
    "\ufff4\077\ufff4\104\ufff4\110\ufff4\001\002\000\036\007\uff91" +
    "\014\uff91\015\uff91\016\uff91\017\uff91\020\uff91\077\uff91\100" +
    "\uff91\101\uff91\102\uff91\103\uff91\104\uff91\110\uff91\113\uff91" +
    "\001\002\000\012\002\ufff2\077\ufff2\104\ufff2\110\ufff2\001" +
    "\002\000\010\007\uff84\011\uff84\112\uff84\001\002\000\010" +
    "\007\uff86\011\uff86\112\uff86\001\002\000\036\007\uff8e\014" +
    "\uff8e\015\uff8e\016\uff8e\017\uff8e\020\uff8e\077\uff8e\100\uff8e" +
    "\101\uff8e\102\uff8e\103\uff8e\104\uff8e\110\uff8e\113\uff8e\001" +
    "\002\000\042\006\uffec\007\uffec\014\uffec\015\uffec\016\uffec" +
    "\017\uffec\020\uffec\077\uffec\100\uffec\101\uffec\102\uffec\103" +
    "\uffec\104\uffec\110\uffec\113\uffec\116\uffec\001\002\000\010" +
    "\007\uff85\011\uff85\112\uff85\001\002\000\010\007\uff81\011" +
    "\uff81\112\uff81\001\002\000\036\007\uff8f\014\uff8f\015\uff8f" +
    "\016\uff8f\017\uff8f\020\uff8f\077\uff8f\100\uff8f\101\uff8f\102" +
    "\uff8f\103\uff8f\104\uff8f\110\uff8f\113\uff8f\001\002\000\042" +
    "\006\uffea\007\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020" +
    "\uffea\077\uffea\100\uffea\101\uffea\102\uffea\103\uffea\104\uffea" +
    "\110\uffea\113\uffea\116\uffea\001\002\000\004\007\127\001" +
    "\002\000\004\115\060\001\002\000\034\007\053\014\047" +
    "\015\052\016\046\017\042\020\037\077\031\100\035\101" +
    "\044\102\034\103\054\104\050\113\036\001\002\000\006" +
    "\007\121\011\067\001\002\000\034\007\uff94\014\uff94\015" +
    "\uff94\016\uff94\017\uff94\020\uff94\077\uff94\100\uff94\101\uff94" +
    "\102\uff94\103\uff94\104\uff94\113\uff94\001\002\000\034\007" +
    "\053\014\047\015\052\016\046\017\042\020\037\077\031" +
    "\100\035\101\044\102\034\103\054\104\050\113\036\001" +
    "\002\000\006\007\070\011\067\001\002\000\034\007\uff95" +
    "\014\uff95\015\uff95\016\uff95\017\uff95\020\uff95\077\uff95\100" +
    "\uff95\101\uff95\102\uff95\103\uff95\104\uff95\113\uff95\001\002" +
    "\000\006\007\114\011\113\001\002\000\004\012\112\001" +
    "\002\000\004\031\071\001\002\000\024\007\053\014\047" +
    "\015\052\016\046\017\042\020\037\032\077\103\074\113" +
    "\036\001\002\000\004\005\016\001\002\000\106\006\uffdc" +
    "\007\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\030" +
    "\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\062\uffdc" +
    "\064\uffdc\065\uffdc\066\uffdc\067\uffdc\070\uffdc\073\uffdc\074" +
    "\uffdc\076\uffdc\077\uffdc\100\uffdc\101\uffdc\102\uffdc\103\uffdc" +
    "\104\uffdc\105\uffdc\106\uffdc\110\uffdc\113\uffdc\114\uffdc\116" +
    "\uffdc\001\002\000\020\007\053\014\047\015\052\016\046" +
    "\017\042\020\037\113\036\001\002\000\004\007\105\001" +
    "\002\000\006\032\uffd4\075\uffd4\001\002\000\006\005\uffd6" +
    "\010\uffd6\001\002\000\006\032\101\075\102\001\002\000" +
    "\006\005\uffd7\010\uffd7\001\002\000\022\007\053\014\047" +
    "\015\052\016\046\017\042\020\037\103\074\113\036\001" +
    "\002\000\006\032\uffd5\075\uffd5\001\002\000\010\011\106" +
    "\032\uffd2\075\uffd2\001\002\000\014\004\uffc8\010\uffc8\011" +
    "\uffc8\032\uffc8\075\uffc8\001\002\000\004\012\107\001\002" +
    "\000\014\004\uffc9\010\uffc9\011\uffc9\032\uffc9\075\uffc9\001" +
    "\002\000\004\007\105\001\002\000\010\011\106\032\uffd3" +
    "\075\uffd3\001\002\000\006\007\uffd0\011\uffd0\001\002\000" +
    "\004\012\117\001\002\000\004\031\071\001\002\000\004" +
    "\005\016\001\002\000\106\006\uffda\007\uffda\014\uffda\015" +
    "\uffda\016\uffda\017\uffda\020\uffda\030\uffda\053\uffda\054\uffda" +
    "\055\uffda\056\uffda\057\uffda\062\uffda\064\uffda\065\uffda\066" +
    "\uffda\067\uffda\070\uffda\073\uffda\074\uffda\076\uffda\077\uffda" +
    "\100\uffda\101\uffda\102\uffda\103\uffda\104\uffda\105\uffda\106" +
    "\uffda\110\uffda\113\uffda\114\uffda\116\uffda\001\002\000\006" +
    "\007\uffd1\011\uffd1\001\002\000\006\007\124\011\113\001" +
    "\002\000\004\031\071\001\002\000\004\005\016\001\002" +
    "\000\106\006\uffdb\007\uffdb\014\uffdb\015\uffdb\016\uffdb\017" +
    "\uffdb\020\uffdb\030\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb" +
    "\057\uffdb\062\uffdb\064\uffdb\065\uffdb\066\uffdb\067\uffdb\070" +
    "\uffdb\073\uffdb\074\uffdb\076\uffdb\077\uffdb\100\uffdb\101\uffdb" +
    "\102\uffdb\103\uffdb\104\uffdb\105\uffdb\106\uffdb\110\uffdb\113" +
    "\uffdb\114\uffdb\116\uffdb\001\002\000\004\031\071\001\002" +
    "\000\004\005\016\001\002\000\106\006\uffd9\007\uffd9\014" +
    "\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\030\uffd9\053\uffd9" +
    "\054\uffd9\055\uffd9\056\uffd9\057\uffd9\062\uffd9\064\uffd9\065" +
    "\uffd9\066\uffd9\067\uffd9\070\uffd9\073\uffd9\074\uffd9\076\uffd9" +
    "\077\uffd9\100\uffd9\101\uffd9\102\uffd9\103\uffd9\104\uffd9\105" +
    "\uffd9\106\uffd9\110\uffd9\113\uffd9\114\uffd9\116\uffd9\001\002" +
    "\000\006\005\131\111\130\001\002\000\004\007\135\001" +
    "\002\000\040\007\053\014\047\015\052\016\046\017\042" +
    "\020\037\077\031\100\035\101\044\102\034\103\054\104" +
    "\050\110\056\113\036\116\057\001\002\000\042\006\133" +
    "\007\053\014\047\015\052\016\046\017\042\020\037\077" +
    "\031\100\035\101\044\102\034\103\054\104\050\110\056" +
    "\113\036\116\057\001\002\000\042\006\uffe7\007\uffe7\014" +
    "\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\077\uffe7\100\uffe7" +
    "\101\uffe7\102\uffe7\103\uffe7\104\uffe7\110\uffe7\113\uffe7\116" +
    "\uffe7\001\002\000\042\006\uffed\007\uffed\014\uffed\015\uffed" +
    "\016\uffed\017\uffed\020\uffed\077\uffed\100\uffed\101\uffed\102" +
    "\uffed\103\uffed\104\uffed\110\uffed\113\uffed\116\uffed\001\002" +
    "\000\004\005\136\001\002\000\040\007\053\014\047\015" +
    "\052\016\046\017\042\020\037\077\031\100\035\101\044" +
    "\102\034\103\054\104\050\110\056\113\036\116\057\001" +
    "\002\000\042\006\140\007\053\014\047\015\052\016\046" +
    "\017\042\020\037\077\031\100\035\101\044\102\034\103" +
    "\054\104\050\110\056\113\036\116\057\001\002\000\042" +
    "\006\uffe6\007\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020" +
    "\uffe6\077\uffe6\100\uffe6\101\uffe6\102\uffe6\103\uffe6\104\uffe6" +
    "\110\uffe6\113\uffe6\116\uffe6\001\002\000\012\002\ufff3\077" +
    "\ufff3\104\ufff3\110\ufff3\001\002\000\010\007\150\011\067" +
    "\112\145\001\002\000\006\010\314\075\313\001\002\000" +
    "\012\004\162\010\uffca\011\106\075\uffca\001\002\000\004" +
    "\031\071\001\002\000\006\010\uffcc\075\uffcc\001\002\000" +
    "\006\007\154\011\113\001\002\000\014\004\uffc8\010\uffc8" +
    "\011\uffc8\031\071\075\uffc8\001\002\000\006\005\016\010" +
    "\153\001\002\000\106\006\uffe0\007\uffe0\014\uffe0\015\uffe0" +
    "\016\uffe0\017\uffe0\020\uffe0\030\uffe0\053\uffe0\054\uffe0\055" +
    "\uffe0\056\uffe0\057\uffe0\062\uffe0\064\uffe0\065\uffe0\066\uffe0" +
    "\067\uffe0\070\uffe0\073\uffe0\074\uffe0\076\uffe0\077\uffe0\100" +
    "\uffe0\101\uffe0\102\uffe0\103\uffe0\104\uffe0\105\uffe0\106\uffe0" +
    "\110\uffe0\113\uffe0\114\uffe0\116\uffe0\001\002\000\106\006" +
    "\uffe4\007\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4" +
    "\030\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4\062" +
    "\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4\070\uffe4\073\uffe4" +
    "\074\uffe4\076\uffe4\077\uffe4\100\uffe4\101\uffe4\102\uffe4\103" +
    "\uffe4\104\uffe4\105\uffe4\106\uffe4\110\uffe4\113\uffe4\114\uffe4" +
    "\116\uffe4\001\002\000\004\031\071\001\002\000\006\005" +
    "\016\010\157\001\002\000\106\006\uffde\007\uffde\014\uffde" +
    "\015\uffde\016\uffde\017\uffde\020\uffde\030\uffde\053\uffde\054" +
    "\uffde\055\uffde\056\uffde\057\uffde\062\uffde\064\uffde\065\uffde" +
    "\066\uffde\067\uffde\070\uffde\073\uffde\074\uffde\076\uffde\077" +
    "\uffde\100\uffde\101\uffde\102\uffde\103\uffde\104\uffde\105\uffde" +
    "\106\uffde\110\uffde\113\uffde\114\uffde\116\uffde\001\002\000" +
    "\106\006\uffe5\007\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5" +
    "\020\uffe5\030\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\057" +
    "\uffe5\062\uffe5\064\uffe5\065\uffe5\066\uffe5\067\uffe5\070\uffe5" +
    "\073\uffe5\074\uffe5\076\uffe5\077\uffe5\100\uffe5\101\uffe5\102" +
    "\uffe5\103\uffe5\104\uffe5\105\uffe5\106\uffe5\110\uffe5\113\uffe5" +
    "\114\uffe5\116\uffe5\001\002\000\004\005\016\001\002\000" +
    "\106\006\uffe1\007\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1" +
    "\020\uffe1\030\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1\057" +
    "\uffe1\062\uffe1\064\uffe1\065\uffe1\066\uffe1\067\uffe1\070\uffe1" +
    "\073\uffe1\074\uffe1\076\uffe1\077\uffe1\100\uffe1\101\uffe1\102" +
    "\uffe1\103\uffe1\104\uffe1\105\uffe1\106\uffe1\110\uffe1\113\uffe1" +
    "\114\uffe1\116\uffe1\001\002\000\046\005\170\007\201\013" +
    "\171\021\164\022\177\023\173\024\175\025\176\026\202" +
    "\027\166\031\205\033\204\035\174\042\165\056\167\057" +
    "\163\073\203\074\172\001\002\000\004\007\312\001\002" +
    "\000\052\006\uff6f\010\uff6f\012\uff6f\032\uff6f\033\uff6f\034" +
    "\uff6f\035\uff6f\036\uff6f\037\uff6f\040\uff6f\041\uff6f\043\uff6f" +
    "\044\uff6f\045\uff6f\046\uff6f\047\uff6f\050\uff6f\051\uff6f\052" +
    "\uff6f\075\uff6f\001\002\000\046\005\170\007\201\013\171" +
    "\021\164\022\177\023\173\024\175\025\176\026\202\027" +
    "\166\031\205\033\204\035\174\042\165\056\167\057\163" +
    "\073\203\074\172\001\002\000\052\006\uff6d\010\uff6d\012" +
    "\uff6d\032\uff6d\033\uff6d\034\uff6d\035\uff6d\036\uff6d\037\uff6d" +
    "\040\uff6d\041\uff6d\043\uff6d\044\uff6d\045\uff6d\046\uff6d\047" +
    "\uff6d\050\uff6d\051\uff6d\052\uff6d\075\uff6d\001\002\000\004" +
    "\007\310\001\002\000\046\005\170\007\201\013\171\021" +
    "\164\022\177\023\173\024\175\025\176\026\202\027\166" +
    "\031\205\033\204\035\174\042\165\056\167\057\163\073" +
    "\203\074\172\001\002\000\020\007\053\014\047\015\052" +
    "\016\046\017\042\020\037\113\036\001\002\000\004\031" +
    "\275\001\002\000\052\006\uff6a\010\uff6a\012\uff6a\032\uff6a" +
    "\033\uff6a\034\uff6a\035\uff6a\036\uff6a\037\uff6a\040\uff6a\041" +
    "\uff6a\043\uff6a\044\uff6a\045\uff6a\046\uff6a\047\uff6a\050\uff6a" +
    "\051\uff6a\052\uff6a\075\uff6a\001\002\000\046\005\170\007" +
    "\201\013\171\021\164\022\177\023\173\024\175\025\176" +
    "\026\202\027\166\031\205\033\204\035\174\042\165\056" +
    "\167\057\163\073\203\074\172\001\002\000\052\006\uff6c" +
    "\010\uff6c\012\uff6c\032\uff6c\033\uff6c\034\uff6c\035\uff6c\036" +
    "\uff6c\037\uff6c\040\uff6c\041\uff6c\043\uff6c\044\uff6c\045\uff6c" +
    "\046\uff6c\047\uff6c\050\uff6c\051\uff6c\052\uff6c\075\uff6c\001" +
    "\002\000\052\006\uff69\010\uff69\012\uff69\032\uff69\033\uff69" +
    "\034\uff69\035\uff69\036\uff69\037\uff69\040\uff69\041\uff69\043" +
    "\uff69\044\uff69\045\uff69\046\uff69\047\uff69\050\uff69\051\uff69" +
    "\052\uff69\075\uff69\001\002\000\052\006\uff6b\010\uff6b\012" +
    "\uff6b\032\uff6b\033\uff6b\034\uff6b\035\uff6b\036\uff6b\037\uff6b" +
    "\040\uff6b\041\uff6b\043\uff6b\044\uff6b\045\uff6b\046\uff6b\047" +
    "\uff6b\050\uff6b\051\uff6b\052\uff6b\075\uff6b\001\002\000\042" +
    "\010\uffcb\033\223\034\220\035\211\036\224\037\207\040" +
    "\214\041\210\043\213\044\225\045\212\046\217\047\222" +
    "\050\215\051\216\075\uffcb\001\002\000\062\006\uff68\010" +
    "\uff68\011\257\012\uff68\031\254\032\uff68\033\uff68\034\uff68" +
    "\035\uff68\036\uff68\037\uff68\040\uff68\041\uff68\043\uff68\044" +
    "\uff68\045\uff68\046\uff68\047\uff68\050\uff68\051\uff68\052\uff68" +
    "\056\256\057\260\075\uff68\001\002\000\052\006\uff6e\010" +
    "\uff6e\012\uff6e\032\uff6e\033\uff6e\034\uff6e\035\uff6e\036\uff6e" +
    "\037\uff6e\040\uff6e\041\uff6e\043\uff6e\044\uff6e\045\uff6e\046" +
    "\uff6e\047\uff6e\050\uff6e\051\uff6e\052\uff6e\075\uff6e\001\002" +
    "\000\004\031\247\001\002\000\046\005\170\007\201\013" +
    "\171\021\164\022\177\023\173\024\175\025\176\026\202" +
    "\027\166\031\205\033\204\035\174\042\165\056\167\057" +
    "\163\073\203\074\172\001\002\000\046\005\170\007\201" +
    "\013\171\021\164\022\177\023\173\024\175\025\176\026" +
    "\202\027\166\031\205\033\204\035\174\042\165\056\167" +
    "\057\163\073\203\074\172\001\002\000\040\032\221\033" +
    "\223\034\220\035\211\036\224\037\207\040\214\041\210" +
    "\043\213\044\225\045\212\046\217\047\222\050\215\051" +
    "\216\001\002\000\046\005\170\007\201\013\171\021\164" +
    "\022\177\023\173\024\175\025\176\026\202\027\166\031" +
    "\205\033\204\035\174\042\165\056\167\057\163\073\203" +
    "\074\172\001\002\000\046\005\170\007\201\013\171\021" +
    "\164\022\177\023\173\024\175\025\176\026\202\027\166" +
    "\031\205\033\204\035\174\042\165\056\167\057\163\073" +
    "\203\074\172\001\002\000\046\005\170\007\201\013\171" +
    "\021\164\022\177\023\173\024\175\025\176\026\202\027" +
    "\166\031\205\033\204\035\174\042\165\056\167\057\163" +
    "\073\203\074\172\001\002\000\046\005\170\007\201\013" +
    "\171\021\164\022\177\023\173\024\175\025\176\026\202" +
    "\027\166\031\205\033\204\035\174\042\165\056\167\057" +
    "\163\073\203\074\172\001\002\000\046\005\170\007\201" +
    "\013\171\021\164\022\177\023\173\024\175\025\176\026" +
    "\202\027\166\031\205\033\204\035\174\042\165\056\167" +
    "\057\163\073\203\074\172\001\002\000\046\005\170\007" +
    "\201\013\171\021\164\022\177\023\173\024\175\025\176" +
    "\026\202\027\166\031\205\033\204\035\174\042\165\056" +
    "\167\057\163\073\203\074\172\001\002\000\046\005\170" +
    "\007\201\013\171\021\164\022\177\023\173\024\175\025" +
    "\176\026\202\027\166\031\205\033\204\035\174\042\165" +
    "\056\167\057\163\073\203\074\172\001\002\000\046\005" +
    "\170\007\201\013\171\021\164\022\177\023\173\024\175" +
    "\025\176\026\202\027\166\031\205\033\204\035\174\042" +
    "\165\056\167\057\163\073\203\074\172\001\002\000\046" +
    "\005\170\007\201\013\171\021\164\022\177\023\173\024" +
    "\175\025\176\026\202\027\166\031\205\033\204\035\174" +
    "\042\165\056\167\057\163\073\203\074\172\001\002\000" +
    "\046\005\170\007\201\013\171\021\164\022\177\023\173" +
    "\024\175\025\176\026\202\027\166\031\205\033\204\035" +
    "\174\042\165\056\167\057\163\073\203\074\172\001\002" +
    "\000\052\006\uff5b\010\uff5b\012\uff5b\032\uff5b\033\uff5b\034" +
    "\uff5b\035\uff5b\036\uff5b\037\uff5b\040\uff5b\041\uff5b\043\uff5b" +
    "\044\uff5b\045\uff5b\046\uff5b\047\uff5b\050\uff5b\051\uff5b\052" +
    "\uff5b\075\uff5b\001\002\000\046\005\170\007\201\013\171" +
    "\021\164\022\177\023\173\024\175\025\176\026\202\027" +
    "\166\031\205\033\204\035\174\042\165\056\167\057\163" +
    "\073\203\074\172\001\002\000\046\005\170\007\201\013" +
    "\171\021\164\022\177\023\173\024\175\025\176\026\202" +
    "\027\166\031\205\033\204\035\174\042\165\056\167\057" +
    "\163\073\203\074\172\001\002\000\046\005\170\007\201" +
    "\013\171\021\164\022\177\023\173\024\175\025\176\026" +
    "\202\027\166\031\205\033\204\035\174\042\165\056\167" +
    "\057\163\073\203\074\172\001\002\000\046\005\170\007" +
    "\201\013\171\021\164\022\177\023\173\024\175\025\176" +
    "\026\202\027\166\031\205\033\204\035\174\042\165\056" +
    "\167\057\163\073\203\074\172\001\002\000\052\006\uff78" +
    "\010\uff78\012\uff78\032\uff78\033\223\034\220\035\211\036" +
    "\224\037\207\040\uff78\041\uff78\043\uff78\044\uff78\045\uff78" +
    "\046\uff78\047\uff78\050\uff78\051\uff78\052\uff78\075\uff78\001" +
    "\002\000\052\006\uff72\010\uff72\012\uff72\032\uff72\033\uff72" +
    "\034\uff72\035\uff72\036\uff72\037\207\040\uff72\041\uff72\043" +
    "\uff72\044\uff72\045\uff72\046\uff72\047\uff72\050\uff72\051\uff72" +
    "\052\uff72\075\uff72\001\002\000\052\006\uff74\010\uff74\012" +
    "\uff74\032\uff74\033\uff74\034\220\035\uff74\036\224\037\207" +
    "\040\uff74\041\uff74\043\uff74\044\uff74\045\uff74\046\uff74\047" +
    "\uff74\050\uff74\051\uff74\052\uff74\075\uff74\001\002\000\052" +
    "\006\uff76\010\uff76\012\uff76\032\uff76\033\223\034\220\035" +
    "\211\036\224\037\207\040\uff76\041\uff76\043\uff76\044\uff76" +
    "\045\uff76\046\uff76\047\uff76\050\uff76\051\uff76\052\uff76\075" +
    "\uff76\001\002\000\052\006\uff73\010\uff73\012\uff73\032\uff73" +
    "\033\uff73\034\uff73\035\uff73\036\uff73\037\207\040\uff73\041" +
    "\uff73\043\uff73\044\uff73\045\uff73\046\uff73\047\uff73\050\uff73" +
    "\051\uff73\052\uff73\075\uff73\001\002\000\052\006\uff75\010" +
    "\uff75\012\uff75\032\uff75\033\223\034\220\035\211\036\224" +
    "\037\207\040\uff75\041\uff75\043\uff75\044\uff75\045\uff75\046" +
    "\uff75\047\uff75\050\uff75\051\uff75\052\uff75\075\uff75\001\002" +
    "\000\040\033\223\034\220\035\211\036\224\037\207\040" +
    "\214\041\210\043\213\044\225\045\212\046\217\047\222" +
    "\050\215\051\216\052\235\001\002\000\046\005\170\007" +
    "\201\013\171\021\164\022\177\023\173\024\175\025\176" +
    "\026\202\027\166\031\205\033\204\035\174\042\165\056" +
    "\167\057\163\073\203\074\172\001\002\000\052\006\uff65" +
    "\010\uff65\012\uff65\032\uff65\033\223\034\220\035\211\036" +
    "\224\037\207\040\214\041\210\043\213\044\225\045\212" +
    "\046\217\047\222\050\215\051\216\052\uff65\075\uff65\001" +
    "\002\000\052\006\uff7a\010\uff7a\012\uff7a\032\uff7a\033\223" +
    "\034\220\035\211\036\224\037\207\040\uff7a\041\uff7a\043" +
    "\uff7a\044\225\045\212\046\217\047\222\050\uff7a\051\uff7a" +
    "\052\uff7a\075\uff7a\001\002\000\052\006\uff7d\010\uff7d\012" +
    "\uff7d\032\uff7d\033\223\034\220\035\211\036\224\037\207" +
    "\040\uff7d\041\210\043\213\044\225\045\212\046\217\047" +
    "\222\050\215\051\uff7d\052\uff7d\075\uff7d\001\002\000\052" +
    "\006\uff7b\010\uff7b\012\uff7b\032\uff7b\033\223\034\220\035" +
    "\211\036\224\037\207\040\uff7b\041\uff7b\043\uff7b\044\225" +
    "\045\212\046\217\047\222\050\uff7b\051\uff7b\052\uff7b\075" +
    "\uff7b\001\002\000\052\006\uff77\010\uff77\012\uff77\032\uff77" +
    "\033\223\034\220\035\211\036\224\037\207\040\uff77\041" +
    "\uff77\043\uff77\044\uff77\045\uff77\046\uff77\047\uff77\050\uff77" +
    "\051\uff77\052\uff77\075\uff77\001\002\000\052\006\uff70\010" +
    "\uff70\012\uff70\032\uff70\033\uff70\034\220\035\uff70\036\224" +
    "\037\207\040\uff70\041\uff70\043\uff70\044\uff70\045\uff70\046" +
    "\uff70\047\uff70\050\uff70\051\uff70\052\uff70\075\uff70\001\002" +
    "\000\052\006\uff7c\010\uff7c\012\uff7c\032\uff7c\033\223\034" +
    "\220\035\211\036\224\037\207\040\uff7c\041\uff7c\043\213" +
    "\044\225\045\212\046\217\047\222\050\215\051\uff7c\052" +
    "\uff7c\075\uff7c\001\002\000\052\006\uff71\010\uff71\012\uff71" +
    "\032\uff71\033\uff71\034\uff71\035\uff71\036\uff71\037\uff71\040" +
    "\uff71\041\uff71\043\uff71\044\uff71\045\uff71\046\uff71\047\uff71" +
    "\050\uff71\051\uff71\052\uff71\075\uff71\001\002\000\052\006" +
    "\uff7e\010\uff7e\012\uff7e\032\uff7e\033\uff7e\034\uff7e\035\uff7e" +
    "\036\uff7e\037\uff7e\040\uff7e\041\uff7e\043\uff7e\044\uff7e\045" +
    "\uff7e\046\uff7e\047\uff7e\050\uff7e\051\uff7e\052\uff7e\075\uff7e" +
    "\001\002\000\046\005\170\007\201\013\171\021\164\022" +
    "\177\023\173\024\175\025\176\026\202\027\166\031\205" +
    "\033\204\035\174\042\165\056\167\057\163\073\203\074" +
    "\172\001\002\000\040\033\223\034\220\035\211\036\224" +
    "\037\207\040\214\041\210\043\213\044\225\045\212\046" +
    "\217\047\222\050\215\051\216\075\251\001\002\000\046" +
    "\005\170\007\201\013\171\021\164\022\177\023\173\024" +
    "\175\025\176\026\202\027\166\031\205\033\204\035\174" +
    "\042\165\056\167\057\163\073\203\074\172\001\002\000" +
    "\040\032\253\033\223\034\220\035\211\036\224\037\207" +
    "\040\214\041\210\043\213\044\225\045\212\046\217\047" +
    "\222\050\215\051\216\001\002\000\052\006\uff5e\010\uff5e" +
    "\012\uff5e\032\uff5e\033\uff5e\034\uff5e\035\uff5e\036\uff5e\037" +
    "\uff5e\040\uff5e\041\uff5e\043\uff5e\044\uff5e\045\uff5e\046\uff5e" +
    "\047\uff5e\050\uff5e\051\uff5e\052\uff5e\075\uff5e\001\002\000" +
    "\050\005\170\007\201\013\171\021\164\022\177\023\173" +
    "\024\175\025\176\026\202\027\166\031\205\032\266\033" +
    "\204\035\174\042\165\056\167\057\163\073\203\074\172" +
    "\001\002\000\054\006\uff60\010\uff60\011\263\012\uff60\032" +
    "\uff60\033\uff60\034\uff60\035\uff60\036\uff60\037\uff60\040\uff60" +
    "\041\uff60\043\uff60\044\uff60\045\uff60\046\uff60\047\uff60\050" +
    "\uff60\051\uff60\052\uff60\075\uff60\001\002\000\052\006\uff64" +
    "\010\uff64\012\uff64\032\uff64\033\uff64\034\uff64\035\uff64\036" +
    "\uff64\037\uff64\040\uff64\041\uff64\043\uff64\044\uff64\045\uff64" +
    "\046\uff64\047\uff64\050\uff64\051\uff64\052\uff64\075\uff64\001" +
    "\002\000\046\005\170\007\201\013\171\021\164\022\177" +
    "\023\173\024\175\025\176\026\202\027\166\031\205\033" +
    "\204\035\174\042\165\056\167\057\163\073\203\074\172" +
    "\001\002\000\052\006\uff63\010\uff63\012\uff63\032\uff63\033" +
    "\uff63\034\uff63\035\uff63\036\uff63\037\uff63\040\uff63\041\uff63" +
    "\043\uff63\044\uff63\045\uff63\046\uff63\047\uff63\050\uff63\051" +
    "\uff63\052\uff63\075\uff63\001\002\000\040\012\262\033\223" +
    "\034\220\035\211\036\224\037\207\040\214\041\210\043" +
    "\213\044\225\045\212\046\217\047\222\050\215\051\216" +
    "\001\002\000\054\006\uff56\010\uff56\011\uff56\012\uff56\032" +
    "\uff56\033\uff56\034\uff56\035\uff56\036\uff56\037\uff56\040\uff56" +
    "\041\uff56\043\uff56\044\uff56\045\uff56\046\uff56\047\uff56\050" +
    "\uff56\051\uff56\052\uff56\075\uff56\001\002\000\046\005\170" +
    "\007\201\013\171\021\164\022\177\023\173\024\175\025" +
    "\176\026\202\027\166\031\205\033\204\035\174\042\165" +
    "\056\167\057\163\073\203\074\172\001\002\000\040\012" +
    "\265\033\223\034\220\035\211\036\224\037\207\040\214" +
    "\041\210\043\213\044\225\045\212\046\217\047\222\050" +
    "\215\051\216\001\002\000\054\006\uff57\010\uff57\011\uff57" +
    "\012\uff57\032\uff57\033\uff57\034\uff57\035\uff57\036\uff57\037" +
    "\uff57\040\uff57\041\uff57\043\uff57\044\uff57\045\uff57\046\uff57" +
    "\047\uff57\050\uff57\051\uff57\052\uff57\075\uff57\001\002\000" +
    "\052\006\uff66\010\uff66\012\uff66\032\uff66\033\uff66\034\uff66" +
    "\035\uff66\036\uff66\037\uff66\040\uff66\041\uff66\043\uff66\044" +
    "\uff66\045\uff66\046\uff66\047\uff66\050\uff66\051\uff66\052\uff66" +
    "\075\uff66\001\002\000\042\032\uffb8\033\223\034\220\035" +
    "\211\036\224\037\207\040\214\041\210\043\213\044\225" +
    "\045\212\046\217\047\222\050\215\051\216\075\uffb8\001" +
    "\002\000\006\032\271\075\272\001\002\000\052\006\uff67" +
    "\010\uff67\012\uff67\032\uff67\033\uff67\034\uff67\035\uff67\036" +
    "\uff67\037\uff67\040\uff67\041\uff67\043\uff67\044\uff67\045\uff67" +
    "\046\uff67\047\uff67\050\uff67\051\uff67\052\uff67\075\uff67\001" +
    "\002\000\046\005\170\007\201\013\171\021\164\022\177" +
    "\023\173\024\175\025\176\026\202\027\166\031\205\033" +
    "\204\035\174\042\165\056\167\057\163\073\203\074\172" +
    "\001\002\000\042\032\uffb9\033\223\034\220\035\211\036" +
    "\224\037\207\040\214\041\210\043\213\044\225\045\212" +
    "\046\217\047\222\050\215\051\216\075\uffb9\001\002\000" +
    "\052\006\uff7f\010\uff7f\012\uff7f\032\uff7f\033\uff7f\034\uff7f" +
    "\035\uff7f\036\uff7f\037\uff7f\040\uff7f\041\uff7f\043\uff7f\044" +
    "\uff7f\045\uff7f\046\uff7f\047\uff7f\050\uff7f\051\uff7f\052\uff7f" +
    "\075\uff7f\001\002\000\046\005\170\007\201\013\171\021" +
    "\164\022\177\023\173\024\175\025\176\026\202\027\166" +
    "\031\205\033\204\035\174\042\165\056\167\057\163\073" +
    "\203\074\172\001\002\000\040\032\277\033\223\034\220" +
    "\035\211\036\224\037\207\040\214\041\210\043\213\044" +
    "\225\045\212\046\217\047\222\050\215\051\216\001\002" +
    "\000\052\006\uff5f\010\uff5f\012\uff5f\032\uff5f\033\uff5f\034" +
    "\uff5f\035\uff5f\036\uff5f\037\uff5f\040\uff5f\041\uff5f\043\uff5f" +
    "\044\uff5f\045\uff5f\046\uff5f\047\uff5f\050\uff5f\051\uff5f\052" +
    "\uff5f\075\uff5f\001\002\000\004\011\257\001\002\000\054" +
    "\006\uff58\010\uff58\011\263\012\uff58\032\uff58\033\uff58\034" +
    "\uff58\035\uff58\036\uff58\037\uff58\040\uff58\041\uff58\043\uff58" +
    "\044\uff58\045\uff58\046\uff58\047\uff58\050\uff58\051\uff58\052" +
    "\uff58\075\uff58\001\002\000\052\006\uff5c\010\uff5c\012\uff5c" +
    "\032\uff5c\033\uff5c\034\uff5c\035\uff5c\036\uff5c\037\uff5c\040" +
    "\uff5c\041\uff5c\043\uff5c\044\uff5c\045\uff5c\046\uff5c\047\uff5c" +
    "\050\uff5c\051\uff5c\052\uff5c\075\uff5c\001\002\000\006\006" +
    "\305\075\306\001\002\000\042\006\uff59\033\223\034\220" +
    "\035\211\036\224\037\207\040\214\041\210\043\213\044" +
    "\225\045\212\046\217\047\222\050\215\051\216\075\uff59" +
    "\001\002\000\052\006\uff5d\010\uff5d\012\uff5d\032\uff5d\033" +
    "\uff5d\034\uff5d\035\uff5d\036\uff5d\037\uff5d\040\uff5d\041\uff5d" +
    "\043\uff5d\044\uff5d\045\uff5d\046\uff5d\047\uff5d\050\uff5d\051" +
    "\uff5d\052\uff5d\075\uff5d\001\002\000\046\005\170\007\201" +
    "\013\171\021\164\022\177\023\173\024\175\025\176\026" +
    "\202\027\166\031\205\033\204\035\174\042\165\056\167" +
    "\057\163\073\203\074\172\001\002\000\042\006\uff5a\033" +
    "\223\034\220\035\211\036\224\037\207\040\214\041\210" +
    "\043\213\044\225\045\212\046\217\047\222\050\215\051" +
    "\216\075\uff5a\001\002\000\052\006\uff62\010\uff62\012\uff62" +
    "\032\uff62\033\uff62\034\uff62\035\uff62\036\uff62\037\uff62\040" +
    "\uff62\041\uff62\043\uff62\044\uff62\045\uff62\046\uff62\047\uff62" +
    "\050\uff62\051\uff62\052\uff62\075\uff62\001\002\000\052\006" +
    "\uff79\010\uff79\012\uff79\032\uff79\033\223\034\220\035\211" +
    "\036\224\037\207\040\uff79\041\uff79\043\213\044\225\045" +
    "\212\046\217\047\222\050\215\051\uff79\052\uff79\075\uff79" +
    "\001\002\000\052\006\uff61\010\uff61\012\uff61\032\uff61\033" +
    "\uff61\034\uff61\035\uff61\036\uff61\037\uff61\040\uff61\041\uff61" +
    "\043\uff61\044\uff61\045\uff61\046\uff61\047\uff61\050\uff61\051" +
    "\uff61\052\uff61\075\uff61\001\002\000\004\007\105\001\002" +
    "\000\140\005\uffcf\006\uffcf\007\uffcf\013\uffcf\014\uffcf\015" +
    "\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf" +
    "\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\033" +
    "\uffcf\035\uffcf\042\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf" +
    "\057\uffcf\062\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf\070" +
    "\uffcf\073\uffcf\074\uffcf\076\uffcf\077\uffcf\100\uffcf\101\uffcf" +
    "\102\uffcf\103\uffcf\104\uffcf\105\uffcf\106\uffcf\110\uffcf\113" +
    "\uffcf\114\uffcf\116\uffcf\001\002\000\006\010\uffcd\075\uffcd" +
    "\001\002\000\006\010\330\075\313\001\002\000\006\007" +
    "\324\011\113\001\002\000\014\004\uffc8\010\uffc8\011\uffc8" +
    "\031\071\075\uffc8\001\002\000\006\005\016\010\323\001" +
    "\002\000\106\006\uffdf\007\uffdf\014\uffdf\015\uffdf\016\uffdf" +
    "\017\uffdf\020\uffdf\030\uffdf\053\uffdf\054\uffdf\055\uffdf\056" +
    "\uffdf\057\uffdf\062\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf" +
    "\070\uffdf\073\uffdf\074\uffdf\076\uffdf\077\uffdf\100\uffdf\101" +
    "\uffdf\102\uffdf\103\uffdf\104\uffdf\105\uffdf\106\uffdf\110\uffdf" +
    "\113\uffdf\114\uffdf\116\uffdf\001\002\000\106\006\uffe2\007" +
    "\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\030\uffe2" +
    "\053\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2\062\uffe2\064" +
    "\uffe2\065\uffe2\066\uffe2\067\uffe2\070\uffe2\073\uffe2\074\uffe2" +
    "\076\uffe2\077\uffe2\100\uffe2\101\uffe2\102\uffe2\103\uffe2\104" +
    "\uffe2\105\uffe2\106\uffe2\110\uffe2\113\uffe2\114\uffe2\116\uffe2" +
    "\001\002\000\004\031\071\001\002\000\006\005\016\010" +
    "\327\001\002\000\106\006\uffdd\007\uffdd\014\uffdd\015\uffdd" +
    "\016\uffdd\017\uffdd\020\uffdd\030\uffdd\053\uffdd\054\uffdd\055" +
    "\uffdd\056\uffdd\057\uffdd\062\uffdd\064\uffdd\065\uffdd\066\uffdd" +
    "\067\uffdd\070\uffdd\073\uffdd\074\uffdd\076\uffdd\077\uffdd\100" +
    "\uffdd\101\uffdd\102\uffdd\103\uffdd\104\uffdd\105\uffdd\106\uffdd" +
    "\110\uffdd\113\uffdd\114\uffdd\116\uffdd\001\002\000\106\006" +
    "\uffe3\007\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3" +
    "\030\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3\062" +
    "\uffe3\064\uffe3\065\uffe3\066\uffe3\067\uffe3\070\uffe3\073\uffe3" +
    "\074\uffe3\076\uffe3\077\uffe3\100\uffe3\101\uffe3\102\uffe3\103" +
    "\uffe3\104\uffe3\105\uffe3\106\uffe3\110\uffe3\113\uffe3\114\uffe3" +
    "\116\uffe3\001\002\000\140\005\uffce\006\uffce\007\uffce\013" +
    "\uffce\014\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce" +
    "\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030" +
    "\uffce\031\uffce\033\uffce\035\uffce\042\uffce\053\uffce\054\uffce" +
    "\055\uffce\056\uffce\057\uffce\062\uffce\064\uffce\065\uffce\066" +
    "\uffce\067\uffce\070\uffce\073\uffce\074\uffce\076\uffce\077\uffce" +
    "\100\uffce\101\uffce\102\uffce\103\uffce\104\uffce\105\uffce\106" +
    "\uffce\110\uffce\113\uffce\114\uffce\116\uffce\001\002\000\004" +
    "\007\332\001\002\000\006\005\333\111\334\001\002\000" +
    "\040\007\053\014\047\015\052\016\046\017\042\020\037" +
    "\077\031\100\035\101\044\102\034\103\054\104\050\110" +
    "\056\113\036\116\057\001\002\000\004\007\335\001\002" +
    "\000\004\005\336\001\002\000\040\007\053\014\047\015" +
    "\052\016\046\017\042\020\037\077\031\100\035\101\044" +
    "\102\034\103\054\104\050\110\056\113\036\116\057\001" +
    "\002\000\042\006\340\007\053\014\047\015\052\016\046" +
    "\017\042\020\037\077\031\100\035\101\044\102\034\103" +
    "\054\104\050\110\056\113\036\116\057\001\002\000\042" +
    "\006\uffe8\007\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020" +
    "\uffe8\077\uffe8\100\uffe8\101\uffe8\102\uffe8\103\uffe8\104\uffe8" +
    "\110\uffe8\113\uffe8\116\uffe8\001\002\000\042\006\342\007" +
    "\053\014\047\015\052\016\046\017\042\020\037\077\031" +
    "\100\035\101\044\102\034\103\054\104\050\110\056\113" +
    "\036\116\057\001\002\000\042\006\uffe9\007\uffe9\014\uffe9" +
    "\015\uffe9\016\uffe9\017\uffe9\020\uffe9\077\uffe9\100\uffe9\101" +
    "\uffe9\102\uffe9\103\uffe9\104\uffe9\110\uffe9\113\uffe9\116\uffe9" +
    "\001\002\000\012\002\ufff5\077\ufff5\104\ufff5\110\ufff5\001" +
    "\002\000\004\005\016\001\002\000\110\006\uff9e\007\uff9e" +
    "\014\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e\030\uff9e\053" +
    "\uff9e\054\uff9e\055\uff9e\056\uff9e\057\uff9e\062\uff9e\063\u0165" +
    "\064\uff9e\065\uff9e\066\uff9e\067\uff9e\070\uff9e\073\uff9e\074" +
    "\uff9e\076\uff9e\077\uff9e\100\uff9e\101\uff9e\102\uff9e\103\uff9e" +
    "\104\uff9e\105\uff9e\106\uff9e\110\uff9e\113\uff9e\114\uff9e\116" +
    "\uff9e\001\002\000\004\031\u0162\001\002\000\004\031\u014d" +
    "\001\002\000\106\006\uffc3\007\uffc3\014\uffc3\015\uffc3\016" +
    "\uffc3\017\uffc3\020\uffc3\030\uffc3\053\uffc3\054\uffc3\055\uffc3" +
    "\056\uffc3\057\uffc3\062\uffc3\064\uffc3\065\uffc3\066\uffc3\067" +
    "\uffc3\070\uffc3\073\uffc3\074\uffc3\076\uffc3\077\uffc3\100\uffc3" +
    "\101\uffc3\102\uffc3\103\uffc3\104\uffc3\105\uffc3\106\uffc3\110" +
    "\uffc3\113\uffc3\114\uffc3\116\uffc3\001\002\000\106\006\uffc5" +
    "\007\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\030" +
    "\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\062\uffc5" +
    "\064\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5\073\uffc5\074" +
    "\uffc5\076\uffc5\077\uffc5\100\uffc5\101\uffc5\102\uffc5\103\uffc5" +
    "\104\uffc5\105\uffc5\106\uffc5\110\uffc5\113\uffc5\114\uffc5\116" +
    "\uffc5\001\002\000\106\006\uffbf\007\uffbf\014\uffbf\015\uffbf" +
    "\016\uffbf\017\uffbf\020\uffbf\030\uffbf\053\uffbf\054\uffbf\055" +
    "\uffbf\056\uffbf\057\uffbf\062\uffbf\064\uffbf\065\uffbf\066\uffbf" +
    "\067\uffbf\070\uffbf\073\uffbf\074\uffbf\076\uffbf\077\uffbf\100" +
    "\uffbf\101\uffbf\102\uffbf\103\uffbf\104\uffbf\105\uffbf\106\uffbf" +
    "\110\uffbf\113\uffbf\114\uffbf\116\uffbf\001\002\000\102\006" +
    "\u014b\007\373\014\047\015\052\016\046\017\042\020\037" +
    "\030\346\053\366\054\367\055\377\056\361\057\356\062" +
    "\364\064\344\065\370\066\347\073\354\074\374\076\u0102" +
    "\077\031\100\035\101\044\102\034\103\054\104\050\105" +
    "\u0100\106\375\110\360\113\036\114\u0103\116\057\001\002" +
    "\000\004\031\u0145\001\002\000\106\006\uffbe\007\uffbe\014" +
    "\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\030\uffbe\053\uffbe" +
    "\054\uffbe\055\uffbe\056\uffbe\057\uffbe\062\uffbe\064\uffbe\065" +
    "\uffbe\066\uffbe\067\uffbe\070\uffbe\073\uffbe\074\uffbe\076\uffbe" +
    "\077\uffbe\100\uffbe\101\uffbe\102\uffbe\103\uffbe\104\uffbe\105" +
    "\uffbe\106\uffbe\110\uffbe\113\uffbe\114\uffbe\116\uffbe\001\002" +
    "\000\004\007\u0143\001\002\000\106\006\uffc2\007\uffc2\014" +
    "\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\030\uffc2\053\uffc2" +
    "\054\uffc2\055\uffc2\056\uffc2\057\uffc2\062\uffc2\064\uffc2\065" +
    "\uffc2\066\uffc2\067\uffc2\070\uffc2\073\uffc2\074\uffc2\076\uffc2" +
    "\077\uffc2\100\uffc2\101\uffc2\102\uffc2\103\uffc2\104\uffc2\105" +
    "\uffc2\106\uffc2\110\uffc2\113\uffc2\114\uffc2\116\uffc2\001\002" +
    "\000\004\007\u013a\001\002\000\004\007\u0138\001\002\000" +
    "\106\006\uffab\007\uffab\014\uffab\015\uffab\016\uffab\017\uffab" +
    "\020\uffab\030\uffab\053\uffab\054\uffab\055\uffab\056\uffab\057" +
    "\uffab\062\uffab\064\uffab\065\uffab\066\uffab\067\uffab\070\uffab" +
    "\073\uffab\074\uffab\076\uffab\077\uffab\100\uffab\101\uffab\102" +
    "\uffab\103\uffab\104\uffab\105\uffab\106\uffab\110\uffab\113\uffab" +
    "\114\uffab\116\uffab\001\002\000\106\006\uffac\007\uffac\014" +
    "\uffac\015\uffac\016\uffac\017\uffac\020\uffac\030\uffac\053\uffac" +
    "\054\uffac\055\uffac\056\uffac\057\uffac\062\uffac\064\uffac\065" +
    "\uffac\066\uffac\067\uffac\070\uffac\073\uffac\074\uffac\076\uffac" +
    "\077\uffac\100\uffac\101\uffac\102\uffac\103\uffac\104\uffac\105" +
    "\uffac\106\uffac\110\uffac\113\uffac\114\uffac\116\uffac\001\002" +
    "\000\004\031\u0134\001\002\000\106\006\uffc0\007\uffc0\014" +
    "\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\030\uffc0\053\uffc0" +
    "\054\uffc0\055\uffc0\056\uffc0\057\uffc0\062\uffc0\064\uffc0\065" +
    "\uffc0\066\uffc0\067\uffc0\070\uffc0\073\uffc0\074\uffc0\076\uffc0" +
    "\077\uffc0\100\uffc0\101\uffc0\102\uffc0\103\uffc0\104\uffc0\105" +
    "\uffc0\106\uffc0\110\uffc0\113\uffc0\114\uffc0\116\uffc0\001\002" +
    "\000\004\031\u0130\001\002\000\004\010\u012f\001\002\000" +
    "\004\031\u0124\001\002\000\106\006\uffc4\007\uffc4\014\uffc4" +
    "\015\uffc4\016\uffc4\017\uffc4\020\uffc4\030\uffc4\053\uffc4\054" +
    "\uffc4\055\uffc4\056\uffc4\057\uffc4\062\uffc4\064\uffc4\065\uffc4" +
    "\066\uffc4\067\uffc4\070\uffc4\073\uffc4\074\uffc4\076\uffc4\077" +
    "\uffc4\100\uffc4\101\uffc4\102\uffc4\103\uffc4\104\uffc4\105\uffc4" +
    "\106\uffc4\110\uffc4\113\uffc4\114\uffc4\116\uffc4\001\002\000" +
    "\106\006\uffc1\007\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1" +
    "\020\uffc1\030\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1\057" +
    "\uffc1\062\uffc1\064\uffc1\065\uffc1\066\uffc1\067\uffc1\070\uffc1" +
    "\073\uffc1\074\uffc1\076\uffc1\077\uffc1\100\uffc1\101\uffc1\102" +
    "\uffc1\103\uffc1\104\uffc1\105\uffc1\106\uffc1\110\uffc1\113\uffc1" +
    "\114\uffc1\116\uffc1\001\002\000\014\007\uff81\011\uff81\031" +
    "\u011a\056\u011b\057\u011c\001\002\000\004\031\u0116\001\002" +
    "\000\004\031\u0112\001\002\000\106\006\uffbc\007\uffbc\014" +
    "\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\030\uffbc\053\uffbc" +
    "\054\uffbc\055\uffbc\056\uffbc\057\uffbc\062\uffbc\064\uffbc\065" +
    "\uffbc\066\uffbc\067\uffbc\070\uffbc\073\uffbc\074\uffbc\076\uffbc" +
    "\077\uffbc\100\uffbc\101\uffbc\102\uffbc\103\uffbc\104\uffbc\105" +
    "\uffbc\106\uffbc\110\uffbc\113\uffbc\114\uffbc\116\uffbc\001\002" +
    "\000\004\010\u0111\001\002\000\004\031\u010d\001\002\000" +
    "\106\006\uffbd\007\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd" +
    "\020\uffbd\030\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057" +
    "\uffbd\062\uffbd\064\uffbd\065\uffbd\066\uffbd\067\uffbd\070\uffbd" +
    "\073\uffbd\074\uffbd\076\uffbd\077\uffbd\100\uffbd\101\uffbd\102" +
    "\uffbd\103\uffbd\104\uffbd\105\uffbd\106\uffbd\110\uffbd\113\uffbd" +
    "\114\uffbd\116\uffbd\001\002\000\004\031\u0107\001\002\000" +
    "\050\005\170\007\201\010\u0105\013\171\021\164\022\177" +
    "\023\173\024\175\025\176\026\202\027\166\031\205\033" +
    "\204\035\174\042\165\056\167\057\163\073\203\074\172" +
    "\001\002\000\040\010\u0106\033\223\034\220\035\211\036" +
    "\224\037\207\040\214\041\210\043\213\044\225\045\212" +
    "\046\217\047\222\050\215\051\216\001\002\000\106\006" +
    "\uffb6\007\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6" +
    "\030\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\062" +
    "\uffb6\064\uffb6\065\uffb6\066\uffb6\067\uffb6\070\uffb6\073\uffb6" +
    "\074\uffb6\076\uffb6\077\uffb6\100\uffb6\101\uffb6\102\uffb6\103" +
    "\uffb6\104\uffb6\105\uffb6\106\uffb6\110\uffb6\113\uffb6\114\uffb6" +
    "\116\uffb6\001\002\000\106\006\uffb7\007\uffb7\014\uffb7\015" +
    "\uffb7\016\uffb7\017\uffb7\020\uffb7\030\uffb7\053\uffb7\054\uffb7" +
    "\055\uffb7\056\uffb7\057\uffb7\062\uffb7\064\uffb7\065\uffb7\066" +
    "\uffb7\067\uffb7\070\uffb7\073\uffb7\074\uffb7\076\uffb7\077\uffb7" +
    "\100\uffb7\101\uffb7\102\uffb7\103\uffb7\104\uffb7\105\uffb7\106" +
    "\uffb7\110\uffb7\113\uffb7\114\uffb7\116\uffb7\001\002\000\046" +
    "\005\170\007\201\013\171\021\164\022\177\023\173\024" +
    "\175\025\176\026\202\027\166\031\205\033\204\035\174" +
    "\042\165\056\167\057\163\073\203\074\172\001\002\000" +
    "\040\033\223\034\220\035\211\036\224\037\207\040\214" +
    "\041\210\043\213\044\225\045\212\046\217\047\222\050" +
    "\215\051\216\075\u0109\001\002\000\046\005\170\007\201" +
    "\013\171\021\164\022\177\023\173\024\175\025\176\026" +
    "\202\027\166\031\205\033\204\035\174\042\165\056\167" +
    "\057\163\073\203\074\172\001\002\000\040\032\u010b\033" +
    "\223\034\220\035\211\036\224\037\207\040\214\041\210" +
    "\043\213\044\225\045\212\046\217\047\222\050\215\051" +
    "\216\001\002\000\004\010\u010c\001\002\000\106\006\uffad" +
    "\007\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020\uffad\030" +
    "\uffad\053\uffad\054\uffad\055\uffad\056\uffad\057\uffad\062\uffad" +
    "\064\uffad\065\uffad\066\uffad\067\uffad\070\uffad\073\uffad\074" +
    "\uffad\076\uffad\077\uffad\100\uffad\101\uffad\102\uffad\103\uffad" +
    "\104\uffad\105\uffad\106\uffad\110\uffad\113\uffad\114\uffad\116" +
    "\uffad\001\002\000\046\005\170\007\201\013\171\021\164" +
    "\022\177\023\173\024\175\025\176\026\202\027\166\031" +
    "\205\033\204\035\174\042\165\056\167\057\163\073\203" +
    "\074\172\001\002\000\040\032\u010f\033\223\034\220\035" +
    "\211\036\224\037\207\040\214\041\210\043\213\044\225" +
    "\045\212\046\217\047\222\050\215\051\216\001\002\000" +
    "\004\010\u0110\001\002\000\106\006\uff89\007\uff89\014\uff89" +
    "\015\uff89\016\uff89\017\uff89\020\uff89\030\uff89\053\uff89\054" +
    "\uff89\055\uff89\056\uff89\057\uff89\062\uff89\064\uff89\065\uff89" +
    "\066\uff89\067\uff89\070\uff89\073\uff89\074\uff89\076\uff89\077" +
    "\uff89\100\uff89\101\uff89\102\uff89\103\uff89\104\uff89\105\uff89" +
    "\106\uff89\110\uff89\113\uff89\114\uff89\116\uff89\001\002\000" +
    "\106\006\uff99\007\uff99\014\uff99\015\uff99\016\uff99\017\uff99" +
    "\020\uff99\030\uff99\053\uff99\054\uff99\055\uff99\056\uff99\057" +
    "\uff99\062\uff99\064\uff99\065\uff99\066\uff99\067\uff99\070\uff99" +
    "\073\uff99\074\uff99\076\uff99\077\uff99\100\uff99\101\uff99\102" +
    "\uff99\103\uff99\104\uff99\105\uff99\106\uff99\110\uff99\113\uff99" +
    "\114\uff99\116\uff99\001\002\000\046\005\170\007\201\013" +
    "\171\021\164\022\177\023\173\024\175\025\176\026\202" +
    "\027\166\031\205\033\204\035\174\042\165\056\167\057" +
    "\163\073\203\074\172\001\002\000\040\032\u0114\033\223" +
    "\034\220\035\211\036\224\037\207\040\214\041\210\043" +
    "\213\044\225\045\212\046\217\047\222\050\215\051\216" +
    "\001\002\000\004\010\u0115\001\002\000\106\006\uff88\007" +
    "\uff88\014\uff88\015\uff88\016\uff88\017\uff88\020\uff88\030\uff88" +
    "\053\uff88\054\uff88\055\uff88\056\uff88\057\uff88\062\uff88\064" +
    "\uff88\065\uff88\066\uff88\067\uff88\070\uff88\073\uff88\074\uff88" +
    "\076\uff88\077\uff88\100\uff88\101\uff88\102\uff88\103\uff88\104" +
    "\uff88\105\uff88\106\uff88\110\uff88\113\uff88\114\uff88\116\uff88" +
    "\001\002\000\046\005\170\007\201\013\171\021\164\022" +
    "\177\023\173\024\175\025\176\026\202\027\166\031\205" +
    "\033\204\035\174\042\165\056\167\057\163\073\203\074" +
    "\172\001\002\000\040\032\u0118\033\223\034\220\035\211" +
    "\036\224\037\207\040\214\041\210\043\213\044\225\045" +
    "\212\046\217\047\222\050\215\051\216\001\002\000\004" +
    "\010\u0119\001\002\000\106\006\uffaf\007\uffaf\014\uffaf\015" +
    "\uffaf\016\uffaf\017\uffaf\020\uffaf\030\uffaf\053\uffaf\054\uffaf" +
    "\055\uffaf\056\uffaf\057\uffaf\062\uffaf\064\uffaf\065\uffaf\066" +
    "\uffaf\067\uffaf\070\uffaf\073\uffaf\074\uffaf\076\uffaf\077\uffaf" +
    "\100\uffaf\101\uffaf\102\uffaf\103\uffaf\104\uffaf\105\uffaf\106" +
    "\uffaf\110\uffaf\113\uffaf\114\uffaf\116\uffaf\001\002\000\050" +
    "\005\170\007\201\013\171\021\164\022\177\023\173\024" +
    "\175\025\176\026\202\027\166\031\205\032\u011f\033\204" +
    "\035\174\042\165\056\167\057\163\073\203\074\172\001" +
    "\002\000\004\010\u011e\001\002\000\004\010\u011d\001\002" +
    "\000\106\006\uff8c\007\uff8c\014\uff8c\015\uff8c\016\uff8c\017" +
    "\uff8c\020\uff8c\030\uff8c\053\uff8c\054\uff8c\055\uff8c\056\uff8c" +
    "\057\uff8c\062\uff8c\064\uff8c\065\uff8c\066\uff8c\067\uff8c\070" +
    "\uff8c\073\uff8c\074\uff8c\076\uff8c\077\uff8c\100\uff8c\101\uff8c" +
    "\102\uff8c\103\uff8c\104\uff8c\105\uff8c\106\uff8c\110\uff8c\113" +
    "\uff8c\114\uff8c\116\uff8c\001\002\000\106\006\uff8d\007\uff8d" +
    "\014\uff8d\015\uff8d\016\uff8d\017\uff8d\020\uff8d\030\uff8d\053" +
    "\uff8d\054\uff8d\055\uff8d\056\uff8d\057\uff8d\062\uff8d\064\uff8d" +
    "\065\uff8d\066\uff8d\067\uff8d\070\uff8d\073\uff8d\074\uff8d\076" +
    "\uff8d\077\uff8d\100\uff8d\101\uff8d\102\uff8d\103\uff8d\104\uff8d" +
    "\105\uff8d\106\uff8d\110\uff8d\113\uff8d\114\uff8d\116\uff8d\001" +
    "\002\000\004\010\u0123\001\002\000\006\032\u0121\075\272" +
    "\001\002\000\004\010\u0122\001\002\000\106\006\uffbb\007" +
    "\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\030\uffbb" +
    "\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\062\uffbb\064" +
    "\uffbb\065\uffbb\066\uffbb\067\uffbb\070\uffbb\073\uffbb\074\uffbb" +
    "\076\uffbb\077\uffbb\100\uffbb\101\uffbb\102\uffbb\103\uffbb\104" +
    "\uffbb\105\uffbb\106\uffbb\110\uffbb\113\uffbb\114\uffbb\116\uffbb" +
    "\001\002\000\106\006\uffba\007\uffba\014\uffba\015\uffba\016" +
    "\uffba\017\uffba\020\uffba\030\uffba\053\uffba\054\uffba\055\uffba" +
    "\056\uffba\057\uffba\062\uffba\064\uffba\065\uffba\066\uffba\067" +
    "\uffba\070\uffba\073\uffba\074\uffba\076\uffba\077\uffba\100\uffba" +
    "\101\uffba\102\uffba\103\uffba\104\uffba\105\uffba\106\uffba\110" +
    "\uffba\113\uffba\114\uffba\116\uffba\001\002\000\034\007\053" +
    "\014\047\015\052\016\046\017\042\020\037\077\031\100" +
    "\035\101\044\102\034\103\054\104\050\113\036\001\002" +
    "\000\004\007\105\001\002\000\034\007\053\014\047\015" +
    "\052\016\046\017\042\020\037\077\031\100\035\101\044" +
    "\102\034\103\054\104\050\113\036\001\002\000\046\005" +
    "\uff96\007\uff96\013\uff96\021\uff96\022\uff96\023\uff96\024\uff96" +
    "\025\uff96\026\uff96\027\uff96\031\uff96\033\uff96\035\uff96\042" +
    "\uff96\056\uff96\057\uff96\073\uff96\074\uff96\001\002\000\046" +
    "\005\170\007\201\013\171\021\164\022\177\023\173\024" +
    "\175\025\176\026\202\027\166\031\205\033\204\035\174" +
    "\042\165\056\167\057\163\073\203\074\172\001\002\000" +
    "\040\010\u012a\033\223\034\220\035\211\036\224\037\207" +
    "\040\214\041\210\043\213\044\225\045\212\046\217\047" +
    "\222\050\215\051\216\001\002\000\046\005\170\007\201" +
    "\013\171\021\164\022\177\023\173\024\175\025\176\026" +
    "\202\027\166\031\205\033\204\035\174\042\165\056\167" +
    "\057\163\073\203\074\172\001\002\000\040\032\u012c\033" +
    "\223\034\220\035\211\036\224\037\207\040\214\041\210" +
    "\043\213\044\225\045\212\046\217\047\222\050\215\051" +
    "\216\001\002\000\004\005\016\001\002\000\106\006\uff97" +
    "\007\uff97\014\uff97\015\uff97\016\uff97\017\uff97\020\uff97\030" +
    "\uff97\053\uff97\054\uff97\055\uff97\056\uff97\057\uff97\062\uff97" +
    "\064\uff97\065\uff97\066\uff97\067\uff97\070\uff97\073\uff97\074" +
    "\uff97\076\uff97\077\uff97\100\uff97\101\uff97\102\uff97\103\uff97" +
    "\104\uff97\105\uff97\106\uff97\110\uff97\113\uff97\114\uff97\116" +
    "\uff97\001\002\000\004\007\105\001\002\000\106\006\uff9a" +
    "\007\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a\030" +
    "\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a\057\uff9a\062\uff9a" +
    "\064\uff9a\065\uff9a\066\uff9a\067\uff9a\070\uff9a\073\uff9a\074" +
    "\uff9a\076\uff9a\077\uff9a\100\uff9a\101\uff9a\102\uff9a\103\uff9a" +
    "\104\uff9a\105\uff9a\106\uff9a\110\uff9a\113\uff9a\114\uff9a\116" +
    "\uff9a\001\002\000\046\005\170\007\201\013\171\021\164" +
    "\022\177\023\173\024\175\025\176\026\202\027\166\031" +
    "\205\033\204\035\174\042\165\056\167\057\163\073\203" +
    "\074\172\001\002\000\040\032\u0132\033\223\034\220\035" +
    "\211\036\224\037\207\040\214\041\210\043\213\044\225" +
    "\045\212\046\217\047\222\050\215\051\216\001\002\000" +
    "\004\005\016\001\002\000\106\006\uff9b\007\uff9b\014\uff9b" +
    "\015\uff9b\016\uff9b\017\uff9b\020\uff9b\030\uff9b\053\uff9b\054" +
    "\uff9b\055\uff9b\056\uff9b\057\uff9b\062\uff9b\064\uff9b\065\uff9b" +
    "\066\uff9b\067\uff9b\070\uff9b\073\uff9b\074\uff9b\076\uff9b\077" +
    "\uff9b\100\uff9b\101\uff9b\102\uff9b\103\uff9b\104\uff9b\105\uff9b" +
    "\106\uff9b\110\uff9b\113\uff9b\114\uff9b\116\uff9b\001\002\000" +
    "\046\005\170\007\201\013\171\021\164\022\177\023\173" +
    "\024\175\025\176\026\202\027\166\031\205\033\204\035" +
    "\174\042\165\056\167\057\163\073\203\074\172\001\002" +
    "\000\040\032\u0136\033\223\034\220\035\211\036\224\037" +
    "\207\040\214\041\210\043\213\044\225\045\212\046\217" +
    "\047\222\050\215\051\216\001\002\000\004\005\016\001" +
    "\002\000\110\006\uff9d\007\uff9d\014\uff9d\015\uff9d\016\uff9d" +
    "\017\uff9d\020\uff9d\030\uff9d\053\uff9d\054\uff9d\055\uff9d\056" +
    "\uff9d\057\uff9d\062\uff9d\063\uff9d\064\uff9d\065\uff9d\066\uff9d" +
    "\067\uff9d\070\uff9d\073\uff9d\074\uff9d\076\uff9d\077\uff9d\100" +
    "\uff9d\101\uff9d\102\uff9d\103\uff9d\104\uff9d\105\uff9d\106\uff9d" +
    "\110\uff9d\113\uff9d\114\uff9d\116\uff9d\001\002\000\004\010" +
    "\u0139\001\002\000\106\006\uff8b\007\uff8b\014\uff8b\015\uff8b" +
    "\016\uff8b\017\uff8b\020\uff8b\030\uff8b\053\uff8b\054\uff8b\055" +
    "\uff8b\056\uff8b\057\uff8b\062\uff8b\064\uff8b\065\uff8b\066\uff8b" +
    "\067\uff8b\070\uff8b\073\uff8b\074\uff8b\076\uff8b\077\uff8b\100" +
    "\uff8b\101\uff8b\102\uff8b\103\uff8b\104\uff8b\105\uff8b\106\uff8b" +
    "\110\uff8b\113\uff8b\114\uff8b\116\uff8b\001\002\000\006\005" +
    "\u013b\111\u013c\001\002\000\040\007\053\014\047\015\052" +
    "\016\046\017\042\020\037\077\031\100\035\101\044\102" +
    "\034\103\054\104\050\110\056\113\036\116\057\001\002" +
    "\000\004\007\u013d\001\002\000\004\005\u013e\001\002\000" +
    "\040\007\053\014\047\015\052\016\046\017\042\020\037" +
    "\077\031\100\035\101\044\102\034\103\054\104\050\110" +
    "\056\113\036\116\057\001\002\000\042\006\u0140\007\053" +
    "\014\047\015\052\016\046\017\042\020\037\077\031\100" +
    "\035\101\044\102\034\103\054\104\050\110\056\113\036" +
    "\116\057\001\002\000\106\006\uffb0\007\uffb0\014\uffb0\015" +
    "\uffb0\016\uffb0\017\uffb0\020\uffb0\030\uffb0\053\uffb0\054\uffb0" +
    "\055\uffb0\056\uffb0\057\uffb0\062\uffb0\064\uffb0\065\uffb0\066" +
    "\uffb0\067\uffb0\070\uffb0\073\uffb0\074\uffb0\076\uffb0\077\uffb0" +
    "\100\uffb0\101\uffb0\102\uffb0\103\uffb0\104\uffb0\105\uffb0\106" +
    "\uffb0\110\uffb0\113\uffb0\114\uffb0\116\uffb0\001\002\000\042" +
    "\006\u0142\007\053\014\047\015\052\016\046\017\042\020" +
    "\037\077\031\100\035\101\044\102\034\103\054\104\050" +
    "\110\056\113\036\116\057\001\002\000\106\006\uffb1\007" +
    "\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\030\uffb1" +
    "\053\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1\062\uffb1\064" +
    "\uffb1\065\uffb1\066\uffb1\067\uffb1\070\uffb1\073\uffb1\074\uffb1" +
    "\076\uffb1\077\uffb1\100\uffb1\101\uffb1\102\uffb1\103\uffb1\104" +
    "\uffb1\105\uffb1\106\uffb1\110\uffb1\113\uffb1\114\uffb1\116\uffb1" +
    "\001\002\000\004\010\u0144\001\002\000\106\006\uff8a\007" +
    "\uff8a\014\uff8a\015\uff8a\016\uff8a\017\uff8a\020\uff8a\030\uff8a" +
    "\053\uff8a\054\uff8a\055\uff8a\056\uff8a\057\uff8a\062\uff8a\064" +
    "\uff8a\065\uff8a\066\uff8a\067\uff8a\070\uff8a\073\uff8a\074\uff8a" +
    "\076\uff8a\077\uff8a\100\uff8a\101\uff8a\102\uff8a\103\uff8a\104" +
    "\uff8a\105\uff8a\106\uff8a\110\uff8a\113\uff8a\114\uff8a\116\uff8a" +
    "\001\002\000\046\005\170\007\201\013\171\021\164\022" +
    "\177\023\173\024\175\025\176\026\202\027\166\031\205" +
    "\033\204\035\174\042\165\056\167\057\163\073\203\074" +
    "\172\001\002\000\040\033\223\034\220\035\211\036\224" +
    "\037\207\040\214\041\210\043\213\044\225\045\212\046" +
    "\217\047\222\050\215\051\216\075\u0147\001\002\000\046" +
    "\005\170\007\201\013\171\021\164\022\177\023\173\024" +
    "\175\025\176\026\202\027\166\031\205\033\204\035\174" +
    "\042\165\056\167\057\163\073\203\074\172\001\002\000" +
    "\040\032\u0149\033\223\034\220\035\211\036\224\037\207" +
    "\040\214\041\210\043\213\044\225\045\212\046\217\047" +
    "\222\050\215\051\216\001\002\000\004\010\u014a\001\002" +
    "\000\106\006\uffae\007\uffae\014\uffae\015\uffae\016\uffae\017" +
    "\uffae\020\uffae\030\uffae\053\uffae\054\uffae\055\uffae\056\uffae" +
    "\057\uffae\062\uffae\064\uffae\065\uffae\066\uffae\067\uffae\070" +
    "\uffae\073\uffae\074\uffae\076\uffae\077\uffae\100\uffae\101\uffae" +
    "\102\uffae\103\uffae\104\uffae\105\uffae\106\uffae\110\uffae\113" +
    "\uffae\114\uffae\116\uffae\001\002\000\112\002\uffc7\006\uffc7" +
    "\007\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\030" +
    "\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\062\uffc7" +
    "\063\uffc7\064\uffc7\065\uffc7\066\uffc7\067\uffc7\070\uffc7\073" +
    "\uffc7\074\uffc7\076\uffc7\077\uffc7\100\uffc7\101\uffc7\102\uffc7" +
    "\103\uffc7\104\uffc7\105\uffc7\106\uffc7\110\uffc7\113\uffc7\114" +
    "\uffc7\116\uffc7\001\002\000\106\006\uffc6\007\uffc6\014\uffc6" +
    "\015\uffc6\016\uffc6\017\uffc6\020\uffc6\030\uffc6\053\uffc6\054" +
    "\uffc6\055\uffc6\056\uffc6\057\uffc6\062\uffc6\064\uffc6\065\uffc6" +
    "\066\uffc6\067\uffc6\070\uffc6\073\uffc6\074\uffc6\076\uffc6\077" +
    "\uffc6\100\uffc6\101\uffc6\102\uffc6\103\uffc6\104\uffc6\105\uffc6" +
    "\106\uffc6\110\uffc6\113\uffc6\114\uffc6\116\uffc6\001\002\000" +
    "\046\005\170\007\201\013\171\021\164\022\177\023\173" +
    "\024\175\025\176\026\202\027\166\031\205\033\204\035" +
    "\174\042\165\056\167\057\163\073\203\074\172\001\002" +
    "\000\040\032\u014f\033\223\034\220\035\211\036\224\037" +
    "\207\040\214\041\210\043\213\044\225\045\212\046\217" +
    "\047\222\050\215\051\216\001\002\000\004\005\u0150\001" +
    "\002\000\010\006\u0154\067\u0157\070\u0156\001\002\000\010" +
    "\006\u0160\067\u0157\070\u0156\001\002\000\106\006\u015c\007" +
    "\373\014\047\015\052\016\046\017\042\020\037\030\346" +
    "\053\366\054\367\055\377\056\361\057\356\062\364\064" +
    "\344\065\370\066\347\067\u0157\070\u0156\073\354\074\374" +
    "\076\u0102\077\031\100\035\101\044\102\034\103\054\104" +
    "\050\105\u0100\106\375\110\360\113\036\114\u0103\116\057" +
    "\001\002\000\010\006\uffa6\067\uffa6\070\uffa6\001\002\000" +
    "\106\006\uffa7\007\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7" +
    "\020\uffa7\030\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7\057" +
    "\uffa7\062\uffa7\064\uffa7\065\uffa7\066\uffa7\067\uffa7\070\uffa7" +
    "\073\uffa7\074\uffa7\076\uffa7\077\uffa7\100\uffa7\101\uffa7\102" +
    "\uffa7\103\uffa7\104\uffa7\105\uffa7\106\uffa7\110\uffa7\113\uffa7" +
    "\114\uffa7\116\uffa7\001\002\000\106\006\uffa3\007\uffa3\014" +
    "\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\030\uffa3\053\uffa3" +
    "\054\uffa3\055\uffa3\056\uffa3\057\uffa3\062\uffa3\064\uffa3\065" +
    "\uffa3\066\uffa3\067\uffa3\070\uffa3\073\uffa3\074\uffa3\076\uffa3" +
    "\077\uffa3\100\uffa3\101\uffa3\102\uffa3\103\uffa3\104\uffa3\105" +
    "\uffa3\106\uffa3\110\uffa3\113\uffa3\114\uffa3\116\uffa3\001\002" +
    "\000\004\052\u015a\001\002\000\046\005\170\007\201\013" +
    "\171\021\164\022\177\023\173\024\175\025\176\026\202" +
    "\027\166\031\205\033\204\035\174\042\165\056\167\057" +
    "\163\073\203\074\172\001\002\000\040\033\223\034\220" +
    "\035\211\036\224\037\207\040\214\041\210\043\213\044" +
    "\225\045\212\046\217\047\222\050\215\051\216\052\u0159" +
    "\001\002\000\106\006\uffa1\007\uffa1\014\uffa1\015\uffa1\016" +
    "\uffa1\017\uffa1\020\uffa1\030\uffa1\053\uffa1\054\uffa1\055\uffa1" +
    "\056\uffa1\057\uffa1\062\uffa1\064\uffa1\065\uffa1\066\uffa1\067" +
    "\uffa1\070\uffa1\073\uffa1\074\uffa1\076\uffa1\077\uffa1\100\uffa1" +
    "\101\uffa1\102\uffa1\103\uffa1\104\uffa1\105\uffa1\106\uffa1\110" +
    "\uffa1\113\uffa1\114\uffa1\116\uffa1\001\002\000\106\006\uffa0" +
    "\007\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\030" +
    "\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0\062\uffa0" +
    "\064\uffa0\065\uffa0\066\uffa0\067\uffa0\070\uffa0\073\uffa0\074" +
    "\uffa0\076\uffa0\077\uffa0\100\uffa0\101\uffa0\102\uffa0\103\uffa0" +
    "\104\uffa0\105\uffa0\106\uffa0\110\uffa0\113\uffa0\114\uffa0\116" +
    "\uffa0\001\002\000\106\006\uffa2\007\uffa2\014\uffa2\015\uffa2" +
    "\016\uffa2\017\uffa2\020\uffa2\030\uffa2\053\uffa2\054\uffa2\055" +
    "\uffa2\056\uffa2\057\uffa2\062\uffa2\064\uffa2\065\uffa2\066\uffa2" +
    "\067\uffa2\070\uffa2\073\uffa2\074\uffa2\076\uffa2\077\uffa2\100" +
    "\uffa2\101\uffa2\102\uffa2\103\uffa2\104\uffa2\105\uffa2\106\uffa2" +
    "\110\uffa2\113\uffa2\114\uffa2\116\uffa2\001\002\000\106\006" +
    "\uffa8\007\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8" +
    "\030\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8\057\uffa8\062" +
    "\uffa8\064\uffa8\065\uffa8\066\uffa8\067\uffa8\070\uffa8\073\uffa8" +
    "\074\uffa8\076\uffa8\077\uffa8\100\uffa8\101\uffa8\102\uffa8\103" +
    "\uffa8\104\uffa8\105\uffa8\106\uffa8\110\uffa8\113\uffa8\114\uffa8" +
    "\116\uffa8\001\002\000\106\006\uffa4\007\373\014\047\015" +
    "\052\016\046\017\042\020\037\030\346\053\366\054\367" +
    "\055\377\056\361\057\356\062\364\064\344\065\370\066" +
    "\347\067\uffa4\070\uffa4\073\354\074\374\076\u0102\077\031" +
    "\100\035\101\044\102\034\103\054\104\050\105\u0100\106" +
    "\375\110\360\113\036\114\u0103\116\057\001\002\000\010" +
    "\006\uffa5\067\uffa5\070\uffa5\001\002\000\106\006\u0161\007" +
    "\373\014\047\015\052\016\046\017\042\020\037\030\346" +
    "\053\366\054\367\055\377\056\361\057\356\062\364\064" +
    "\344\065\370\066\347\067\u0157\070\u0156\073\354\074\374" +
    "\076\u0102\077\031\100\035\101\044\102\034\103\054\104" +
    "\050\105\u0100\106\375\110\360\113\036\114\u0103\116\057" +
    "\001\002\000\106\006\uffa9\007\uffa9\014\uffa9\015\uffa9\016" +
    "\uffa9\017\uffa9\020\uffa9\030\uffa9\053\uffa9\054\uffa9\055\uffa9" +
    "\056\uffa9\057\uffa9\062\uffa9\064\uffa9\065\uffa9\066\uffa9\067" +
    "\uffa9\070\uffa9\073\uffa9\074\uffa9\076\uffa9\077\uffa9\100\uffa9" +
    "\101\uffa9\102\uffa9\103\uffa9\104\uffa9\105\uffa9\106\uffa9\110" +
    "\uffa9\113\uffa9\114\uffa9\116\uffa9\001\002\000\106\006\uffaa" +
    "\007\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\030" +
    "\uffaa\053\uffaa\054\uffaa\055\uffaa\056\uffaa\057\uffaa\062\uffaa" +
    "\064\uffaa\065\uffaa\066\uffaa\067\uffaa\070\uffaa\073\uffaa\074" +
    "\uffaa\076\uffaa\077\uffaa\100\uffaa\101\uffaa\102\uffaa\103\uffaa" +
    "\104\uffaa\105\uffaa\106\uffaa\110\uffaa\113\uffaa\114\uffaa\116" +
    "\uffaa\001\002\000\004\032\u0163\001\002\000\004\010\u0164" +
    "\001\002\000\106\006\uff87\007\uff87\014\uff87\015\uff87\016" +
    "\uff87\017\uff87\020\uff87\030\uff87\053\uff87\054\uff87\055\uff87" +
    "\056\uff87\057\uff87\062\uff87\064\uff87\065\uff87\066\uff87\067" +
    "\uff87\070\uff87\073\uff87\074\uff87\076\uff87\077\uff87\100\uff87" +
    "\101\uff87\102\uff87\103\uff87\104\uff87\105\uff87\106\uff87\110" +
    "\uff87\113\uff87\114\uff87\116\uff87\001\002\000\006\005\016" +
    "\062\u0166\001\002\000\004\031\u0168\001\002\000\106\006" +
    "\uff9f\007\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f" +
    "\030\uff9f\053\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f\062" +
    "\uff9f\064\uff9f\065\uff9f\066\uff9f\067\uff9f\070\uff9f\073\uff9f" +
    "\074\uff9f\076\uff9f\077\uff9f\100\uff9f\101\uff9f\102\uff9f\103" +
    "\uff9f\104\uff9f\105\uff9f\106\uff9f\110\uff9f\113\uff9f\114\uff9f" +
    "\116\uff9f\001\002\000\046\005\170\007\201\013\171\021" +
    "\164\022\177\023\173\024\175\025\176\026\202\027\166" +
    "\031\205\033\204\035\174\042\165\056\167\057\163\073" +
    "\203\074\172\001\002\000\040\032\u016a\033\223\034\220" +
    "\035\211\036\224\037\207\040\214\041\210\043\213\044" +
    "\225\045\212\046\217\047\222\050\215\051\216\001\002" +
    "\000\004\005\016\001\002\000\110\006\uff9c\007\uff9c\014" +
    "\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\030\uff9c\053\uff9c" +
    "\054\uff9c\055\uff9c\056\uff9c\057\uff9c\062\uff9c\063\uff9c\064" +
    "\uff9c\065\uff9c\066\uff9c\067\uff9c\070\uff9c\073\uff9c\074\uff9c" +
    "\076\uff9c\077\uff9c\100\uff9c\101\uff9c\102\uff9c\103\uff9c\104" +
    "\uff9c\105\uff9c\106\uff9c\110\uff9c\113\uff9c\114\uff9c\116\uff9c" +
    "\001\002\000\004\053\u016d\001\002\000\004\031\u016e\001" +
    "\002\000\046\005\170\007\201\013\171\021\164\022\177" +
    "\023\173\024\175\025\176\026\202\027\166\031\205\033" +
    "\204\035\174\042\165\056\167\057\163\073\203\074\172" +
    "\001\002\000\040\032\u0170\033\223\034\220\035\211\036" +
    "\224\037\207\040\214\041\210\043\213\044\225\045\212" +
    "\046\217\047\222\050\215\051\216\001\002\000\004\010" +
    "\u0171\001\002\000\106\006\uff98\007\uff98\014\uff98\015\uff98" +
    "\016\uff98\017\uff98\020\uff98\030\uff98\053\uff98\054\uff98\055" +
    "\uff98\056\uff98\057\uff98\062\uff98\064\uff98\065\uff98\066\uff98" +
    "\067\uff98\070\uff98\073\uff98\074\uff98\076\uff98\077\uff98\100" +
    "\uff98\101\uff98\102\uff98\103\uff98\104\uff98\105\uff98\106\uff98" +
    "\110\uff98\113\uff98\114\uff98\116\uff98\001\002\000\004\010" +
    "\u0173\001\002\000\014\002\ufffa\077\ufffa\104\ufffa\107\ufffa" +
    "\110\ufffa\001\002\000\004\002\001\001\002\000\010\077" +
    "\ufff1\104\ufff1\110\ufff1\001\002\000\004\007\u0177\001\002" +
    "\000\006\005\u0179\111\u0178\001\002\000\004\007\u017b\001" +
    "\002\000\042\006\045\007\053\014\047\015\052\016\046" +
    "\017\042\020\037\077\031\100\035\101\044\102\034\103" +
    "\054\104\050\110\056\113\036\116\057\001\002\000\012" +
    "\002\ufff7\077\ufff7\104\ufff7\110\ufff7\001\002\000\004\005" +
    "\u017c\001\002\000\042\006\045\007\053\014\047\015\052" +
    "\016\046\017\042\020\037\077\031\100\035\101\044\102" +
    "\034\103\054\104\050\110\056\113\036\116\057\001\002" +
    "\000\012\002\ufff6\077\ufff6\104\ufff6\110\ufff6\001\002\000" +
    "\012\002\ufffe\077\007\104\011\110\017\001\002\000\004" +
    "\021\u0180\001\002\000\004\010\u0181\001\002\000\014\002" +
    "\ufffb\077\ufffb\104\ufffb\107\ufffb\110\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u017f\000\022\002\012\003\005\036\007\037\017\040" +
    "\013\041\011\042\003\056\004\001\001\000\012\037\u017d" +
    "\040\013\041\011\056\004\001\001\000\004\040\u0174\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\004\352\006\031" +
    "\007\350\010\370\011\347\012\362\013\344\015\356\016" +
    "\371\017\361\024\364\031\061\032\032\033\037\047\u0100" +
    "\055\351\060\354\061\375\001\001\000\002\001\001\000" +
    "\010\040\013\041\020\056\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\006\031\031\027\032\032\033" +
    "\037\043\040\044\342\045\050\047\054\054\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\006\031\031" +
    "\027\032\032\033\037\043\040\044\042\045\050\047\054" +
    "\054\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\026\143\027\145\030\315\050\316" +
    "\001\001\000\006\006\141\031\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\006\031\031\027\032\032\033" +
    "\037\045\133\047\054\054\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\006\060\031\061\032\062\001\001\000\004\050" +
    "\117\001\001\000\002\001\001\000\006\006\063\031\064" +
    "\001\001\000\004\050\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\053\071\001\001" +
    "\000\010\006\074\051\077\052\075\001\001\000\004\003" +
    "\072\001\001\000\002\001\001\000\004\006\107\001\001" +
    "\000\004\026\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\074" +
    "\052\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\114\001\001\000\004\003\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\053\121\001\001\000\004\003\122\001\001" +
    "\000\002\001\001\000\004\053\124\001\001\000\004\003" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\006\031\031\027\032\032\033\037\043" +
    "\131\045\050\047\054\054\026\001\001\000\020\006\031" +
    "\031\027\032\032\033\037\045\133\047\054\054\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\006\031\031\027\032\032\033\037\043\136\045" +
    "\050\047\054\054\026\001\001\000\020\006\031\031\027" +
    "\032\032\033\037\045\133\047\054\054\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\026\143\027\145" +
    "\030\142\050\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\053\157\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\053\150\001\001\000\004\003\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\053\154" +
    "\001\001\000\004\003\155\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\160\001\001\000\002\001\001" +
    "\000\004\005\177\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\310\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\303\035\302\001\001\000\004\006" +
    "\277\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\273\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\254\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\245\001" +
    "\001\000\004\005\205\001\001\000\002\001\001\000\004" +
    "\005\244\001\001\000\004\005\243\001\001\000\004\005" +
    "\242\001\001\000\004\005\241\001\001\000\004\005\240" +
    "\001\001\000\004\005\237\001\001\000\004\005\236\001" +
    "\001\000\004\005\233\001\001\000\004\005\232\001\001" +
    "\000\004\005\231\001\001\000\002\001\001\000\004\005" +
    "\230\001\001\000\004\005\227\001\001\000\004\005\226" +
    "\001\001\000\004\005\225\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\235\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\247\001\001\000\002\001\001\000\004\005" +
    "\251\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\266\062\267\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\260\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\263\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\272\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\275\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\025\300\034\301\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\306\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\143\027\314\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\053\320\001" +
    "\001\000\004\003\321\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\053\324\001\001\000\004\003\325\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\006\031\031" +
    "\027\032\032\033\037\043\340\045\050\047\054\054\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\006" +
    "\031\031\027\032\032\033\037\043\336\045\050\047\054" +
    "\054\026\001\001\000\020\006\031\031\027\032\032\033" +
    "\037\045\133\047\054\054\026\001\001\000\002\001\001" +
    "\000\020\006\031\031\027\032\032\033\037\045\133\047" +
    "\054\054\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\u016b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\006\031\007\u014b\010\370\011" +
    "\347\012\362\013\344\015\356\016\371\017\361\024\364" +
    "\031\061\032\032\033\037\047\u0100\055\351\060\354\061" +
    "\375\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\u0103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\u0107" +
    "\001\001\000\002\001\001\000\004\005\u0109\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\u010d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\u0112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\u0116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\266\062\u011f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\006\u0124" +
    "\014\u0127\031\061\032\u0125\033\u0126\001\001\000\010\026" +
    "\143\027\145\030\315\001\001\000\006\006\u012d\031\064" +
    "\001\001\000\002\001\001\000\004\005\u0128\001\001\000" +
    "\002\001\001\000\004\005\u012a\001\001\000\002\001\001" +
    "\000\004\003\u012c\001\001\000\002\001\001\000\010\026" +
    "\143\027\145\030\142\001\001\000\002\001\001\000\004" +
    "\005\u0130\001\001\000\002\001\001\000\004\003\u0132\001" +
    "\001\000\002\001\001\000\004\005\u0134\001\001\000\002" +
    "\001\001\000\004\003\u0136\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\006\031\031\027\032\032\033\037\043\u0140\045\050\047" +
    "\054\054\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\006\031\031\027\032\032\033\037\043\u013e\045" +
    "\050\047\054\054\026\001\001\000\020\006\031\031\027" +
    "\032\032\033\037\045\133\047\054\054\026\001\001\000" +
    "\002\001\001\000\020\006\031\031\027\032\032\033\037" +
    "\045\133\047\054\054\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\u0145\001\001" +
    "\000\002\001\001\000\004\005\u0147\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\u014d\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\020\u0150\021\u0151\022\u0154" +
    "\023\u0152\001\001\000\010\021\u015e\022\u0154\023\u015d\001" +
    "\001\000\050\004\u015c\006\031\007\350\010\370\011\347" +
    "\012\362\013\344\015\356\016\371\017\361\022\u015a\024" +
    "\364\031\061\032\032\033\037\047\u0100\055\351\060\354" +
    "\061\375\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\u0157\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\006\031\007\u014b" +
    "\010\370\011\347\012\362\013\344\015\356\016\371\017" +
    "\361\024\364\031\061\032\032\033\037\047\u0100\055\351" +
    "\060\354\061\375\001\001\000\002\001\001\000\050\004" +
    "\u015c\006\031\007\350\010\370\011\347\012\362\013\344" +
    "\015\356\016\371\017\361\022\u015a\024\364\031\061\032" +
    "\032\033\037\047\u0100\055\351\060\354\061\375\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\u0166\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\u0168\001" +
    "\001\000\002\001\001\000\004\003\u016a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\u016e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\006\031\031\027\032\032\033" +
    "\037\043\040\044\u0179\045\050\047\054\054\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\006\031\031" +
    "\027\032\032\033\037\043\040\044\u017c\045\050\047\054" +
    "\054\026\001\001\000\002\001\001\000\010\040\013\041" +
    "\020\056\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Instruccion arbolINSTRUCCION;

    public ArbolAST arbol;
    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error de sintaxis no recuperado!!!,"+String.valueOf(s.value)+"!!!"+String.valueOf(s.sym));
        System.err.println("Error caracter no esperado");
        System.err.println(s);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {

//Codigo de acciones
      

  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // PARACORCHETE ::= acorchete E ccorchete 
            {
              LinkedList<NodoAST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    RESULT = new LinkedList<NodoAST>();
                    RESULT.add(new ArreglosNew(e, eleft, eright));
              
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARACORCHETE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // PARACORCHETE ::= PARACORCHETE acorchete E ccorchete 
            {
              LinkedList<NodoAST> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<NodoAST> lista = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    RESULT = lista;
                    RESULT.add(new ArreglosNew(e, eleft, eright));
              
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARACORCHETE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // OPCIONESNEW ::= PARACORCHETE 
            {
              Expresion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> d = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 //recibiria una lista de Exp
                RESULT = new ParaCorchete(d);
              
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONESNEW",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // LISTAARRAY ::= E 
            {
              LinkedList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT = new LinkedList<Expresion>();
                RESULT.add(e);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAARRAY",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // LISTAARRAY ::= LISTAARRAY coma E 
            {
              LinkedList<Expresion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Expresion> l = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT = l;
                RESULT.add(e);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAARRAY",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // E ::= apar E cpar 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = e;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // E ::= neww T OPCIONESNEW 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		TipoContenedor t = (TipoContenedor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 //luego de t pone otro terminal para bajar una y meter las demas opciones del new
            RESULT = new Newww(t, e, eleft,eright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // E ::= allave LISTAARRAY cllave 
            {
              Expresion RESULT =null;
		int laleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String la = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Expresion> d = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new ArreglosEsteSi(d, laleft, laright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // E ::= write_file apar E coma E cpar 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion ruta = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion contenido = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new EscribirArchivo(ruta, contenido, aleft, aright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // E ::= read_file apar E cpar 
            {
              Expresion RESULT =null;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion ruta = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new LeerArchivo(ruta, rutaleft, rutaright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // E ::= id PARACORCHETE 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int indiceArregloleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int indiceArregloright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> indiceArreglo = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 //lo de un arreglo
        RESULT = new PosicionArregloRetorno(id, indiceArreglo, idleft, idright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // E ::= menosmenos id 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
         RESULT = new OPPreFijo(new Identificador(id, null, idleft, idleft), Operacion.Operador.MENOS, idleft, idright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // E ::= masmas id 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new OPPreFijo(new Identificador(id, null, idleft, idleft), Operacion.Operador.MAS, idleft, idright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // E ::= id menosmenos 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new OPPostFijo(new Identificador(id, null, idleft, idleft), Operacion.Operador.MENOS, idleft, idright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // E ::= id masmas 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new OPPostFijo(new Identificador(id, null, idleft, idleft), Operacion.Operador.MAS, idleft, idright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // E ::= E interrogacion E dospuntos E 
            {
              Expresion RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int vddleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int vddright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion vdd = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int fakeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fakeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion fake = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new OpTernario(cond, vdd, fake,condleft, condright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // E ::= id apar cpar 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
        RESULT = new LlamadaMetodoFuncion(id, new LinkedList<>(), idleft, idright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // E ::= id apar PARA_LLAMADA cpar 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Expresion> lista = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new LlamadaMetodoFuncion(id, lista, idleft, idright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // E ::= id 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Identificador(id, new TipoContenedor(Simbolo.Tipo.ID), idleft, idright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // E ::= nulo 
            {
              Expresion RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ee = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Nulo(ee,new TipoContenedor(Simbolo.Tipo.NULO), eeleft, eeright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // E ::= falsee 
            {
              Expresion RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ee = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Booleano(ee,new TipoContenedor(Simbolo.Tipo.BOOLEAN), eeleft, eeright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // E ::= truee 
            {
              Expresion RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ee = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Booleano(ee,new TipoContenedor(Simbolo.Tipo.BOOLEAN), eeleft, eeright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // E ::= charER 
            {
              Expresion RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ee = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        
        Object ww = ee.substring(1,ee.length()-1);
        RESULT = new Caracter(ww, new TipoContenedor(Simbolo.Tipo.CHAR), eeleft, eeright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // E ::= decimal 
            {
              Expresion RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object ee = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Decimal(ee, new TipoContenedor(Simbolo.Tipo.DOUBLE), eeleft, eeright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // E ::= entero 
            {
              Expresion RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object ee = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Entero(ee, new TipoContenedor(Simbolo.Tipo.INT), eeleft, eeright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // E ::= cadena 
            {
              Expresion RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ee = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        //ee.substring(1,ee.length()-1)
        RESULT = new Cadena(ee, new TipoContenedor(Simbolo.Tipo.STRING), eeleft, eeright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // E ::= E menos E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Aritmetica(e1, e2, Operacion.Operador.MENOS, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // E ::= E potencia E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Aritmetica(e1, e2, Operacion.Operador.POTENCIA, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // E ::= E dividir E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Aritmetica(e1, e2, Operacion.Operador.DIVIDIR, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // E ::= E por E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Aritmetica(e1, e2, Operacion.Operador.POR, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // E ::= E mas E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Aritmetica(e1, e2, Operacion.Operador.MAS, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // E ::= E menorigualq E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Relacional(e1, e2, Operacion.Operador.MENORIGUALQ, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // E ::= E mayorigualq E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Relacional(e1, e2, Operacion.Operador.MAYORIGUALQ, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // E ::= E menorq E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Relacional(e1, e2, Operacion.Operador.MENORQ, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // E ::= E mayorq E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Relacional(e1, e2, Operacion.Operador.MAYORQ, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // E ::= diferenteunario E 
            {
              Expresion RESULT =null;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Logica(e1, Operacion.Operador.NOT, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // E ::= E diferente E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Relacional(e1, e2, Operacion.Operador.DIFERENTE, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // E ::= E igualigual E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Relacional(e1, e2, Operacion.Operador.IGUAL, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // E ::= E aand E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Logica(e1, e2, Operacion.Operador.AND, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // E ::= E oor E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Logica(e1, e2, Operacion.Operador.OR, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // E ::= mas E 
            {
              Expresion RESULT =null;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Aritmetica(e1, Operacion.Operador.POSITIVO, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // E ::= menos E 
            {
              Expresion RESULT =null;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Aritmetica(e1, Operacion.Operador.NEGATIVO, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // T ::= voidd 
            {
              TipoContenedor RESULT =null;
		
         RESULT = new TipoContenedor(Simbolo.Tipo.METODO);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // T ::= id 
            {
              TipoContenedor RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new TipoContenedor(id);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // T ::= doublee 
            {
              TipoContenedor RESULT =null;
		
        RESULT = new TipoContenedor(Simbolo.Tipo.DOUBLE);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // T ::= booleann 
            {
              TipoContenedor RESULT =null;
		
        RESULT = new TipoContenedor(Simbolo.Tipo.BOOLEAN);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // T ::= stringg 
            {
              TipoContenedor RESULT =null;
		
        RESULT = new TipoContenedor(Simbolo.Tipo.STRING);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // T ::= charr 
            {
              TipoContenedor RESULT =null;
		
        RESULT = new TipoContenedor(Simbolo.Tipo.CHAR);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // T ::= intt 
            {
              TipoContenedor RESULT =null;
		
        RESULT = new TipoContenedor(Simbolo.Tipo.INT);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // IMPRESIONES ::= imprimir apar cpar puntoycoma 
            {
              Instruccion RESULT =null;
		
                RESULT = new ImprimirTS("hola");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESIONES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // IMPRESIONES ::= printLinea apar E cpar puntoycoma 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                RESULT = new Printer(e1, e1left, e1right, true);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESIONES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // IMPRESIONES ::= print apar E cpar puntoycoma 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                RESULT = new Printer(e1, e1left, e1right);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESIONES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // PREPOSTFIJOS ::= menosmenos id puntoycoma 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                RESULT = new OPPreFijo(new Identificador(id, null, idleft, idleft), Operacion.Operador.MENOS, idleft, idright);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PREPOSTFIJOS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // PREPOSTFIJOS ::= masmas id puntoycoma 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                RESULT = new OPPreFijo(new Identificador(id, null, idleft, idleft), Operacion.Operador.MAS, idleft, idright);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PREPOSTFIJOS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // PREPOSTFIJOS ::= id menosmenos puntoycoma 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                RESULT = new OPPostFijo(new Identificador(id, null, idleft, idleft), Operacion.Operador.MENOS, idleft, idright);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PREPOSTFIJOS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // PREPOSTFIJOS ::= id masmas puntoycoma 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                RESULT = new OPPostFijo(new Identificador(id, null, idleft, idleft), Operacion.Operador.MAS, idleft, idright);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PREPOSTFIJOS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // FIELD_MODIFIER ::= abstracto 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = d; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FIELD_MODIFIER",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // FIELD_MODIFIER ::= finall 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = d; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FIELD_MODIFIER",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // FIELD_MODIFIER ::= estatico 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = d; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FIELD_MODIFIER",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // FIELD_MODIFIER ::= privado 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = d; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FIELD_MODIFIER",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // FIELD_MODIFIER ::= protegido 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = d; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FIELD_MODIFIER",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // FIELD_MODIFIER ::= publico 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = d;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FIELD_MODIFIER",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // FIELD_MODIFIERS ::= FIELD_MODIFIER 
            {
              LinkedList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        RESULT = new LinkedList<String>();
                        RESULT.add(i);
                   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FIELD_MODIFIERS",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // FIELD_MODIFIERS ::= FIELD_MODIFIERS FIELD_MODIFIER 
            {
              LinkedList<String> RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<String> j = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        RESULT = j;
                        RESULT.add(i);
                   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FIELD_MODIFIERS",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // FOR_INIT ::= FIELD_DECLARATION 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		      
            RESULT = d;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR_INIT",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CICLOS ::= forr apar FOR_INIT E puntoycoma E cpar S 
            {
              Instruccion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int inicioleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int inicioright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Instruccion inicio = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int aumetoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aumetoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion aumeto = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion s1 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Forr(inicio, cond, aumeto, s1, fleft, fright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CICLOS ::= doo S whilee apar E cpar puntoycoma 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Instruccion s1 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
        RESULT = new DoWhile(s1, e1, dleft, dright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CICLOS ::= continuee puntoycoma 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new Continuee(eleft, eright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CICLOS ::= breakk puntoycoma 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new Breakk(eleft, eright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CICLOS ::= whilee apar E cpar S 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion s1 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new WhileCiclo(e1, s1, e1left, e1right);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // IF_LIST ::= IF_LIST elsee iff apar E cpar S 
            {
              LinkedList<IfLista> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		LinkedList<IfLista> l = (LinkedList<IfLista>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion s1 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = l;
            RESULT.add(new IfLista(e1, s1, e1left, e1right));
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF_LIST",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // IF_LIST ::= iff apar E cpar S 
            {
              LinkedList<IfLista> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion s1 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new LinkedList<IfLista>();
            RESULT.add(new IfLista(e1, s1, e1left, e1right));
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF_LIST",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // IF_STATEMENT ::= IF_LIST 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<IfLista> i = (LinkedList<IfLista>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Iff(null, i, ileft, iright);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // IF_STATEMENT ::= IF_LIST elsee S 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<IfLista> i = (LinkedList<IfLista>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion s1 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Iff(s1, i, ileft, iright);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SWITCH_LABEL ::= defaultt dospuntos 
            {
              NodoAST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    RESULT = new Defaultt(dleft, dright);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_LABEL",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SWITCH_LABEL ::= casee E dospuntos 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    RESULT = new Casee(e, eleft, eright);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_LABEL",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SWITCH_LABELS ::= SWITCH_LABELS SWITCH_LABEL 
            {
              LinkedList<NodoAST> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> f = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int dnodoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dnodoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST dnodo = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    RESULT = f;
                    RESULT.add(dnodo);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_LABELS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SWITCH_LABELS ::= SWITCH_LABEL 
            {
              LinkedList<NodoAST> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST i = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    RESULT = new LinkedList<>();
                    RESULT.add(i);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_LABELS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SWITCH_BLOCK_STATEMENT_GROUP ::= SWITCH_LABELS B 
            {
              Instruccion RESULT =null;
		int listaCaseleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaCaseright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> listaCase = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int listaSentenciasleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int listaSentenciasright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> listaSentencias = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 //cambiar la S por una B y toca instanciar una clase Bloque para mandar a guardar
                    Bloque blo = new Bloque(listaSentencias);
                    RESULT = new SwitchBlockStatement_Group(listaCase, blo);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_BLOCK_STATEMENT_GROUP",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SWITCH_BLOCK_STATEMENT_GROUPS ::= SWITCH_BLOCK_STATEMENT_GROUPS SWITCH_BLOCK_STATEMENT_GROUP 
            {
              LinkedList<NodoAST> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> f = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int dnodoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dnodoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion dnodo = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    RESULT = f;
                    RESULT.add(dnodo);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_BLOCK_STATEMENT_GROUPS",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SWITCH_BLOCK_STATEMENT_GROUPS ::= SWITCH_BLOCK_STATEMENT_GROUP 
            {
              LinkedList<NodoAST> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    RESULT = new LinkedList<>();
                    RESULT.add(i);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_BLOCK_STATEMENT_GROUPS",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SWITCH_BLOCK ::= switchh apar E cpar allave cllave 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
                    //no se hace nada
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_BLOCK",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SWITCH_BLOCK ::= switchh apar E cpar allave SWITCH_LABELS cllave 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int swileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int swiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> swi = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    RESULT = new SwitchBlock(e, eleft, eright, null, swi);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_BLOCK",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SWITCH_BLOCK ::= switchh apar E cpar allave SWITCH_BLOCK_STATEMENT_GROUPS cllave 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int grupoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int gruporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> grupo = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    RESULT = new SwitchBlock(e, eleft, eright, grupo, null);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_BLOCK",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SWITCH_BLOCK ::= switchh apar E cpar allave SWITCH_BLOCK_STATEMENT_GROUPS SWITCH_LABELS cllave 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<NodoAST> g = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> s = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    RESULT = new SwitchBlock(e, eleft, eright, g, s);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_BLOCK",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // COND ::= SWITCH_BLOCK 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = d;
      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // COND ::= IF_STATEMENT 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = d;
      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ARCHIVOS ::= grafica apar E coma E cpar puntoycoma 
            {
              NodoAST RESULT =null;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion ruta = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion contenido = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                RESULT = new Graficar(ruta, contenido, rutaleft, rutaright);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARCHIVOS",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ARCHIVOS ::= write_file apar E coma E cpar puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion ruta = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion contenido = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                RESULT = new EscribirArchivo(ruta, contenido, aleft, aright);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARCHIVOS",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ARCHIVOS ::= read_file apar E cpar puntoycoma 
            {
              NodoAST RESULT =null;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion ruta = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                RESULT = new LeerArchivo(ruta, rutaleft, rutaright);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARCHIVOS",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CLASE_LOCAL ::= clase id extender id allave CONTENIDO_CLASE cllave 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE_LOCAL",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CLASE_LOCAL ::= clase id allave CONTENIDO_CLASE cllave 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE_LOCAL",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LOCAL_FIELD_DECLARATION ::= id PARACORCHETE igual E puntoycoma 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int listaEleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int listaEright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<NodoAST> listaE = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        RESULT = new AsignacionArreglo( id, listaE, e, idleft, idright);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LOCAL_FIELD_DECLARATION",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LOCAL_FIELD_DECLARATION ::= id igual E puntoycoma 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 //asignacion
                        RESULT = new Asignacion(id, e, idleft, idright);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LOCAL_FIELD_DECLARATION",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LOCAL_FIELD_DECLARATION ::= T VARIABLE_DECLARATORS puntoycoma 
            {
              Instruccion RESULT =null;
		int tipopleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tipopright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		TipoContenedor tipop = (TipoContenedor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Object> lista = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        RESULT = new Declaraciones(tipop, lista, tipopleft, tipopright);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LOCAL_FIELD_DECLARATION",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LOCAL_FIELD_DECLARATION ::= finall T VARIABLE_DECLARATORS puntoycoma 
            {
              Instruccion RESULT =null;
		int vileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int viright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String vi = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int tipopleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tipopright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		TipoContenedor tipop = (TipoContenedor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Object> lista = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        LinkedList<String> mod = new LinkedList<>();
                        mod.add(vi);
                        RESULT = new Declaraciones(mod, tipop, lista, tipopleft, tipopright);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LOCAL_FIELD_DECLARATION",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // RETORNOO ::= retorno puntoycoma 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                RESULT = new Returnn(null, eleft, eright);
           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETORNOO",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // RETORNOO ::= retorno E puntoycoma 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                RESULT = new Returnn(e, eleft, eright);
           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETORNOO",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PARA_LLAMADA ::= E 
            {
              LinkedList<Expresion> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    RESULT = new LinkedList<>();
                    RESULT.add(i);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARA_LLAMADA",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PARA_LLAMADA ::= PARA_LLAMADA coma E 
            {
              LinkedList<Expresion> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Expresion> lista = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    RESULT = lista;
                    RESULT.add(i);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARA_LLAMADA",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LLAMADA ::= id apar cpar puntoycoma 
            {
              NodoAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
            RESULT = new LlamadaMetodoFuncion(id, new LinkedList<>(), idleft, idright);
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LLAMADA ::= id apar PARA_LLAMADA cpar puntoycoma 
            {
              NodoAST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Expresion> lista = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
            RESULT = new LlamadaMetodoFuncion(id, lista, idleft, idright);
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // J ::= LLAMADA 
            {
              NodoAST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST d = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = d;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("J",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // J ::= DECLARACIONES_VAR_FUN 
            {
              NodoAST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST d = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = d;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("J",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // J ::= RETORNOO 
            {
              NodoAST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST d = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = d;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("J",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // J ::= CLASE_LOCAL 
            {
              NodoAST RESULT =null;
		
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("J",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // J ::= ARCHIVOS 
            {
              NodoAST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST d = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = d;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("J",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // J ::= PREPOSTFIJOS 
            {
              NodoAST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion d = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = d;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("J",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // J ::= IMPRESIONES 
            {
              NodoAST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = d;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("J",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // J ::= COND 
            {
              NodoAST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = d;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("J",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // J ::= CICLOS 
            {
              NodoAST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = d;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("J",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // B ::= J 
            {
              LinkedList<NodoAST> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST i = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new LinkedList<>();
        RESULT.add(i);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // B ::= B J 
            {
              LinkedList<NodoAST> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> l = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST i = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = l;
        RESULT.add(i);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // S ::= allave B cllave 
            {
              Instruccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> l = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new Bloque(l);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VARIABLE_DECLARATOR_ID ::= id 
            {
              LinkedList<NodoAST> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                            RESULT = new LinkedList<NodoAST>();
                            RESULT.add(new Identificador(id, idleft, idright));
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE_DECLARATOR_ID",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VARIABLE_DECLARATOR_ID ::= VARIABLE_DECLARATOR_ID acorchete ccorchete 
            {
              LinkedList<NodoAST> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<NodoAST> i = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                            RESULT = i;
                            RESULT.add(new Corchetee());                                
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE_DECLARATOR_ID",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // VARIABLE_DECLARATOR ::= VARIABLE_DECLARATOR_ID 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> d = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                            RESULT = d;
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE_DECLARATOR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VARIABLE_DECLARATOR ::= VARIABLE_DECLARATOR_ID igual E 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<NodoAST> lista = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                            RESULT = new VariableDeclarator(lista, e, eleft, eright);
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE_DECLARATOR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VARIABLE_DECLARATORS ::= VARIABLE_DECLARATOR 
            {
              LinkedList<Object> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                            RESULT = new LinkedList<Object>();
                            RESULT.add(i);
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE_DECLARATORS",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VARIABLE_DECLARATORS ::= VARIABLE_DECLARATORS coma VARIABLE_DECLARATOR 
            {
              LinkedList<Object> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Object> d = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                            RESULT = d;
                            RESULT.add(i);
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE_DECLARATORS",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FIELD_DECLARATION ::= T VARIABLE_DECLARATORS puntoycoma 
            {
              Instruccion RESULT =null;
		int tipopleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tipopright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		TipoContenedor tipop = (TipoContenedor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Object> lista = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        RESULT = new Declaraciones(tipop, lista, tipopleft, tipopright);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FIELD_DECLARATION",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FIELD_DECLARATION ::= FIELD_MODIFIERS T VARIABLE_DECLARATORS puntoycoma 
            {
              Instruccion RESULT =null;
		int vileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int viright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<String> vi = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int tipopleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tipopright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		TipoContenedor tipop = (TipoContenedor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Object> lista = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        RESULT = new Declaraciones(vi, tipop, lista, tipopleft, tipopright);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FIELD_DECLARATION",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LCORCHETE ::= acorchete ccorchete 
            {
              LinkedList<Integer> RESULT =null;
		
                RESULT = new LinkedList<Integer>();
                RESULT.add(1);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LCORCHETE",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LCORCHETE ::= LCORCHETE acorchete ccorchete 
            {
              LinkedList<Integer> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Integer> l = (LinkedList<Integer>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                RESULT = new LinkedList<Integer>();
                RESULT.add(1);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LCORCHETE",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FORMAL_PAR ::= T VARIABLE_DECLARATOR_ID 
            {
              Parametros RESULT =null;
		int tipoParametroleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tipoParametroright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		TipoContenedor tipoParametro = (TipoContenedor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int listaidleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int listaidright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> listaid = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT = new Parametros(tipoParametro, listaid);
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FORMAL_PAR",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FORMAL_PAR ::= finall T VARIABLE_DECLARATOR_ID 
            {
              Parametros RESULT =null;
		int tipoParametroleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tipoParametroright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		TipoContenedor tipoParametro = (TipoContenedor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int listaidleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int listaidright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> listaid = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT = new Parametros(true, tipoParametro, listaid);
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FORMAL_PAR",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FORMAL_PARAMETERS ::= FORMAL_PAR 
            {
              LinkedList<Parametros> RESULT =null;
		int llleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int llright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Parametros ll = (Parametros)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        RESULT = new LinkedList<>();
                        RESULT.add(ll);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMETERS",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FORMAL_PARAMETERS ::= FORMAL_PARAMETERS coma FORMAL_PAR 
            {
              LinkedList<Parametros> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Parametros> lista = (LinkedList<Parametros>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int llleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int llright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Parametros ll = (Parametros)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        RESULT = lista;
                        RESULT.add(ll);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMETERS",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PARA ::= apar cpar 
            {
              LinkedList<Parametros> RESULT =null;
		
            RESULT = new LinkedList<>();
       
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARA",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PARA ::= apar FORMAL_PARAMETERS cpar 
            {
              LinkedList<Parametros> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Parametros> lista = (LinkedList<Parametros>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT = lista;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARA",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACIONES_VAR_FUN ::= FIELD_DECLARATION 
            {
              NodoAST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                            RESULT = d;
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_VAR_FUN",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACIONES_VAR_FUN ::= arroba overridee T LCORCHETE id PARA S 
            {
              NodoAST RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		TipoContenedor tipo = (TipoContenedor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int corcheteleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int corcheteright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Integer> corchete = (LinkedList<Integer>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idMetodoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idMetodoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String idMetodo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int paraleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Parametros> para = (LinkedList<Parametros>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion bloque = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                            RESULT = new MetodoFuncion(tipo, corchete,idMetodo, para, bloque, idMetodoleft, idMetodoright, true);
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_VAR_FUN",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACIONES_VAR_FUN ::= arroba overridee FIELD_MODIFIERS T LCORCHETE id PARA S 
            {
              NodoAST RESULT =null;
		int visibilidadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int visibilidadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<String> visibilidad = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		TipoContenedor tipo = (TipoContenedor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int corcheteleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int corcheteright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Integer> corchete = (LinkedList<Integer>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idMetodoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idMetodoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String idMetodo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int paraleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Parametros> para = (LinkedList<Parametros>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion bloque = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                            RESULT = new MetodoFuncion(visibilidad, tipo, corchete,idMetodo, para, bloque, idMetodoleft, idMetodoright, true);
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_VAR_FUN",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACIONES_VAR_FUN ::= arroba overridee T id PARA S 
            {
              NodoAST RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		TipoContenedor tipo = (TipoContenedor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idMetodoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idMetodoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String idMetodo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int paraleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Parametros> para = (LinkedList<Parametros>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion bloque = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                            RESULT = new MetodoFuncion(tipo, idMetodo, para, bloque, idMetodoleft, idMetodoright, true);
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_VAR_FUN",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACIONES_VAR_FUN ::= arroba overridee FIELD_MODIFIERS T id PARA S 
            {
              NodoAST RESULT =null;
		int visibilidadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int visibilidadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<String> visibilidad = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		TipoContenedor tipo = (TipoContenedor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idMetodoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idMetodoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String idMetodo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int paraleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Parametros> para = (LinkedList<Parametros>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion bloque = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                            RESULT = new MetodoFuncion(visibilidad, tipo, idMetodo, para, bloque, idMetodoleft, idMetodoright, true);
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_VAR_FUN",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACIONES_VAR_FUN ::= T LCORCHETE id PARA S 
            {
              NodoAST RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		TipoContenedor tipo = (TipoContenedor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int corcheteleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int corcheteright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Integer> corchete = (LinkedList<Integer>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idMetodoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idMetodoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String idMetodo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int paraleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Parametros> para = (LinkedList<Parametros>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion bloque = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                            RESULT = new MetodoFuncion(tipo, corchete,idMetodo, para, bloque, idMetodoleft, idMetodoright);
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_VAR_FUN",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACIONES_VAR_FUN ::= FIELD_MODIFIERS T LCORCHETE id PARA S 
            {
              NodoAST RESULT =null;
		int visibilidadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int visibilidadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<String> visibilidad = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		TipoContenedor tipo = (TipoContenedor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int corcheteleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int corcheteright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Integer> corchete = (LinkedList<Integer>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idMetodoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idMetodoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String idMetodo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int paraleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Parametros> para = (LinkedList<Parametros>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion bloque = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                            RESULT = new MetodoFuncion(visibilidad, tipo, corchete,idMetodo, para, bloque, idMetodoleft, idMetodoright);
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_VAR_FUN",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACIONES_VAR_FUN ::= T id PARA S 
            {
              NodoAST RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		TipoContenedor tipo = (TipoContenedor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idMetodoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idMetodoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String idMetodo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int paraleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Parametros> para = (LinkedList<Parametros>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion bloque = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                            RESULT = new MetodoFuncion(tipo, idMetodo, para, bloque, idMetodoleft, idMetodoright);
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_VAR_FUN",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACIONES_VAR_FUN ::= FIELD_MODIFIERS T id PARA S 
            {
              NodoAST RESULT =null;
		int visibilidadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int visibilidadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<String> visibilidad = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		TipoContenedor tipo = (TipoContenedor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idMetodoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idMetodoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String idMetodo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int paraleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Parametros> para = (LinkedList<Parametros>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion bloque = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                            RESULT = new MetodoFuncion(visibilidad, tipo, idMetodo, para, bloque, idMetodoleft, idMetodoright);
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_VAR_FUN",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACIONES_VAR_FUN ::= FIELD_MODIFIERS T mainn PARA S 
            {
              NodoAST RESULT =null;
		int visivilidadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int visivilidadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<String> visivilidad = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		TipoContenedor tipo = (TipoContenedor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int paraleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Parametros> para = (LinkedList<Parametros>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int listaContenidoSentenciasleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int listaContenidoSentenciasright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion listaContenidoSentencias = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                            RESULT = new Mainn( visivilidad, tipo, "main", para, listaContenidoSentencias, true, sleft, sright);
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_VAR_FUN",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACIONES_VAR_FUN ::= T id PARA puntoycoma 
            {
              NodoAST RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		TipoContenedor tipo = (TipoContenedor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idMetodoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idMetodoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String idMetodo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Parametros> lista = (LinkedList<Parametros>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                            RESULT = new MetodoAbstracto(tipo, idMetodo, lista, idMetodoleft, idMetodoright);
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_VAR_FUN",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACIONES_VAR_FUN ::= T LCORCHETE id PARA puntoycoma 
            {
              NodoAST RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		TipoContenedor tipo = (TipoContenedor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int listaCorchtesleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int listaCorchtesright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Integer> listaCorchtes = (LinkedList<Integer>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idMetodoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idMetodoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String idMetodo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Parametros> lista = (LinkedList<Parametros>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                            RESULT = new MetodoAbstracto(tipo, listaCorchtes, idMetodo, lista, idMetodoleft, idMetodoright);
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_VAR_FUN",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACIONES_VAR_FUN ::= FIELD_MODIFIERS T id PARA puntoycoma 
            {
              NodoAST RESULT =null;
		int visivilidadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int visivilidadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<String> visivilidad = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		TipoContenedor tipo = (TipoContenedor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idMetodoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idMetodoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String idMetodo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Parametros> lista = (LinkedList<Parametros>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                            RESULT = new MetodoAbstracto(visivilidad, tipo, idMetodo, lista, idMetodoleft, idMetodoright);
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_VAR_FUN",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACIONES_VAR_FUN ::= FIELD_MODIFIERS T LCORCHETE id PARA puntoycoma 
            {
              NodoAST RESULT =null;
		int visivilidadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int visivilidadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<String> visivilidad = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		TipoContenedor tipo = (TipoContenedor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int listaCorchtesleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int listaCorchtesright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Integer> listaCorchtes = (LinkedList<Integer>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idMetodoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idMetodoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String idMetodo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Parametros> lista = (LinkedList<Parametros>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                            RESULT = new MetodoAbstracto(visivilidad, tipo, listaCorchtes, idMetodo, lista, idMetodoleft, idMetodoright);
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_VAR_FUN",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CLASE_MIEMBRO ::= clase id extender id allave CONTENIDO_CLASE cllave 
            {
              Instruccion RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE_MIEMBRO",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CLASE_MIEMBRO ::= clase id allave CONTENIDO_CLASE cllave 
            {
              Instruccion RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE_MIEMBRO",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CLASE_MIEMBRO ::= FIELD_MODIFIER clase id extender id allave CONTENIDO_CLASE cllave 
            {
              Instruccion RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE_MIEMBRO",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CLASE_MIEMBRO ::= FIELD_MODIFIER clase id allave CONTENIDO_CLASE cllave 
            {
              Instruccion RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE_MIEMBRO",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DENTRO_CLASE ::= DECLARACIONES_VAR_FUN 
            {
              NodoAST RESULT =null;
		int declaracionesleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int declaracionesright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST declaraciones = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 //puede o no llevar override
                    RESULT = declaraciones;
               
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DENTRO_CLASE",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DENTRO_CLASE ::= CLASE_MIEMBRO 
            {
              NodoAST RESULT =null;
		int claseMiembroleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int claseMiembroright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion claseMiembro = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    RESULT = claseMiembro;
               
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DENTRO_CLASE",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CONTENIDO_CLASE ::= DENTRO_CLASE 
            {
              LinkedList<NodoAST> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST d = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        RESULT = new LinkedList<>();
                        RESULT.add(d);
                  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO_CLASE",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CONTENIDO_CLASE ::= CONTENIDO_CLASE DENTRO_CLASE 
            {
              LinkedList<NodoAST> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> lista = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST d = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        RESULT = lista;
                        RESULT.add(d);
                  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO_CLASE",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // MOD_CS ::= abstracto 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = d;
         
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MOD_CS",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // MOD_CS ::= publico 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = d;
         
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MOD_CS",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MOD_CLASE_SUPERIOR ::= MOD_CS 
            {
              LinkedList<String> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        RESULT = new LinkedList<>();
                        RESULT.add(d);
                     
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MOD_CLASE_SUPERIOR",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MOD_CLASE_SUPERIOR ::= MOD_CLASE_SUPERIOR MOD_CS 
            {
              LinkedList<String> RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<String> dd = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        RESULT = dd;
                        RESULT.add(d);
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MOD_CLASE_SUPERIOR",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // OTRO ::= cllave 
            {
              LinkedList<NodoAST> RESULT =null;
		
            RESULT = new LinkedList<>();
       
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTRO",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // OTRO ::= CONTENIDO_CLASE cllave 
            {
              LinkedList<NodoAST> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> lista = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT = lista;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTRO",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CLASE ::= clase id extender id allave OTRO 
            {
              Instruccion RESULT =null;
		int idClaseleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idClaseright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String idClase = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int idHerencialeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idHerenciaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String idHerencia = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int listaIntruccionesleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int listaIntruccionesright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> listaIntrucciones = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Clase( idClase, idHerencia, listaIntrucciones, idClaseleft, idClaseright);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CLASE ::= clase id allave OTRO 
            {
              Instruccion RESULT =null;
		int idClaseleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idClaseright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String idClase = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int listaIntruccionesleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int listaIntruccionesright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> listaIntrucciones = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Clase( idClase, listaIntrucciones, idClaseleft, idClaseright);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CLASE ::= MOD_CLASE_SUPERIOR clase id extender id allave OTRO 
            {
              Instruccion RESULT =null;
		int visivilidadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int visivilidadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		LinkedList<String> visivilidad = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int idClaseleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idClaseright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String idClase = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int idHerencialeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idHerenciaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String idHerencia = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int listaIntruccionesleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int listaIntruccionesright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> listaIntrucciones = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Clase( visivilidad, idClase, idHerencia, listaIntrucciones, idClaseleft, idClaseright);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CLASE ::= MOD_CLASE_SUPERIOR clase id allave OTRO 
            {
              Instruccion RESULT =null;
		int visivilidadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int visivilidadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<String> visivilidad = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int idClaseleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idClaseright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String idClase = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int listaIntruccionesleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int listaIntruccionesright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> listaIntrucciones = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Clase( visivilidad, idClase, listaIntrucciones, idClaseleft, idClaseright);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LCLASE ::= CLASE 
            {
              LinkedList<NodoAST> RESULT =null;
		int claseleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion clase = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new LinkedList<>();
            RESULT.add(clase); 
         
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LCLASE",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LCLASE ::= LCLASE CLASE 
            {
              LinkedList<NodoAST> RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> dd = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = dd;
            RESULT.add(d); 
         
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LCLASE",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LIMPORT ::= importa cadena puntoycoma 
            {
              LinkedList<Importar> RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		               //-------------------FALTA------------------
            RESULT = new LinkedList<>();
            RESULT.add(new Importar(cad, cadleft, cadright));
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LIMPORT",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LIMPORT ::= LIMPORT importa cadena puntoycoma 
            {
              LinkedList<Importar> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Importar> l = (LinkedList<Importar>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		   //-------------------FALTA------------------
            RESULT = l;
            RESULT.add(new Importar(cad, cadleft, cadright));
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LIMPORT",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SS ::= LCLASE 
            {
              ArbolAST RESULT =null;
		int lclaseleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lclaseright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> lclase = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new ArbolAST(lclase, 0);
     
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SS",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SS ::= LIMPORT 
            {
              ArbolAST RESULT =null;
		int limportleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int limportright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Importar> limport = (LinkedList<Importar>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new ArbolAST(limport);
     
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SS",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SS ::= LIMPORT LCLASE 
            {
              ArbolAST RESULT =null;
		int limportleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int limportright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Importar> limport = (LinkedList<Importar>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int lclaseleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lclaseright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> lclase = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new ArbolAST(limport, lclase);
      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SS",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // I ::= SS 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArbolAST l = (ArbolAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        this.parser.arbol = l;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("I",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // I ::= S 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion l = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        this.parser.arbolINSTRUCCION = l;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("I",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= I EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

