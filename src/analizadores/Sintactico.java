
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jun 08 17:14:38 CST 2019
//----------------------------------------------------

package analizadores;

import ast.ArbolAST;
import ast.NodoAST;
import ast.entorno.Simbolo;
import ast.expresiones.Expresion;
import ast.expresiones.Identificador;
import ast.expresiones.OPPostFijo;
import ast.expresiones.OPPreFijo;
import ast.expresiones.operacion.Aritmetica;
import ast.expresiones.operacion.Logica;
import ast.expresiones.operacion.OpTernario;
import ast.expresiones.operacion.TipoContenedor;
import ast.expresiones.operacion.Relacional;
import ast.expresiones.operacion.Operacion;
import ast.expresiones.primitivos.Booleano;
import ast.expresiones.primitivos.Cadena;
import ast.expresiones.primitivos.Caracter;
import ast.expresiones.primitivos.Decimal;
import ast.expresiones.primitivos.Entero;
import ast.instrucciones.Bloque;
import ast.instrucciones.Declaracion;
import ast.instrucciones.Asignacion;
import ast.instrucciones.Instruccion;
import ast.instrucciones.ImprimirTS;
import ast.instrucciones.Printer;
import ast.instrucciones.ciclos.WhileCiclo;
import ast.instrucciones.ciclos.RetCont.*;
import java.util.LinkedList;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jun 08 17:14:38 CST 2019
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\061\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\004\004\000\002\004\003\000\002\010\003" +
    "\000\002\010\003\000\002\006\007\000\002\006\005\000" +
    "\002\006\006\000\002\006\007\000\002\006\006\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\007\000\002\006\004\000\002\006\004" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\005\004\000\002" +
    "\005\004\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\004\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\007\000" +
    "\002\005\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\004\005\006\001\002\000\004\002\146\001" +
    "\002\000\004\002\000\001\002\000\036\005\006\007\030" +
    "\011\024\012\027\013\023\014\022\015\017\024\015\047" +
    "\020\050\010\051\016\052\012\053\007\056\011\001\002" +
    "\000\004\007\144\001\002\000\004\010\143\001\002\000" +
    "\004\025\137\001\002\000\004\007\135\001\002\000\004" +
    "\007\130\001\002\000\040\005\ufffb\006\ufffb\007\ufffb\011" +
    "\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\024\ufffb\047\ufffb" +
    "\050\ufffb\051\ufffb\052\ufffb\053\ufffb\056\ufffb\001\002\000" +
    "\004\025\125\001\002\000\004\010\124\001\002\000\004" +
    "\007\uffeb\001\002\000\004\025\120\001\002\000\040\005" +
    "\ufffd\006\ufffd\007\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd" +
    "\015\ufffd\024\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053" +
    "\ufffd\056\ufffd\001\002\000\004\007\uffea\001\002\000\004" +
    "\007\uffec\001\002\000\004\007\uffee\001\002\000\040\005" +
    "\ufffc\006\ufffc\007\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc" +
    "\015\ufffc\024\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc\053" +
    "\ufffc\056\ufffc\001\002\000\040\005\006\006\117\007\030" +
    "\011\024\012\027\013\023\014\022\015\017\024\015\047" +
    "\020\050\010\051\016\052\012\053\007\056\011\001\002" +
    "\000\004\007\uffed\001\002\000\010\004\032\052\031\053" +
    "\033\001\002\000\004\010\115\001\002\000\030\007\036" +
    "\016\041\017\035\020\037\021\040\022\046\023\043\025" +
    "\042\027\047\031\044\036\045\001\002\000\004\010\034" +
    "\001\002\000\040\005\ufff4\006\ufff4\007\ufff4\011\ufff4\012" +
    "\ufff4\013\ufff4\014\ufff4\015\ufff4\024\ufff4\047\ufff4\050\ufff4" +
    "\051\ufff4\052\ufff4\053\ufff4\056\ufff4\001\002\000\044\010" +
    "\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5" +
    "\034\uffd5\035\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043" +
    "\uffd5\044\uffd5\045\uffd5\046\uffd5\001\002\000\044\010\uffd3" +
    "\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034" +
    "\uffd3\035\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3" +
    "\044\uffd3\045\uffd3\046\uffd3\001\002\000\044\010\uffd4\026" +
    "\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4" +
    "\035\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044" +
    "\uffd4\045\uffd4\046\uffd4\001\002\000\044\010\uffd6\026\uffd6" +
    "\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035" +
    "\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6" +
    "\045\uffd6\046\uffd6\001\002\000\044\010\uffd9\026\uffd9\027" +
    "\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9" +
    "\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045" +
    "\uffd9\046\uffd9\001\002\000\030\007\036\016\041\017\035" +
    "\020\037\021\040\022\046\023\043\025\042\027\047\031" +
    "\044\036\045\001\002\000\044\010\uffd7\026\uffd7\027\uffd7" +
    "\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\037" +
    "\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7" +
    "\046\uffd7\001\002\000\030\007\036\016\041\017\035\020" +
    "\037\021\040\022\046\023\043\025\042\027\047\031\044" +
    "\036\045\001\002\000\030\007\036\016\041\017\035\020" +
    "\037\021\040\022\046\023\043\025\042\027\047\031\044" +
    "\036\045\001\002\000\044\010\uffd8\026\uffd8\027\uffd8\030" +
    "\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\037\uffd8" +
    "\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046" +
    "\uffd8\001\002\000\030\007\036\016\041\017\035\020\037" +
    "\021\040\022\046\023\043\025\042\027\047\031\044\036" +
    "\045\001\002\000\040\010\060\027\065\030\063\031\053" +
    "\032\066\033\051\034\056\035\052\037\055\040\067\041" +
    "\054\042\062\043\064\044\057\045\061\001\002\000\030" +
    "\007\036\016\041\017\035\020\037\021\040\022\046\023" +
    "\043\025\042\027\047\031\044\036\045\001\002\000\030" +
    "\007\036\016\041\017\035\020\037\021\040\022\046\023" +
    "\043\025\042\027\047\031\044\036\045\001\002\000\030" +
    "\007\036\016\041\017\035\020\037\021\040\022\046\023" +
    "\043\025\042\027\047\031\044\036\045\001\002\000\030" +
    "\007\036\016\041\017\035\020\037\021\040\022\046\023" +
    "\043\025\042\027\047\031\044\036\045\001\002\000\030" +
    "\007\036\016\041\017\035\020\037\021\040\022\046\023" +
    "\043\025\042\027\047\031\044\036\045\001\002\000\030" +
    "\007\036\016\041\017\035\020\037\021\040\022\046\023" +
    "\043\025\042\027\047\031\044\036\045\001\002\000\030" +
    "\007\036\016\041\017\035\020\037\021\040\022\046\023" +
    "\043\025\042\027\047\031\044\036\045\001\002\000\040" +
    "\005\ufff8\006\ufff8\007\ufff8\011\ufff8\012\ufff8\013\ufff8\014" +
    "\ufff8\015\ufff8\024\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8" +
    "\053\ufff8\056\ufff8\001\002\000\030\007\036\016\041\017" +
    "\035\020\037\021\040\022\046\023\043\025\042\027\047" +
    "\031\044\036\045\001\002\000\030\007\036\016\041\017" +
    "\035\020\037\021\040\022\046\023\043\025\042\027\047" +
    "\031\044\036\045\001\002\000\030\007\036\016\041\017" +
    "\035\020\037\021\040\022\046\023\043\025\042\027\047" +
    "\031\044\036\045\001\002\000\030\007\036\016\041\017" +
    "\035\020\037\021\040\022\046\023\043\025\042\027\047" +
    "\031\044\036\045\001\002\000\030\007\036\016\041\017" +
    "\035\020\037\021\040\022\046\023\043\025\042\027\047" +
    "\031\044\036\045\001\002\000\030\007\036\016\041\017" +
    "\035\020\037\021\040\022\046\023\043\025\042\027\047" +
    "\031\044\036\045\001\002\000\030\007\036\016\041\017" +
    "\035\020\037\021\040\022\046\023\043\025\042\027\047" +
    "\031\044\036\045\001\002\000\044\010\uffe2\026\uffe2\027" +
    "\065\030\063\031\053\032\066\033\051\034\uffe2\035\uffe2" +
    "\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045" +
    "\uffe2\046\uffe2\001\002\000\044\010\uffdc\026\uffdc\027\uffdc" +
    "\030\uffdc\031\uffdc\032\uffdc\033\051\034\uffdc\035\uffdc\037" +
    "\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc" +
    "\046\uffdc\001\002\000\044\010\uffde\026\uffde\027\uffde\030" +
    "\063\031\uffde\032\066\033\051\034\uffde\035\uffde\037\uffde" +
    "\040\uffde\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde\046" +
    "\uffde\001\002\000\044\010\uffe0\026\uffe0\027\065\030\063" +
    "\031\053\032\066\033\051\034\uffe0\035\uffe0\037\uffe0\040" +
    "\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0" +
    "\001\002\000\044\010\uffdd\026\uffdd\027\uffdd\030\uffdd\031" +
    "\uffdd\032\uffdd\033\051\034\uffdd\035\uffdd\037\uffdd\040\uffdd" +
    "\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd\001" +
    "\002\000\044\010\uffdf\026\uffdf\027\065\030\063\031\053" +
    "\032\066\033\051\034\uffdf\035\uffdf\037\uffdf\040\uffdf\041" +
    "\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\001\002" +
    "\000\040\027\065\030\063\031\053\032\066\033\051\034" +
    "\056\035\052\037\055\040\067\041\054\042\062\043\064" +
    "\044\057\045\061\046\077\001\002\000\030\007\036\016" +
    "\041\017\035\020\037\021\040\022\046\023\043\025\042" +
    "\027\047\031\044\036\045\001\002\000\044\010\uffd2\026" +
    "\uffd2\027\065\030\063\031\053\032\066\033\051\034\056" +
    "\035\052\037\055\040\067\041\054\042\062\043\064\044" +
    "\057\045\061\046\uffd2\001\002\000\044\010\uffe4\026\uffe4" +
    "\027\065\030\063\031\053\032\066\033\051\034\uffe4\035" +
    "\uffe4\037\uffe4\040\067\041\054\042\062\043\064\044\uffe4" +
    "\045\uffe4\046\uffe4\001\002\000\044\010\uffe7\026\uffe7\027" +
    "\065\030\063\031\053\032\066\033\051\034\uffe7\035\052" +
    "\037\055\040\067\041\054\042\062\043\064\044\057\045" +
    "\uffe7\046\uffe7\001\002\000\044\010\uffe5\026\uffe5\027\065" +
    "\030\063\031\053\032\066\033\051\034\uffe5\035\uffe5\037" +
    "\uffe5\040\067\041\054\042\062\043\064\044\uffe5\045\uffe5" +
    "\046\uffe5\001\002\000\044\010\uffe1\026\uffe1\027\065\030" +
    "\063\031\053\032\066\033\051\034\uffe1\035\uffe1\037\uffe1" +
    "\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046" +
    "\uffe1\001\002\000\044\010\uffda\026\uffda\027\uffda\030\063" +
    "\031\uffda\032\066\033\051\034\uffda\035\uffda\037\uffda\040" +
    "\uffda\041\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046\uffda" +
    "\001\002\000\044\010\uffe6\026\uffe6\027\065\030\063\031" +
    "\053\032\066\033\051\034\uffe6\035\uffe6\037\055\040\067" +
    "\041\054\042\062\043\064\044\057\045\uffe6\046\uffe6\001" +
    "\002\000\044\010\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb" +
    "\032\uffdb\033\uffdb\034\uffdb\035\uffdb\037\uffdb\040\uffdb\041" +
    "\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\001\002" +
    "\000\044\010\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032" +
    "\uffe8\033\uffe8\034\uffe8\035\uffe8\037\uffe8\040\uffe8\041\uffe8" +
    "\042\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\001\002\000" +
    "\044\010\uffe3\026\uffe3\027\065\030\063\031\053\032\066" +
    "\033\051\034\uffe3\035\uffe3\037\055\040\067\041\054\042" +
    "\062\043\064\044\057\045\uffe3\046\uffe3\001\002\000\044" +
    "\010\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033" +
    "\uffe9\034\uffe9\035\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9" +
    "\043\uffe9\044\uffe9\045\uffe9\046\uffe9\001\002\000\040\026" +
    "\114\027\065\030\063\031\053\032\066\033\051\034\056" +
    "\035\052\037\055\040\067\041\054\042\062\043\064\044" +
    "\057\045\061\001\002\000\044\010\uffd1\026\uffd1\027\uffd1" +
    "\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\037" +
    "\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1" +
    "\046\uffd1\001\002\000\040\005\ufff5\006\ufff5\007\ufff5\011" +
    "\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\024\ufff5\047\ufff5" +
    "\050\ufff5\051\ufff5\052\ufff5\053\ufff5\056\ufff5\001\002\000" +
    "\040\005\ufffe\006\ufffe\007\ufffe\011\ufffe\012\ufffe\013\ufffe" +
    "\014\ufffe\015\ufffe\024\ufffe\047\ufffe\050\ufffe\051\ufffe\052" +
    "\ufffe\053\ufffe\056\ufffe\001\002\000\042\002\uffff\005\uffff" +
    "\006\uffff\007\uffff\011\uffff\012\uffff\013\uffff\014\uffff\015" +
    "\uffff\024\uffff\047\uffff\050\uffff\051\uffff\052\uffff\053\uffff" +
    "\056\uffff\001\002\000\030\007\036\016\041\017\035\020" +
    "\037\021\040\022\046\023\043\025\042\027\047\031\044" +
    "\036\045\001\002\000\040\026\122\027\065\030\063\031" +
    "\053\032\066\033\051\034\056\035\052\037\055\040\067" +
    "\041\054\042\062\043\064\044\057\045\061\001\002\000" +
    "\004\005\006\001\002\000\040\005\ufff1\006\ufff1\007\ufff1" +
    "\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\024\ufff1\047" +
    "\ufff1\050\ufff1\051\ufff1\052\ufff1\053\ufff1\056\ufff1\001\002" +
    "\000\040\005\uffef\006\uffef\007\uffef\011\uffef\012\uffef\013" +
    "\uffef\014\uffef\015\uffef\024\uffef\047\uffef\050\uffef\051\uffef" +
    "\052\uffef\053\uffef\056\uffef\001\002\000\004\026\126\001" +
    "\002\000\004\010\127\001\002\000\040\005\ufff6\006\ufff6" +
    "\007\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\024" +
    "\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\056\ufff6" +
    "\001\002\000\006\004\131\010\132\001\002\000\030\007" +
    "\036\016\041\017\035\020\037\021\040\022\046\023\043" +
    "\025\042\027\047\031\044\036\045\001\002\000\040\005" +
    "\ufff9\006\ufff9\007\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9" +
    "\015\ufff9\024\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9\053" +
    "\ufff9\056\ufff9\001\002\000\040\010\134\027\065\030\063" +
    "\031\053\032\066\033\051\034\056\035\052\037\055\040" +
    "\067\041\054\042\062\043\064\044\057\045\061\001\002" +
    "\000\040\005\ufffa\006\ufffa\007\ufffa\011\ufffa\012\ufffa\013" +
    "\ufffa\014\ufffa\015\ufffa\024\ufffa\047\ufffa\050\ufffa\051\ufffa" +
    "\052\ufffa\053\ufffa\056\ufffa\001\002\000\004\010\136\001" +
    "\002\000\040\005\ufff3\006\ufff3\007\ufff3\011\ufff3\012\ufff3" +
    "\013\ufff3\014\ufff3\015\ufff3\024\ufff3\047\ufff3\050\ufff3\051" +
    "\ufff3\052\ufff3\053\ufff3\056\ufff3\001\002\000\030\007\036" +
    "\016\041\017\035\020\037\021\040\022\046\023\043\025" +
    "\042\027\047\031\044\036\045\001\002\000\040\026\141" +
    "\027\065\030\063\031\053\032\066\033\051\034\056\035" +
    "\052\037\055\040\067\041\054\042\062\043\064\044\057" +
    "\045\061\001\002\000\004\010\142\001\002\000\040\005" +
    "\ufff7\006\ufff7\007\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7" +
    "\015\ufff7\024\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7\053" +
    "\ufff7\056\ufff7\001\002\000\040\005\ufff0\006\ufff0\007\ufff0" +
    "\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\024\ufff0\047" +
    "\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0\056\ufff0\001\002" +
    "\000\004\010\145\001\002\000\040\005\ufff2\006\ufff2\007" +
    "\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\024\ufff2" +
    "\047\ufff2\050\ufff2\051\ufff2\052\ufff2\053\ufff2\056\ufff2\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\013\004\025\006\024" +
    "\007\012\010\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\013\006\024\007\012\010\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\112\001\001" +
    "\000\002\001\001\000\004\005\111\001\001\000\004\005" +
    "\110\001\001\000\002\001\001\000\004\005\107\001\001" +
    "\000\002\001\001\000\004\005\106\001\001\000\004\005" +
    "\105\001\001\000\004\005\104\001\001\000\004\005\103" +
    "\001\001\000\004\005\102\001\001\000\004\005\101\001" +
    "\001\000\004\005\100\001\001\000\002\001\001\000\004" +
    "\005\075\001\001\000\004\005\074\001\001\000\004\005" +
    "\073\001\001\000\004\005\072\001\001\000\004\005\071" +
    "\001\001\000\004\005\070\001\001\000\004\005\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\120\001" +
    "\001\000\002\001\001\000\004\003\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\137" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Instruccion arbol;
    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("Error caracter no esperado");
        System.err.println(s);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {

//Codigo de acciones
      

  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E ::= apar E cpar 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = e;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // E ::= E interrogacion E dospuntos E 
            {
              Expresion RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int vddleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int vddright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion vdd = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int fakeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fakeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion fake = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new OpTernario(cond, vdd, fake,condleft, condright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // E ::= id 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Identificador(id, new TipoContenedor(Simbolo.Tipo.ID), idleft, idright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // E ::= falsee 
            {
              Expresion RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ee = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Booleano(ee,new TipoContenedor(Simbolo.Tipo.BOOLEAN), eeleft, eeright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // E ::= truee 
            {
              Expresion RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ee = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Booleano(ee,new TipoContenedor(Simbolo.Tipo.BOOLEAN), eeleft, eeright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // E ::= charER 
            {
              Expresion RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ee = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        
        Object ww = ee.substring(1,ee.length()-1);
        RESULT = new Caracter(ww, new TipoContenedor(Simbolo.Tipo.CHAR), eeleft, eeright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // E ::= decimal 
            {
              Expresion RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object ee = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Decimal(ee, new TipoContenedor(Simbolo.Tipo.DOUBLE), eeleft, eeright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // E ::= entero 
            {
              Expresion RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object ee = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Entero(ee, new TipoContenedor(Simbolo.Tipo.INT), eeleft, eeright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // E ::= cadena 
            {
              Expresion RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ee = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Cadena(ee.substring(1,ee.length()-1), new TipoContenedor(Simbolo.Tipo.STRING), eeleft, eeright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // E ::= E menos E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Aritmetica(e1, e2, Operacion.Operador.MENOS, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // E ::= E potencia E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Aritmetica(e1, e2, Operacion.Operador.POTENCIA, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // E ::= E dividir E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Aritmetica(e1, e2, Operacion.Operador.DIVIDIR, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E ::= E por E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Aritmetica(e1, e2, Operacion.Operador.POR, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // E ::= E mas E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Aritmetica(e1, e2, Operacion.Operador.MAS, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // E ::= E menorigualq E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Relacional(e1, e2, Operacion.Operador.MENORIGUALQ, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // E ::= E mayorigualq E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Relacional(e1, e2, Operacion.Operador.MAYORIGUALQ, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // E ::= E menorq E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Relacional(e1, e2, Operacion.Operador.MENORQ, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // E ::= E mayorq E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Relacional(e1, e2, Operacion.Operador.MAYORQ, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // E ::= diferenteunario E 
            {
              Expresion RESULT =null;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Logica(e1, Operacion.Operador.NOT, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // E ::= E diferente E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Relacional(e1, e2, Operacion.Operador.DIFERENTE, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // E ::= E igualigual E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Relacional(e1, e2, Operacion.Operador.IGUAL, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // E ::= E aand E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Logica(e1, e2, Operacion.Operador.AND, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // E ::= E oor E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Logica(e1, e2, Operacion.Operador.OR, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // E ::= mas E 
            {
              Expresion RESULT =null;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Aritmetica(e1, Operacion.Operador.POSITIVO, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // E ::= menos E 
            {
              Expresion RESULT =null;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Aritmetica(e1, Operacion.Operador.NEGATIVO, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // T ::= doublee 
            {
              TipoContenedor RESULT =null;
		
        //RESULT = Simbolo.Tipo.DOUBLE;
        RESULT = new TipoContenedor(Simbolo.Tipo.DOUBLE);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // T ::= booleann 
            {
              TipoContenedor RESULT =null;
		
        //RESULT = Simbolo.Tipo.BOOLEAN;
        RESULT = new TipoContenedor(Simbolo.Tipo.BOOLEAN);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // T ::= stringg 
            {
              TipoContenedor RESULT =null;
		
        //RESULT = Simbolo.Tipo.STRING;
        RESULT = new TipoContenedor(Simbolo.Tipo.STRING);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // T ::= charr 
            {
              TipoContenedor RESULT =null;
		
        //RESULT = Simbolo.Tipo.CHAR;
        RESULT = new TipoContenedor(Simbolo.Tipo.CHAR);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // T ::= intt 
            {
              TipoContenedor RESULT =null;
		
        //RESULT = Simbolo.Tipo.INT;
        RESULT = new TipoContenedor(Simbolo.Tipo.INT);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // D ::= continuee puntoycoma 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new Continuee(eleft, eright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("D",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // D ::= breakk puntoycoma 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new Breakk(eleft, eright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("D",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // D ::= whilee apar E cpar S 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion s1 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new WhileCiclo(e1, s1, e1left, e1right);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("D",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // D ::= menosmenos id puntoycoma 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new OPPreFijo(new Identificador(id, null, idleft, idleft), Operacion.Operador.MENOS, idleft, idright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("D",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // D ::= masmas id puntoycoma 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new OPPreFijo(new Identificador(id, null, idleft, idleft), Operacion.Operador.MAS, idleft, idright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("D",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // D ::= id menosmenos puntoycoma 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
        RESULT = new OPPostFijo(new Identificador(id, null, idleft, idleft), Operacion.Operador.MENOS, idleft, idright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("D",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // D ::= id masmas puntoycoma 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
        RESULT = new OPPostFijo(new Identificador(id, null, idleft, idleft), Operacion.Operador.MAS, idleft, idright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("D",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // D ::= imprimir apar cpar puntoycoma 
            {
              Instruccion RESULT =null;
		
        RESULT = new ImprimirTS("hola");
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("D",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // D ::= print apar E cpar puntoycoma 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
        RESULT = new Printer(e1, e1left, e1right);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("D",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // D ::= id igual E puntoycoma 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new Asignacion(id, e, idleft, idright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("D",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // D ::= T id puntoycoma 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		TipoContenedor t = (TipoContenedor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new Declaracion(t, id, idleft, idright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("D",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // D ::= T id igual E puntoycoma 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		TipoContenedor t = (TipoContenedor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new Declaracion(t,id, e, idleft, idright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("D",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // J ::= S 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = d;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("J",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // J ::= D 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = d;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("J",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // B ::= J 
            {
              LinkedList<NodoAST> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
       RESULT = new LinkedList<>();
        RESULT.add(i);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // B ::= B J 
            {
              LinkedList<NodoAST> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> l = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = l;
        RESULT.add(i);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= allave B cllave 
            {
              Instruccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> l = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new Bloque(l);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // I ::= S 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion l = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        this.parser.arbol = l;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("I",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= I EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

