
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jun 10 00:04:17 CST 2019
//----------------------------------------------------

package analizadores;

import ast.ArbolAST;
import ast.NodoAST;
import ast.entorno.Simbolo;
import ast.expresiones.*;
import ast.expresiones.operacion.*;
import ast.expresiones.primitivos.*;
import ast.instrucciones.*;
import ast.instrucciones.Printer;
import ast.instrucciones.Seleccion.*;
import ast.instrucciones.ciclos.*;
import ast.instrucciones.ciclos.RetCont.*;
import java.util.LinkedList;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jun 10 00:04:17 CST 2019
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\004\004\000\002\004\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\025\007\000\002\025\011\000\002\025\011\000\002\012" +
    "\003\000\002\012\003\000\002\020\012\000\002\020\011" +
    "\000\002\020\011\000\002\020\010\000\002\021\003\000" +
    "\002\021\004\000\002\024\004\000\002\022\003\000\002" +
    "\022\004\000\002\023\005\000\002\023\004\000\002\013" +
    "\005\000\002\013\003\000\002\014\007\000\002\014\011" +
    "\000\002\011\007\000\002\011\004\000\002\011\004\000" +
    "\002\011\011\000\002\011\012\000\002\015\003\000\002" +
    "\006\007\000\002\006\005\000\002\006\006\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\016\007\000\002\016\007\000\002\016\006\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\005\004\000\002\005" +
    "\004\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\004\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\007\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\005" +
    "\004\000\002\005\006\000\002\005\010\000\002\005\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\004\005\006\001\002\000\004\002\311\001" +
    "\002\000\004\002\000\001\002\000\056\005\006\007\037" +
    "\011\030\012\036\013\031\014\025\015\022\024\020\047" +
    "\024\050\011\051\021\052\013\053\007\056\040\060\042" +
    "\061\050\062\014\067\045\070\016\072\035\073\010\074" +
    "\047\001\002\000\004\007\307\001\002\000\004\025\303" +
    "\001\002\000\004\010\302\001\002\000\064\005\ufff2\006" +
    "\ufff2\007\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2" +
    "\024\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2\053\ufff2\056" +
    "\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2\064\ufff2\067\ufff2" +
    "\070\ufff2\072\ufff2\073\ufff2\074\ufff2\001\002\000\004\007" +
    "\300\001\002\000\004\025\253\001\002\000\004\007\246" +
    "\001\002\000\004\025\242\001\002\000\064\005\ufffb\006" +
    "\ufffb\007\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb" +
    "\024\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb\056" +
    "\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb\064\ufffb\067\ufffb" +
    "\070\ufffb\072\ufffb\073\ufffb\074\ufffb\001\002\000\004\025" +
    "\237\001\002\000\004\010\236\001\002\000\004\007\uffce" +
    "\001\002\000\064\005\ufffd\006\ufffd\007\ufffd\011\ufffd\012" +
    "\ufffd\013\ufffd\014\ufffd\015\ufffd\024\ufffd\047\ufffd\050\ufffd" +
    "\051\ufffd\052\ufffd\053\ufffd\056\ufffd\060\ufffd\061\ufffd\062" +
    "\ufffd\063\ufffd\064\ufffd\067\ufffd\070\ufffd\072\ufffd\073\ufffd" +
    "\074\ufffd\001\002\000\004\025\232\001\002\000\004\007" +
    "\uffcd\001\002\000\064\005\ufff7\006\ufff7\007\ufff7\011\ufff7" +
    "\012\ufff7\013\ufff7\014\ufff7\015\ufff7\024\ufff7\047\ufff7\050" +
    "\ufff7\051\ufff7\052\ufff7\053\ufff7\056\ufff7\060\ufff7\061\ufff7" +
    "\062\ufff7\063\ufff7\064\ufff7\067\ufff7\070\ufff7\072\ufff7\073" +
    "\ufff7\074\ufff7\001\002\000\066\005\uffe4\006\uffe4\007\uffe4" +
    "\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\024\uffe4\047" +
    "\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\056\uffe4\057\223" +
    "\060\uffe4\061\uffe4\062\uffe4\063\uffe4\064\uffe4\067\uffe4\070" +
    "\uffe4\072\uffe4\073\uffe4\074\uffe4\001\002\000\004\007\uffd1" +
    "\001\002\000\004\007\uffcf\001\002\000\064\005\ufffc\006" +
    "\ufffc\007\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc" +
    "\024\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\056" +
    "\ufffc\060\ufffc\061\ufffc\062\ufffc\063\ufffc\064\ufffc\067\ufffc" +
    "\070\ufffc\072\ufffc\073\ufffc\074\ufffc\001\002\000\064\005" +
    "\ufff8\006\ufff8\007\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8" +
    "\015\ufff8\024\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053" +
    "\ufff8\056\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8\064\ufff8" +
    "\067\ufff8\070\ufff8\072\ufff8\073\ufff8\074\ufff8\001\002\000" +
    "\060\005\006\006\222\007\037\011\030\012\036\013\031" +
    "\014\025\015\022\024\020\047\024\050\011\051\021\052" +
    "\013\053\007\056\040\060\042\061\050\062\014\067\045" +
    "\070\016\072\035\073\010\074\047\001\002\000\004\025" +
    "\213\001\002\000\004\007\uffd0\001\002\000\010\004\160" +
    "\052\207\053\210\001\002\000\004\025\203\001\002\000" +
    "\064\005\ufff6\006\ufff6\007\ufff6\011\ufff6\012\ufff6\013\ufff6" +
    "\014\ufff6\015\ufff6\024\ufff6\047\ufff6\050\ufff6\051\ufff6\052" +
    "\ufff6\053\ufff6\056\ufff6\060\ufff6\061\ufff6\062\ufff6\063\ufff6" +
    "\064\ufff6\067\ufff6\070\ufff6\072\ufff6\073\ufff6\074\ufff6\001" +
    "\002\000\004\005\006\001\002\000\064\005\ufffa\006\ufffa" +
    "\007\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\024" +
    "\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa\056\ufffa" +
    "\060\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa\067\ufffa\070" +
    "\ufffa\072\ufffa\073\ufffa\074\ufffa\001\002\000\064\005\ufff9" +
    "\006\ufff9\007\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015" +
    "\ufff9\024\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9" +
    "\056\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9\067" +
    "\ufff9\070\ufff9\072\ufff9\073\ufff9\074\ufff9\001\002\000\004" +
    "\025\167\001\002\000\064\005\ufff1\006\ufff1\007\ufff1\011" +
    "\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\024\ufff1\047\ufff1" +
    "\050\ufff1\051\ufff1\052\ufff1\053\ufff1\056\ufff1\060\ufff1\061" +
    "\ufff1\062\ufff1\063\ufff1\064\ufff1\067\ufff1\070\ufff1\072\ufff1" +
    "\073\ufff1\074\ufff1\001\002\000\004\025\163\001\002\000" +
    "\004\025\051\001\002\000\016\007\053\011\030\012\036" +
    "\013\031\014\025\015\022\001\002\000\040\007\uffdc\016" +
    "\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\025\uffdc" +
    "\027\uffdc\031\uffdc\036\uffdc\052\uffdc\053\uffdc\067\uffdc\070" +
    "\uffdc\001\002\000\004\004\160\001\002\000\040\007\056" +
    "\016\062\017\055\020\057\021\061\022\071\023\064\025" +
    "\063\027\073\031\066\036\067\052\072\053\070\067\060" +
    "\070\065\001\002\000\046\010\uffb8\026\uffb8\027\uffb8\030" +
    "\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\037\uffb8" +
    "\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046" +
    "\uffb8\071\uffb8\001\002\000\052\010\uffb6\026\uffb6\027\uffb6" +
    "\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\037" +
    "\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6" +
    "\046\uffb6\052\156\053\157\071\uffb6\001\002\000\046\010" +
    "\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7" +
    "\034\uffb7\035\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043" +
    "\uffb7\044\uffb7\045\uffb7\046\uffb7\071\uffb7\001\002\000\004" +
    "\025\151\001\002\000\046\010\uffb9\026\uffb9\027\uffb9\030" +
    "\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\037\uffb9" +
    "\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046" +
    "\uffb9\071\uffb9\001\002\000\046\010\uffbc\026\uffbc\027\uffbc" +
    "\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\037" +
    "\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc" +
    "\046\uffbc\071\uffbc\001\002\000\040\007\056\016\062\017" +
    "\055\020\057\021\061\022\071\023\064\025\063\027\073" +
    "\031\066\036\067\052\072\053\070\067\060\070\065\001" +
    "\002\000\046\010\uffba\026\uffba\027\uffba\030\uffba\031\uffba" +
    "\032\uffba\033\uffba\034\uffba\035\uffba\037\uffba\040\uffba\041" +
    "\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba\071\uffba" +
    "\001\002\000\004\025\144\001\002\000\040\007\056\016" +
    "\062\017\055\020\057\021\061\022\071\023\064\025\063" +
    "\027\073\031\066\036\067\052\072\053\070\067\060\070" +
    "\065\001\002\000\040\007\056\016\062\017\055\020\057" +
    "\021\061\022\071\023\064\025\063\027\073\031\066\036" +
    "\067\052\072\053\070\067\060\070\065\001\002\000\004" +
    "\007\141\001\002\000\046\010\uffbb\026\uffbb\027\uffbb\030" +
    "\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\037\uffbb" +
    "\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046" +
    "\uffbb\071\uffbb\001\002\000\004\007\140\001\002\000\040" +
    "\007\056\016\062\017\055\020\057\021\061\022\071\023" +
    "\064\025\063\027\073\031\066\036\067\052\072\053\070" +
    "\067\060\070\065\001\002\000\040\010\104\027\111\030" +
    "\107\031\077\032\112\033\075\034\102\035\076\037\101" +
    "\040\113\041\100\042\106\043\110\044\103\045\105\001" +
    "\002\000\040\007\056\016\062\017\055\020\057\021\061" +
    "\022\071\023\064\025\063\027\073\031\066\036\067\052" +
    "\072\053\070\067\060\070\065\001\002\000\040\007\056" +
    "\016\062\017\055\020\057\021\061\022\071\023\064\025" +
    "\063\027\073\031\066\036\067\052\072\053\070\067\060" +
    "\070\065\001\002\000\040\007\056\016\062\017\055\020" +
    "\057\021\061\022\071\023\064\025\063\027\073\031\066" +
    "\036\067\052\072\053\070\067\060\070\065\001\002\000" +
    "\040\007\056\016\062\017\055\020\057\021\061\022\071" +
    "\023\064\025\063\027\073\031\066\036\067\052\072\053" +
    "\070\067\060\070\065\001\002\000\040\007\056\016\062" +
    "\017\055\020\057\021\061\022\071\023\064\025\063\027" +
    "\073\031\066\036\067\052\072\053\070\067\060\070\065" +
    "\001\002\000\040\007\056\016\062\017\055\020\057\021" +
    "\061\022\071\023\064\025\063\027\073\031\066\036\067" +
    "\052\072\053\070\067\060\070\065\001\002\000\040\007" +
    "\056\016\062\017\055\020\057\021\061\022\071\023\064" +
    "\025\063\027\073\031\066\036\067\052\072\053\070\067" +
    "\060\070\065\001\002\000\040\007\056\016\062\017\055" +
    "\020\057\021\061\022\071\023\064\025\063\027\073\031" +
    "\066\036\067\052\072\053\070\067\060\070\065\001\002" +
    "\000\040\007\056\016\062\017\055\020\057\021\061\022" +
    "\071\023\064\025\063\027\073\031\066\036\067\052\072" +
    "\053\070\067\060\070\065\001\002\000\040\007\056\016" +
    "\062\017\055\020\057\021\061\022\071\023\064\025\063" +
    "\027\073\031\066\036\067\052\072\053\070\067\060\070" +
    "\065\001\002\000\040\007\056\016\062\017\055\020\057" +
    "\021\061\022\071\023\064\025\063\027\073\031\066\036" +
    "\067\052\072\053\070\067\060\070\065\001\002\000\040" +
    "\007\056\016\062\017\055\020\057\021\061\022\071\023" +
    "\064\025\063\027\073\031\066\036\067\052\072\053\070" +
    "\067\060\070\065\001\002\000\040\007\056\016\062\017" +
    "\055\020\057\021\061\022\071\023\064\025\063\027\073" +
    "\031\066\036\067\052\072\053\070\067\060\070\065\001" +
    "\002\000\040\007\056\016\062\017\055\020\057\021\061" +
    "\022\071\023\064\025\063\027\073\031\066\036\067\052" +
    "\072\053\070\067\060\070\065\001\002\000\040\007\056" +
    "\016\062\017\055\020\057\021\061\022\071\023\064\025" +
    "\063\027\073\031\066\036\067\052\072\053\070\067\060" +
    "\070\065\001\002\000\046\010\uffc5\026\uffc5\027\111\030" +
    "\107\031\077\032\112\033\075\034\uffc5\035\uffc5\037\uffc5" +
    "\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046" +
    "\uffc5\071\uffc5\001\002\000\046\010\uffbf\026\uffbf\027\uffbf" +
    "\030\uffbf\031\uffbf\032\uffbf\033\075\034\uffbf\035\uffbf\037" +
    "\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf" +
    "\046\uffbf\071\uffbf\001\002\000\046\010\uffc1\026\uffc1\027" +
    "\uffc1\030\107\031\uffc1\032\112\033\075\034\uffc1\035\uffc1" +
    "\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045" +
    "\uffc1\046\uffc1\071\uffc1\001\002\000\046\010\uffc3\026\uffc3" +
    "\027\111\030\107\031\077\032\112\033\075\034\uffc3\035" +
    "\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3" +
    "\045\uffc3\046\uffc3\071\uffc3\001\002\000\046\010\uffc0\026" +
    "\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\075\034\uffc0" +
    "\035\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044" +
    "\uffc0\045\uffc0\046\uffc0\071\uffc0\001\002\000\046\010\uffc2" +
    "\026\uffc2\027\111\030\107\031\077\032\112\033\075\034" +
    "\uffc2\035\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2" +
    "\044\uffc2\045\uffc2\046\uffc2\071\uffc2\001\002\000\040\027" +
    "\111\030\107\031\077\032\112\033\075\034\102\035\076" +
    "\037\101\040\113\041\100\042\106\043\110\044\103\045" +
    "\105\046\123\001\002\000\040\007\056\016\062\017\055" +
    "\020\057\021\061\022\071\023\064\025\063\027\073\031" +
    "\066\036\067\052\072\053\070\067\060\070\065\001\002" +
    "\000\046\010\uffb5\026\uffb5\027\111\030\107\031\077\032" +
    "\112\033\075\034\102\035\076\037\101\040\113\041\100" +
    "\042\106\043\110\044\103\045\105\046\uffb5\071\uffb5\001" +
    "\002\000\040\026\126\027\111\030\107\031\077\032\112" +
    "\033\075\034\102\035\076\037\101\040\113\041\100\042" +
    "\106\043\110\044\103\045\105\001\002\000\004\005\006" +
    "\001\002\000\064\005\uffdd\006\uffdd\007\uffdd\011\uffdd\012" +
    "\uffdd\013\uffdd\014\uffdd\015\uffdd\024\uffdd\047\uffdd\050\uffdd" +
    "\051\uffdd\052\uffdd\053\uffdd\056\uffdd\060\uffdd\061\uffdd\062" +
    "\uffdd\063\uffdd\064\uffdd\067\uffdd\070\uffdd\072\uffdd\073\uffdd" +
    "\074\uffdd\001\002\000\046\010\uffc7\026\uffc7\027\111\030" +
    "\107\031\077\032\112\033\075\034\uffc7\035\uffc7\037\uffc7" +
    "\040\113\041\100\042\106\043\110\044\uffc7\045\uffc7\046" +
    "\uffc7\071\uffc7\001\002\000\046\010\uffca\026\uffca\027\111" +
    "\030\107\031\077\032\112\033\075\034\uffca\035\076\037" +
    "\101\040\113\041\100\042\106\043\110\044\103\045\uffca" +
    "\046\uffca\071\uffca\001\002\000\046\010\uffc8\026\uffc8\027" +
    "\111\030\107\031\077\032\112\033\075\034\uffc8\035\uffc8" +
    "\037\uffc8\040\113\041\100\042\106\043\110\044\uffc8\045" +
    "\uffc8\046\uffc8\071\uffc8\001\002\000\046\010\uffc4\026\uffc4" +
    "\027\111\030\107\031\077\032\112\033\075\034\uffc4\035" +
    "\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4" +
    "\045\uffc4\046\uffc4\071\uffc4\001\002\000\046\010\uffbd\026" +
    "\uffbd\027\uffbd\030\107\031\uffbd\032\112\033\075\034\uffbd" +
    "\035\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044" +
    "\uffbd\045\uffbd\046\uffbd\071\uffbd\001\002\000\046\010\uffc9" +
    "\026\uffc9\027\111\030\107\031\077\032\112\033\075\034" +
    "\uffc9\035\uffc9\037\101\040\113\041\100\042\106\043\110" +
    "\044\103\045\uffc9\046\uffc9\071\uffc9\001\002\000\046\010" +
    "\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe" +
    "\034\uffbe\035\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043" +
    "\uffbe\044\uffbe\045\uffbe\046\uffbe\071\uffbe\001\002\000\046" +
    "\010\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033" +
    "\uffcb\034\uffcb\035\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb" +
    "\043\uffcb\044\uffcb\045\uffcb\046\uffcb\071\uffcb\001\002\000" +
    "\046\010\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2" +
    "\033\uffb2\034\uffb2\035\uffb2\037\uffb2\040\uffb2\041\uffb2\042" +
    "\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\071\uffb2\001\002" +
    "\000\046\010\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032" +
    "\uffb1\033\uffb1\034\uffb1\035\uffb1\037\uffb1\040\uffb1\041\uffb1" +
    "\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\071\uffb1\001" +
    "\002\000\046\010\uffc6\026\uffc6\027\111\030\107\031\077" +
    "\032\112\033\075\034\uffc6\035\uffc6\037\101\040\113\041" +
    "\100\042\106\043\110\044\103\045\uffc6\046\uffc6\071\uffc6" +
    "\001\002\000\046\010\uffcc\026\uffcc\027\uffcc\030\uffcc\031" +
    "\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\037\uffcc\040\uffcc" +
    "\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\071" +
    "\uffcc\001\002\000\040\007\056\016\062\017\055\020\057" +
    "\021\061\022\071\023\064\025\063\027\073\031\066\036" +
    "\067\052\072\053\070\067\060\070\065\001\002\000\040" +
    "\026\146\027\111\030\107\031\077\032\112\033\075\034" +
    "\102\035\076\037\101\040\113\041\100\042\106\043\110" +
    "\044\103\045\105\001\002\000\046\010\uffb0\026\uffb0\027" +
    "\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0" +
    "\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045" +
    "\uffb0\046\uffb0\071\uffb0\001\002\000\040\026\150\027\111" +
    "\030\107\031\077\032\112\033\075\034\102\035\076\037" +
    "\101\040\113\041\100\042\106\043\110\044\103\045\105" +
    "\001\002\000\046\010\uffae\026\uffae\027\uffae\030\uffae\031" +
    "\uffae\032\uffae\033\uffae\034\uffae\035\uffae\037\uffae\040\uffae" +
    "\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae\071" +
    "\uffae\001\002\000\040\007\056\016\062\017\055\020\057" +
    "\021\061\022\071\023\064\025\063\027\073\031\066\036" +
    "\067\052\072\053\070\067\060\070\065\001\002\000\040" +
    "\027\111\030\107\031\077\032\112\033\075\034\102\035" +
    "\076\037\101\040\113\041\100\042\106\043\110\044\103" +
    "\045\105\071\153\001\002\000\040\007\056\016\062\017" +
    "\055\020\057\021\061\022\071\023\064\025\063\027\073" +
    "\031\066\036\067\052\072\053\070\067\060\070\065\001" +
    "\002\000\040\026\155\027\111\030\107\031\077\032\112" +
    "\033\075\034\102\035\076\037\101\040\113\041\100\042" +
    "\106\043\110\044\103\045\105\001\002\000\046\010\uffaf" +
    "\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034" +
    "\uffaf\035\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf" +
    "\044\uffaf\045\uffaf\046\uffaf\071\uffaf\001\002\000\046\010" +
    "\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4" +
    "\034\uffb4\035\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043" +
    "\uffb4\044\uffb4\045\uffb4\046\uffb4\071\uffb4\001\002\000\046" +
    "\010\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033" +
    "\uffb3\034\uffb3\035\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3" +
    "\043\uffb3\044\uffb3\045\uffb3\046\uffb3\071\uffb3\001\002\000" +
    "\040\007\056\016\062\017\055\020\057\021\061\022\071" +
    "\023\064\025\063\027\073\031\066\036\067\052\072\053" +
    "\070\067\060\070\065\001\002\000\040\010\162\027\111" +
    "\030\107\031\077\032\112\033\075\034\102\035\076\037" +
    "\101\040\113\041\100\042\106\043\110\044\103\045\105" +
    "\001\002\000\110\005\uffd9\006\uffd9\007\uffd9\011\uffd9\012" +
    "\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9" +
    "\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\027\uffd9\031" +
    "\uffd9\036\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9" +
    "\056\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9\067" +
    "\uffd9\070\uffd9\072\uffd9\073\uffd9\074\uffd9\001\002\000\040" +
    "\007\056\016\062\017\055\020\057\021\061\022\071\023" +
    "\064\025\063\027\073\031\066\036\067\052\072\053\070" +
    "\067\060\070\065\001\002\000\040\026\165\027\111\030" +
    "\107\031\077\032\112\033\075\034\102\035\076\037\101" +
    "\040\113\041\100\042\106\043\110\044\103\045\105\001" +
    "\002\000\004\010\166\001\002\000\064\005\uffd3\006\uffd3" +
    "\007\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\024" +
    "\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\056\uffd3" +
    "\060\uffd3\061\uffd3\062\uffd3\063\uffd3\064\uffd3\067\uffd3\070" +
    "\uffd3\072\uffd3\073\uffd3\074\uffd3\001\002\000\040\007\056" +
    "\016\062\017\055\020\057\021\061\022\071\023\064\025" +
    "\063\027\073\031\066\036\067\052\072\053\070\067\060" +
    "\070\065\001\002\000\040\027\111\030\107\031\077\032" +
    "\112\033\075\034\102\035\076\037\101\040\113\041\100" +
    "\042\106\043\110\044\103\045\105\071\171\001\002\000" +
    "\040\007\056\016\062\017\055\020\057\021\061\022\071" +
    "\023\064\025\063\027\073\031\066\036\067\052\072\053" +
    "\070\067\060\070\065\001\002\000\040\026\173\027\111" +
    "\030\107\031\077\032\112\033\075\034\102\035\076\037" +
    "\101\040\113\041\100\042\106\043\110\044\103\045\105" +
    "\001\002\000\004\010\174\001\002\000\064\005\ufff4\006" +
    "\ufff4\007\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4" +
    "\024\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4\056" +
    "\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4\067\ufff4" +
    "\070\ufff4\072\ufff4\073\ufff4\074\ufff4\001\002\000\004\047" +
    "\176\001\002\000\004\025\177\001\002\000\040\007\056" +
    "\016\062\017\055\020\057\021\061\022\071\023\064\025" +
    "\063\027\073\031\066\036\067\052\072\053\070\067\060" +
    "\070\065\001\002\000\040\026\201\027\111\030\107\031" +
    "\077\032\112\033\075\034\102\035\076\037\101\040\113" +
    "\041\100\042\106\043\110\044\103\045\105\001\002\000" +
    "\004\010\202\001\002\000\064\005\uffde\006\uffde\007\uffde" +
    "\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde\024\uffde\047" +
    "\uffde\050\uffde\051\uffde\052\uffde\053\uffde\056\uffde\060\uffde" +
    "\061\uffde\062\uffde\063\uffde\064\uffde\067\uffde\070\uffde\072" +
    "\uffde\073\uffde\074\uffde\001\002\000\040\007\056\016\062" +
    "\017\055\020\057\021\061\022\071\023\064\025\063\027" +
    "\073\031\066\036\067\052\072\053\070\067\060\070\065" +
    "\001\002\000\040\026\205\027\111\030\107\031\077\032" +
    "\112\033\075\034\102\035\076\037\101\040\113\041\100" +
    "\042\106\043\110\044\103\045\105\001\002\000\004\005" +
    "\006\001\002\000\066\005\uffe3\006\uffe3\007\uffe3\011\uffe3" +
    "\012\uffe3\013\uffe3\014\uffe3\015\uffe3\024\uffe3\047\uffe3\050" +
    "\uffe3\051\uffe3\052\uffe3\053\uffe3\056\uffe3\057\uffe3\060\uffe3" +
    "\061\uffe3\062\uffe3\063\uffe3\064\uffe3\067\uffe3\070\uffe3\072" +
    "\uffe3\073\uffe3\074\uffe3\001\002\000\004\010\212\001\002" +
    "\000\004\010\211\001\002\000\064\005\uffd7\006\uffd7\007" +
    "\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\024\uffd7" +
    "\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\056\uffd7\060" +
    "\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7\067\uffd7\070\uffd7" +
    "\072\uffd7\073\uffd7\074\uffd7\001\002\000\064\005\uffd8\006" +
    "\uffd8\007\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8" +
    "\024\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\056" +
    "\uffd8\060\uffd8\061\uffd8\062\uffd8\063\uffd8\064\uffd8\067\uffd8" +
    "\070\uffd8\072\uffd8\073\uffd8\074\uffd8\001\002\000\040\007" +
    "\056\016\062\017\055\020\057\021\061\022\071\023\064" +
    "\025\063\027\073\031\066\036\067\052\072\053\070\067" +
    "\060\070\065\001\002\000\040\027\111\030\107\031\077" +
    "\032\112\033\075\034\102\035\076\037\101\040\113\041" +
    "\100\042\106\043\110\044\103\045\105\071\215\001\002" +
    "\000\040\007\056\016\062\017\055\020\057\021\061\022" +
    "\071\023\064\025\063\027\073\031\066\036\067\052\072" +
    "\053\070\067\060\070\065\001\002\000\040\026\217\027" +
    "\111\030\107\031\077\032\112\033\075\034\102\035\076" +
    "\037\101\040\113\041\100\042\106\043\110\044\103\045" +
    "\105\001\002\000\004\010\220\001\002\000\064\005\ufff3" +
    "\006\ufff3\007\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015" +
    "\ufff3\024\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3" +
    "\056\ufff3\060\ufff3\061\ufff3\062\ufff3\063\ufff3\064\ufff3\067" +
    "\ufff3\070\ufff3\072\ufff3\073\ufff3\074\ufff3\001\002\000\064" +
    "\005\ufffe\006\ufffe\007\ufffe\011\ufffe\012\ufffe\013\ufffe\014" +
    "\ufffe\015\ufffe\024\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe" +
    "\053\ufffe\056\ufffe\060\ufffe\061\ufffe\062\ufffe\063\ufffe\064" +
    "\ufffe\067\ufffe\070\ufffe\072\ufffe\073\ufffe\074\ufffe\001\002" +
    "\000\070\002\uffff\005\uffff\006\uffff\007\uffff\011\uffff\012" +
    "\uffff\013\uffff\014\uffff\015\uffff\024\uffff\047\uffff\050\uffff" +
    "\051\uffff\052\uffff\053\uffff\056\uffff\057\uffff\060\uffff\061" +
    "\uffff\062\uffff\063\uffff\064\uffff\067\uffff\070\uffff\072\uffff" +
    "\073\uffff\074\uffff\001\002\000\006\005\006\056\224\001" +
    "\002\000\004\025\226\001\002\000\064\005\uffe5\006\uffe5" +
    "\007\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\024" +
    "\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\056\uffe5" +
    "\060\uffe5\061\uffe5\062\uffe5\063\uffe5\064\uffe5\067\uffe5\070" +
    "\uffe5\072\uffe5\073\uffe5\074\uffe5\001\002\000\040\007\056" +
    "\016\062\017\055\020\057\021\061\022\071\023\064\025" +
    "\063\027\073\031\066\036\067\052\072\053\070\067\060" +
    "\070\065\001\002\000\040\026\230\027\111\030\107\031" +
    "\077\032\112\033\075\034\102\035\076\037\101\040\113" +
    "\041\100\042\106\043\110\044\103\045\105\001\002\000" +
    "\004\005\006\001\002\000\066\005\uffe2\006\uffe2\007\uffe2" +
    "\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\024\uffe2\047" +
    "\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\056\uffe2\057\uffe2" +
    "\060\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2\067\uffe2\070" +
    "\uffe2\072\uffe2\073\uffe2\074\uffe2\001\002\000\040\007\056" +
    "\016\062\017\055\020\057\021\061\022\071\023\064\025" +
    "\063\027\073\031\066\036\067\052\072\053\070\067\060" +
    "\070\065\001\002\000\040\026\234\027\111\030\107\031" +
    "\077\032\112\033\075\034\102\035\076\037\101\040\113" +
    "\041\100\042\106\043\110\044\103\045\105\001\002\000" +
    "\004\005\006\001\002\000\064\005\uffe1\006\uffe1\007\uffe1" +
    "\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\024\uffe1\047" +
    "\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\056\uffe1\060\uffe1" +
    "\061\uffe1\062\uffe1\063\uffe1\064\uffe1\067\uffe1\070\uffe1\072" +
    "\uffe1\073\uffe1\074\uffe1\001\002\000\064\005\uffdf\006\uffdf" +
    "\007\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\024" +
    "\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\056\uffdf" +
    "\060\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf\067\uffdf\070" +
    "\uffdf\072\uffdf\073\uffdf\074\uffdf\001\002\000\004\026\240" +
    "\001\002\000\004\010\241\001\002\000\064\005\uffd2\006" +
    "\uffd2\007\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2" +
    "\024\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\056" +
    "\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2\067\uffd2" +
    "\070\uffd2\072\uffd2\073\uffd2\074\uffd2\001\002\000\040\007" +
    "\056\016\062\017\055\020\057\021\061\022\071\023\064" +
    "\025\063\027\073\031\066\036\067\052\072\053\070\067" +
    "\060\070\065\001\002\000\040\026\244\027\111\030\107" +
    "\031\077\032\112\033\075\034\102\035\076\037\101\040" +
    "\113\041\100\042\106\043\110\044\103\045\105\001\002" +
    "\000\004\010\245\001\002\000\064\005\ufff5\006\ufff5\007" +
    "\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\024\ufff5" +
    "\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5\056\ufff5\060" +
    "\ufff5\061\ufff5\062\ufff5\063\ufff5\064\ufff5\067\ufff5\070\ufff5" +
    "\072\ufff5\073\ufff5\074\ufff5\001\002\000\006\004\247\010" +
    "\250\001\002\000\040\007\056\016\062\017\055\020\057" +
    "\021\061\022\071\023\064\025\063\027\073\031\066\036" +
    "\067\052\072\053\070\067\060\070\065\001\002\000\110" +
    "\005\uffda\006\uffda\007\uffda\011\uffda\012\uffda\013\uffda\014" +
    "\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda" +
    "\023\uffda\024\uffda\025\uffda\027\uffda\031\uffda\036\uffda\047" +
    "\uffda\050\uffda\051\uffda\052\uffda\053\uffda\056\uffda\060\uffda" +
    "\061\uffda\062\uffda\063\uffda\064\uffda\067\uffda\070\uffda\072" +
    "\uffda\073\uffda\074\uffda\001\002\000\040\010\252\027\111" +
    "\030\107\031\077\032\112\033\075\034\102\035\076\037" +
    "\101\040\113\041\100\042\106\043\110\044\103\045\105" +
    "\001\002\000\110\005\uffdb\006\uffdb\007\uffdb\011\uffdb\012" +
    "\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb" +
    "\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\027\uffdb\031" +
    "\uffdb\036\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb" +
    "\056\uffdb\060\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb\067" +
    "\uffdb\070\uffdb\072\uffdb\073\uffdb\074\uffdb\001\002\000\040" +
    "\007\056\016\062\017\055\020\057\021\061\022\071\023" +
    "\064\025\063\027\073\031\066\036\067\052\072\053\070" +
    "\067\060\070\065\001\002\000\040\026\255\027\111\030" +
    "\107\031\077\032\112\033\075\034\102\035\076\037\101" +
    "\040\113\041\100\042\106\043\110\044\103\045\105\001" +
    "\002\000\004\005\256\001\002\000\010\006\262\063\265" +
    "\064\264\001\002\000\010\006\276\063\265\064\264\001" +
    "\002\000\010\006\uffec\063\uffec\064\uffec\001\002\000\064" +
    "\005\006\006\272\007\037\011\030\012\036\013\031\014" +
    "\025\015\022\024\020\047\024\050\011\051\021\052\013" +
    "\053\007\056\040\060\042\061\050\062\014\063\265\064" +
    "\264\067\045\070\016\072\035\073\010\074\047\001\002" +
    "\000\064\005\uffed\006\uffed\007\uffed\011\uffed\012\uffed\013" +
    "\uffed\014\uffed\015\uffed\024\uffed\047\uffed\050\uffed\051\uffed" +
    "\052\uffed\053\uffed\056\uffed\060\uffed\061\uffed\062\uffed\063" +
    "\uffed\064\uffed\067\uffed\070\uffed\072\uffed\073\uffed\074\uffed" +
    "\001\002\000\064\005\uffe9\006\uffe9\007\uffe9\011\uffe9\012" +
    "\uffe9\013\uffe9\014\uffe9\015\uffe9\024\uffe9\047\uffe9\050\uffe9" +
    "\051\uffe9\052\uffe9\053\uffe9\056\uffe9\060\uffe9\061\uffe9\062" +
    "\uffe9\063\uffe9\064\uffe9\067\uffe9\070\uffe9\072\uffe9\073\uffe9" +
    "\074\uffe9\001\002\000\004\046\270\001\002\000\040\007" +
    "\056\016\062\017\055\020\057\021\061\022\071\023\064" +
    "\025\063\027\073\031\066\036\067\052\072\053\070\067" +
    "\060\070\065\001\002\000\040\027\111\030\107\031\077" +
    "\032\112\033\075\034\102\035\076\037\101\040\113\041" +
    "\100\042\106\043\110\044\103\045\105\046\267\001\002" +
    "\000\064\005\uffe7\006\uffe7\007\uffe7\011\uffe7\012\uffe7\013" +
    "\uffe7\014\uffe7\015\uffe7\024\uffe7\047\uffe7\050\uffe7\051\uffe7" +
    "\052\uffe7\053\uffe7\056\uffe7\060\uffe7\061\uffe7\062\uffe7\063" +
    "\uffe7\064\uffe7\067\uffe7\070\uffe7\072\uffe7\073\uffe7\074\uffe7" +
    "\001\002\000\064\005\uffe6\006\uffe6\007\uffe6\011\uffe6\012" +
    "\uffe6\013\uffe6\014\uffe6\015\uffe6\024\uffe6\047\uffe6\050\uffe6" +
    "\051\uffe6\052\uffe6\053\uffe6\056\uffe6\060\uffe6\061\uffe6\062" +
    "\uffe6\063\uffe6\064\uffe6\067\uffe6\070\uffe6\072\uffe6\073\uffe6" +
    "\074\uffe6\001\002\000\064\005\uffe8\006\uffe8\007\uffe8\011" +
    "\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\024\uffe8\047\uffe8" +
    "\050\uffe8\051\uffe8\052\uffe8\053\uffe8\056\uffe8\060\uffe8\061" +
    "\uffe8\062\uffe8\063\uffe8\064\uffe8\067\uffe8\070\uffe8\072\uffe8" +
    "\073\uffe8\074\uffe8\001\002\000\064\005\uffee\006\uffee\007" +
    "\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee\024\uffee" +
    "\047\uffee\050\uffee\051\uffee\052\uffee\053\uffee\056\uffee\060" +
    "\uffee\061\uffee\062\uffee\063\uffee\064\uffee\067\uffee\070\uffee" +
    "\072\uffee\073\uffee\074\uffee\001\002\000\064\005\006\006" +
    "\uffea\007\037\011\030\012\036\013\031\014\025\015\022" +
    "\024\020\047\024\050\011\051\021\052\013\053\007\056" +
    "\040\060\042\061\050\062\014\063\uffea\064\uffea\067\045" +
    "\070\016\072\035\073\010\074\047\001\002\000\010\006" +
    "\uffeb\063\uffeb\064\uffeb\001\002\000\064\005\006\006\277" +
    "\007\037\011\030\012\036\013\031\014\025\015\022\024" +
    "\020\047\024\050\011\051\021\052\013\053\007\056\040" +
    "\060\042\061\050\062\014\063\265\064\264\067\045\070" +
    "\016\072\035\073\010\074\047\001\002\000\064\005\uffef" +
    "\006\uffef\007\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015" +
    "\uffef\024\uffef\047\uffef\050\uffef\051\uffef\052\uffef\053\uffef" +
    "\056\uffef\060\uffef\061\uffef\062\uffef\063\uffef\064\uffef\067" +
    "\uffef\070\uffef\072\uffef\073\uffef\074\uffef\001\002\000\064" +
    "\005\ufff0\006\ufff0\007\ufff0\011\ufff0\012\ufff0\013\ufff0\014" +
    "\ufff0\015\ufff0\024\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0" +
    "\053\ufff0\056\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0\064" +
    "\ufff0\067\ufff0\070\ufff0\072\ufff0\073\ufff0\074\ufff0\001\002" +
    "\000\004\010\301\001\002\000\064\005\uffd6\006\uffd6\007" +
    "\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\024\uffd6" +
    "\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\056\uffd6\060" +
    "\uffd6\061\uffd6\062\uffd6\063\uffd6\064\uffd6\067\uffd6\070\uffd6" +
    "\072\uffd6\073\uffd6\074\uffd6\001\002\000\064\005\uffe0\006" +
    "\uffe0\007\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0" +
    "\024\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\056" +
    "\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\067\uffe0" +
    "\070\uffe0\072\uffe0\073\uffe0\074\uffe0\001\002\000\040\007" +
    "\056\016\062\017\055\020\057\021\061\022\071\023\064" +
    "\025\063\027\073\031\066\036\067\052\072\053\070\067" +
    "\060\070\065\001\002\000\040\026\305\027\111\030\107" +
    "\031\077\032\112\033\075\034\102\035\076\037\101\040" +
    "\113\041\100\042\106\043\110\044\103\045\105\001\002" +
    "\000\004\010\306\001\002\000\064\005\uffd4\006\uffd4\007" +
    "\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\024\uffd4" +
    "\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\056\uffd4\060" +
    "\uffd4\061\uffd4\062\uffd4\063\uffd4\064\uffd4\067\uffd4\070\uffd4" +
    "\072\uffd4\073\uffd4\074\uffd4\001\002\000\004\010\310\001" +
    "\002\000\064\005\uffd5\006\uffd5\007\uffd5\011\uffd5\012\uffd5" +
    "\013\uffd5\014\uffd5\015\uffd5\024\uffd5\047\uffd5\050\uffd5\051" +
    "\uffd5\052\uffd5\053\uffd5\056\uffd5\060\uffd5\061\uffd5\062\uffd5" +
    "\063\uffd5\064\uffd5\067\uffd5\070\uffd5\072\uffd5\073\uffd5\074" +
    "\uffd5\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\003\016\004\033\006\031" +
    "\007\014\010\022\011\042\012\043\013\011\014\026\016" +
    "\032\017\025\020\045\025\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\003\016\006\031\007\014\010\220\011" +
    "\042\012\043\013\011\014\026\016\032\017\025\020\045" +
    "\025\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\174\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\051\007\014\015\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\142\001\001\000\004\005\141\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\136\001\001\000\002\001\001\000\004\005\135\001\001" +
    "\000\004\005\134\001\001\000\004\005\133\001\001\000" +
    "\004\005\132\001\001\000\004\005\131\001\001\000\004" +
    "\005\130\001\001\000\004\005\127\001\001\000\004\005" +
    "\124\001\001\000\004\005\121\001\001\000\004\005\120" +
    "\001\001\000\004\005\117\001\001\000\004\005\116\001" +
    "\001\000\004\005\115\001\001\000\004\005\114\001\001" +
    "\000\004\005\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\144\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\151\001\001\000\002\001\001\000\004\005\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\167\001\001\000\002\001\001\000\004\005\171\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\177\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\203\001\001\000\002\001\001\000\004\003\205" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\213" +
    "\001\001\000\002\001\001\000\004\005\215\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\224\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\226\001\001" +
    "\000\002\001\001\000\004\003\230\001\001\000\002\001" +
    "\001\000\004\005\232\001\001\000\002\001\001\000\004" +
    "\003\234\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\242\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\250\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\253\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\021\256\022\260\023\262\024\257\001\001\000" +
    "\010\022\274\023\262\024\273\001\001\000\002\001\001" +
    "\000\036\003\016\004\272\006\031\007\014\010\022\011" +
    "\042\012\043\013\011\014\026\016\032\017\025\020\045" +
    "\023\270\025\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\265\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\003\016\006\031\007\014" +
    "\010\220\011\042\012\043\013\011\014\026\016\032\017" +
    "\025\020\045\025\040\001\001\000\002\001\001\000\036" +
    "\003\016\004\272\006\031\007\014\010\022\011\042\012" +
    "\043\013\011\014\026\016\032\017\025\020\045\023\270" +
    "\025\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\303\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Instruccion arbol;
    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("Error caracter no esperado");
        System.err.println(s);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {

//Codigo de acciones
      

  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E ::= apar E cpar 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = e;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E ::= write_file apar E coma E cpar 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion ruta = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion contenido = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new EscribirArchivo(ruta, contenido, aleft, aright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E ::= read_file apar E cpar 
            {
              Expresion RESULT =null;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion ruta = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new LeerArchivo(ruta, rutaleft, rutaright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E ::= menosmenos id 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
         RESULT = new OPPreFijo(new Identificador(id, null, idleft, idleft), Operacion.Operador.MENOS, idleft, idright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E ::= masmas id 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new OPPreFijo(new Identificador(id, null, idleft, idleft), Operacion.Operador.MAS, idleft, idright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E ::= id menosmenos 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new OPPostFijo(new Identificador(id, null, idleft, idleft), Operacion.Operador.MENOS, idleft, idright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E ::= id masmas 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new OPPostFijo(new Identificador(id, null, idleft, idleft), Operacion.Operador.MAS, idleft, idright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E ::= E interrogacion E dospuntos E 
            {
              Expresion RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int vddleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int vddright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion vdd = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int fakeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fakeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion fake = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new OpTernario(cond, vdd, fake,condleft, condright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E ::= id 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Identificador(id, new TipoContenedor(Simbolo.Tipo.ID), idleft, idright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E ::= falsee 
            {
              Expresion RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ee = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Booleano(ee,new TipoContenedor(Simbolo.Tipo.BOOLEAN), eeleft, eeright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E ::= truee 
            {
              Expresion RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ee = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Booleano(ee,new TipoContenedor(Simbolo.Tipo.BOOLEAN), eeleft, eeright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E ::= charER 
            {
              Expresion RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ee = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        
        Object ww = ee.substring(1,ee.length()-1);
        RESULT = new Caracter(ww, new TipoContenedor(Simbolo.Tipo.CHAR), eeleft, eeright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E ::= decimal 
            {
              Expresion RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object ee = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Decimal(ee, new TipoContenedor(Simbolo.Tipo.DOUBLE), eeleft, eeright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E ::= entero 
            {
              Expresion RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object ee = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Entero(ee, new TipoContenedor(Simbolo.Tipo.INT), eeleft, eeright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E ::= cadena 
            {
              Expresion RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ee = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Cadena(ee.substring(1,ee.length()-1), new TipoContenedor(Simbolo.Tipo.STRING), eeleft, eeright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E ::= E menos E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Aritmetica(e1, e2, Operacion.Operador.MENOS, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E ::= E potencia E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Aritmetica(e1, e2, Operacion.Operador.POTENCIA, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E ::= E dividir E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Aritmetica(e1, e2, Operacion.Operador.DIVIDIR, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E ::= E por E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Aritmetica(e1, e2, Operacion.Operador.POR, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E ::= E mas E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Aritmetica(e1, e2, Operacion.Operador.MAS, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E ::= E menorigualq E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Relacional(e1, e2, Operacion.Operador.MENORIGUALQ, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E ::= E mayorigualq E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Relacional(e1, e2, Operacion.Operador.MAYORIGUALQ, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E ::= E menorq E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Relacional(e1, e2, Operacion.Operador.MENORQ, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E ::= E mayorq E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Relacional(e1, e2, Operacion.Operador.MAYORQ, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E ::= diferenteunario E 
            {
              Expresion RESULT =null;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Logica(e1, Operacion.Operador.NOT, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E ::= E diferente E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Relacional(e1, e2, Operacion.Operador.DIFERENTE, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E ::= E igualigual E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Relacional(e1, e2, Operacion.Operador.IGUAL, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E ::= E aand E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Logica(e1, e2, Operacion.Operador.AND, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E ::= E oor E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Logica(e1, e2, Operacion.Operador.OR, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E ::= mas E 
            {
              Expresion RESULT =null;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Aritmetica(e1, Operacion.Operador.POSITIVO, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E ::= menos E 
            {
              Expresion RESULT =null;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Aritmetica(e1, Operacion.Operador.NEGATIVO, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // T ::= doublee 
            {
              TipoContenedor RESULT =null;
		
        //RESULT = Simbolo.Tipo.DOUBLE;
        RESULT = new TipoContenedor(Simbolo.Tipo.DOUBLE);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // T ::= booleann 
            {
              TipoContenedor RESULT =null;
		
        //RESULT = Simbolo.Tipo.BOOLEAN;
        RESULT = new TipoContenedor(Simbolo.Tipo.BOOLEAN);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // T ::= stringg 
            {
              TipoContenedor RESULT =null;
		
        //RESULT = Simbolo.Tipo.STRING;
        RESULT = new TipoContenedor(Simbolo.Tipo.STRING);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // T ::= charr 
            {
              TipoContenedor RESULT =null;
		
        //RESULT = Simbolo.Tipo.CHAR;
        RESULT = new TipoContenedor(Simbolo.Tipo.CHAR);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // T ::= intt 
            {
              TipoContenedor RESULT =null;
		
        //RESULT = Simbolo.Tipo.INT;
        RESULT = new TipoContenedor(Simbolo.Tipo.INT);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IMPRESIONES ::= imprimir apar cpar puntoycoma 
            {
              Instruccion RESULT =null;
		
                RESULT = new ImprimirTS("hola");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESIONES",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IMPRESIONES ::= printLinea apar E cpar puntoycoma 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                RESULT = new Printer(e1, e1left, e1right, true);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESIONES",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IMPRESIONES ::= print apar E cpar puntoycoma 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                RESULT = new Printer(e1, e1left, e1right);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESIONES",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PREPOSTFIJOS ::= menosmenos id puntoycoma 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                RESULT = new OPPreFijo(new Identificador(id, null, idleft, idleft), Operacion.Operador.MENOS, idleft, idright);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PREPOSTFIJOS",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PREPOSTFIJOS ::= masmas id puntoycoma 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                RESULT = new OPPreFijo(new Identificador(id, null, idleft, idleft), Operacion.Operador.MAS, idleft, idright);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PREPOSTFIJOS",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PREPOSTFIJOS ::= id menosmenos puntoycoma 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                RESULT = new OPPostFijo(new Identificador(id, null, idleft, idleft), Operacion.Operador.MENOS, idleft, idright);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PREPOSTFIJOS",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PREPOSTFIJOS ::= id masmas puntoycoma 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                RESULT = new OPPostFijo(new Identificador(id, null, idleft, idleft), Operacion.Operador.MAS, idleft, idright);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PREPOSTFIJOS",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // D ::= id igual E puntoycoma 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 //asignacion
        RESULT = new Asignacion(id, e, idleft, idright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("D",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // D ::= T id puntoycoma 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		TipoContenedor t = (TipoContenedor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		    //declaracion
        RESULT = new Declaracion(t, id, idleft, idright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("D",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // D ::= T id igual E puntoycoma 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		TipoContenedor t = (TipoContenedor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  //declaracion asignacion
        RESULT = new Declaracion(t,id, e, idleft, idright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("D",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FOR_INIT ::= D 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = d;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR_INIT",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CICLOS ::= forr apar FOR_INIT E puntoycoma E cpar S 
            {
              Instruccion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int inicioleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int inicioright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Instruccion inicio = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int aumetoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aumetoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion aumeto = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion s1 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Forr(inicio, cond, aumeto, s1, fleft, fright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLOS",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CICLOS ::= doo S whilee apar E cpar puntoycoma 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Instruccion s1 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
        RESULT = new DoWhile(s1, e1, dleft, dright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLOS",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CICLOS ::= continuee puntoycoma 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new Continuee(eleft, eright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLOS",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CICLOS ::= breakk puntoycoma 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new Breakk(eleft, eright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLOS",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CICLOS ::= whilee apar E cpar S 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion s1 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new WhileCiclo(e1, s1, e1left, e1right);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLOS",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IF_LIST ::= IF_LIST elsee iff apar E cpar S 
            {
              LinkedList<IfLista> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		LinkedList<IfLista> l = (LinkedList<IfLista>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion s1 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = l;
            RESULT.add(new IfLista(e1, s1, e1left, e1right));
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF_LIST",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IF_LIST ::= iff apar E cpar S 
            {
              LinkedList<IfLista> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion s1 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new LinkedList<IfLista>();
            RESULT.add(new IfLista(e1, s1, e1left, e1right));
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF_LIST",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IF_STATEMENT ::= IF_LIST 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<IfLista> i = (LinkedList<IfLista>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Iff(null, i, ileft, iright);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IF_STATEMENT ::= IF_LIST elsee S 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<IfLista> i = (LinkedList<IfLista>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion s1 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Iff(s1, i, ileft, iright);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SWITCH_LABEL ::= defaultt dospuntos 
            {
              NodoAST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    RESULT = new Defaultt(dleft, dright);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_LABEL",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SWITCH_LABEL ::= casee E dospuntos 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    RESULT = new Casee(e, eleft, eright);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_LABEL",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SWITCH_LABELS ::= SWITCH_LABELS SWITCH_LABEL 
            {
              LinkedList<NodoAST> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> f = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int dnodoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dnodoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST dnodo = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    RESULT = f;
                    RESULT.add(dnodo);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_LABELS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SWITCH_LABELS ::= SWITCH_LABEL 
            {
              LinkedList<NodoAST> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST i = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    RESULT = new LinkedList<>();
                    RESULT.add(i);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_LABELS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SWITCH_BLOCK_STATEMENT_GROUP ::= SWITCH_LABELS B 
            {
              Instruccion RESULT =null;
		int listaCaseleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaCaseright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> listaCase = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int listaSentenciasleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int listaSentenciasright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> listaSentencias = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 //cambiar la S por una B y toca instanciar una clase Bloque para mandar a guardar
                    Bloque blo = new Bloque(listaSentencias);
                    RESULT = new SwitchBlockStatement_Group(listaCase, blo);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_BLOCK_STATEMENT_GROUP",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SWITCH_BLOCK_STATEMENT_GROUPS ::= SWITCH_BLOCK_STATEMENT_GROUPS SWITCH_BLOCK_STATEMENT_GROUP 
            {
              LinkedList<NodoAST> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> f = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int dnodoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dnodoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion dnodo = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    RESULT = f;
                    RESULT.add(dnodo);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_BLOCK_STATEMENT_GROUPS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SWITCH_BLOCK_STATEMENT_GROUPS ::= SWITCH_BLOCK_STATEMENT_GROUP 
            {
              LinkedList<NodoAST> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    RESULT = new LinkedList<>();
                    RESULT.add(i);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_BLOCK_STATEMENT_GROUPS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SWITCH_BLOCK ::= switchh apar E cpar allave cllave 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
                    //no se hace nada
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_BLOCK",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SWITCH_BLOCK ::= switchh apar E cpar allave SWITCH_LABELS cllave 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int swileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int swiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> swi = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    RESULT = new SwitchBlock(e, eleft, eright, null, swi);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_BLOCK",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SWITCH_BLOCK ::= switchh apar E cpar allave SWITCH_BLOCK_STATEMENT_GROUPS cllave 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int grupoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int gruporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> grupo = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    RESULT = new SwitchBlock(e, eleft, eright, grupo, null);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_BLOCK",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SWITCH_BLOCK ::= switchh apar E cpar allave SWITCH_BLOCK_STATEMENT_GROUPS SWITCH_LABELS cllave 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<NodoAST> g = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> s = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    RESULT = new SwitchBlock(e, eleft, eright, g, s);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_BLOCK",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // COND ::= SWITCH_BLOCK 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = d;
      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // COND ::= IF_STATEMENT 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = d;
      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ARCHIVOS ::= grafica apar E coma E cpar puntoycoma 
            {
              NodoAST RESULT =null;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion ruta = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion contenido = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                RESULT = new Graficar(ruta, contenido, rutaleft, rutaright);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARCHIVOS",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ARCHIVOS ::= write_file apar E coma E cpar puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion ruta = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion contenido = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                RESULT = new EscribirArchivo(ruta, contenido, aleft, aright);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARCHIVOS",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ARCHIVOS ::= read_file apar E cpar puntoycoma 
            {
              NodoAST RESULT =null;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion ruta = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                RESULT = new LeerArchivo(ruta, rutaleft, rutaright);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARCHIVOS",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // J ::= ARCHIVOS 
            {
              NodoAST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST d = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = d;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("J",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // J ::= PREPOSTFIJOS 
            {
              NodoAST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion d = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = d;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("J",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // J ::= IMPRESIONES 
            {
              NodoAST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = d;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("J",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // J ::= COND 
            {
              NodoAST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = d;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("J",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // J ::= CICLOS 
            {
              NodoAST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = d;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("J",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // J ::= S 
            {
              NodoAST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = d;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("J",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // J ::= D 
            {
              NodoAST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = d;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("J",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // B ::= J 
            {
              LinkedList<NodoAST> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST i = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new LinkedList<>();
        RESULT.add(i);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // B ::= B J 
            {
              LinkedList<NodoAST> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> l = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST i = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = l;
        RESULT.add(i);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= allave B cllave 
            {
              Instruccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> l = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new Bloque(l);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // I ::= S 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion l = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        this.parser.arbol = l;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("I",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= I EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

