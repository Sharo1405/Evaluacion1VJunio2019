
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jun 11 17:51:48 CST 2019
//----------------------------------------------------

package analizadores;

import ast.ArbolAST;
import ast.NodoAST;
import ast.entorno.Simbolo;
import ast.expresiones.*;
import ast.expresiones.arreglos.*;
import ast.expresiones.operacion.*;
import ast.expresiones.primitivos.*;
import ast.instrucciones.declaraciones.*;
import ast.instrucciones.*;
import ast.instrucciones.Printer;
import ast.instrucciones.Seleccion.*;
import ast.instrucciones.ciclos.*;
import ast.instrucciones.ciclos.RetCont.*;
import java.util.LinkedList;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jun 11 17:51:48 CST 2019
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\145\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\004\004\000\002\004\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\024\007\000\002\024\011\000\002\024\011\000\002\011" +
    "\003\000\002\011\003\000\002\017\012\000\002\017\011" +
    "\000\002\017\011\000\002\017\010\000\002\020\003\000" +
    "\002\020\004\000\002\023\004\000\002\021\003\000\002" +
    "\021\004\000\002\022\005\000\002\022\004\000\002\012" +
    "\005\000\002\012\003\000\002\013\007\000\002\013\011" +
    "\000\002\010\007\000\002\010\004\000\002\010\004\000" +
    "\002\010\011\000\002\010\012\000\002\014\003\000\002" +
    "\032\004\000\002\032\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\033\006\000\002\033\005\000\002\033\006\000" +
    "\002\030\005\000\002\030\003\000\002\027\005\000\002" +
    "\027\003\000\002\026\005\000\002\026\003\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\015\007\000\002\015\007\000\002\015\006\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\005\004\000\002\005" +
    "\004\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\004\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\007\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\005" +
    "\004\000\002\005\006\000\002\005\010\000\002\005\005" +
    "\000\002\005\005\000\002\034\003\000\002\025\006\000" +
    "\002\025\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\342\000\004\005\006\001\002\000\004\002\344\001" +
    "\002\000\004\002\000\001\002\000\070\005\006\007\046" +
    "\014\020\015\057\016\044\017\016\020\053\027\011\052" +
    "\037\053\041\054\054\055\026\056\023\061\034\063\007" +
    "\064\042\065\012\072\022\073\047\075\056\076\040\077" +
    "\032\100\050\101\036\102\031\103\055\104\051\001\002" +
    "\000\004\005\006\001\002\000\100\005\uffe4\006\uffe4\007" +
    "\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\027\uffe4" +
    "\052\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4\061\uffe4\062" +
    "\327\063\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4\072\uffe4" +
    "\073\uffe4\075\uffe4\076\uffe4\077\uffe4\100\uffe4\101\uffe4\102" +
    "\uffe4\103\uffe4\104\uffe4\001\002\000\004\030\324\001\002" +
    "\000\004\030\277\001\002\000\004\007\210\001\002\000" +
    "\076\005\ufffb\006\ufffb\007\ufffb\014\ufffb\015\ufffb\016\ufffb" +
    "\017\ufffb\020\ufffb\027\ufffb\052\ufffb\053\ufffb\054\ufffb\055" +
    "\ufffb\056\ufffb\061\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb" +
    "\067\ufffb\072\ufffb\073\ufffb\075\ufffb\076\ufffb\077\ufffb\100" +
    "\ufffb\101\ufffb\102\ufffb\103\ufffb\104\ufffb\001\002\000\076" +
    "\005\ufff9\006\ufff9\007\ufff9\014\ufff9\015\ufff9\016\ufff9\017" +
    "\ufff9\020\ufff9\027\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9" +
    "\056\ufff9\061\ufff9\063\ufff9\064\ufff9\065\ufff9\066\ufff9\067" +
    "\ufff9\072\ufff9\073\ufff9\075\ufff9\076\ufff9\077\ufff9\100\ufff9" +
    "\101\ufff9\102\ufff9\103\ufff9\104\ufff9\001\002\000\006\007" +
    "\uffc0\011\uffc0\001\002\000\076\005\ufffd\006\ufffd\007\ufffd" +
    "\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\027\ufffd\052" +
    "\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd\061\ufffd\063\ufffd" +
    "\064\ufffd\065\ufffd\066\ufffd\067\ufffd\072\ufffd\073\ufffd\075" +
    "\ufffd\076\ufffd\077\ufffd\100\ufffd\101\ufffd\102\ufffd\103\ufffd" +
    "\104\ufffd\001\002\000\006\007\uffc4\011\uffc4\001\002\000" +
    "\072\005\006\006\273\007\046\014\020\015\057\016\044" +
    "\017\016\020\053\027\011\052\037\053\041\054\054\055" +
    "\026\056\023\061\034\063\007\064\042\065\012\072\022" +
    "\073\047\075\056\076\040\077\032\100\050\101\036\102" +
    "\031\103\055\104\051\001\002\000\004\030\265\001\002" +
    "\000\004\007\263\001\002\000\076\005\ufff8\006\ufff8\007" +
    "\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\027\ufff8" +
    "\052\ufff8\053\ufff8\054\ufff8\055\ufff8\056\ufff8\061\ufff8\063" +
    "\ufff8\064\ufff8\065\ufff8\066\ufff8\067\ufff8\072\ufff8\073\ufff8" +
    "\075\ufff8\076\ufff8\077\ufff8\100\ufff8\101\ufff8\102\ufff8\103" +
    "\ufff8\104\ufff8\001\002\000\026\014\uffda\015\uffda\016\uffda" +
    "\017\uffda\020\uffda\076\uffda\077\uffda\100\uffda\101\uffda\102" +
    "\uffda\001\002\000\004\007\261\001\002\000\076\005\ufffc" +
    "\006\ufffc\007\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020" +
    "\ufffc\027\ufffc\052\ufffc\053\ufffc\054\ufffc\055\ufffc\056\ufffc" +
    "\061\ufffc\063\ufffc\064\ufffc\065\ufffc\066\ufffc\067\ufffc\072" +
    "\ufffc\073\ufffc\075\ufffc\076\ufffc\077\ufffc\100\ufffc\101\ufffc" +
    "\102\ufffc\103\ufffc\104\ufffc\001\002\000\076\005\ufff1\006" +
    "\ufff1\007\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1" +
    "\027\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1\061" +
    "\ufff1\063\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1\072\ufff1" +
    "\073\ufff1\075\ufff1\076\ufff1\077\ufff1\100\ufff1\101\ufff1\102" +
    "\ufff1\103\ufff1\104\ufff1\001\002\000\026\014\uffd5\015\uffd5" +
    "\016\uffd5\017\uffd5\020\uffd5\076\uffd5\077\uffd5\100\uffd5\101" +
    "\uffd5\102\uffd5\001\002\000\026\014\uffd8\015\uffd8\016\uffd8" +
    "\017\uffd8\020\uffd8\076\uffd8\077\uffd8\100\uffd8\101\uffd8\102" +
    "\uffd8\001\002\000\076\005\ufff2\006\ufff2\007\ufff2\014\ufff2" +
    "\015\ufff2\016\ufff2\017\ufff2\020\ufff2\027\ufff2\052\ufff2\053" +
    "\ufff2\054\ufff2\055\ufff2\056\ufff2\061\ufff2\063\ufff2\064\ufff2" +
    "\065\ufff2\066\ufff2\067\ufff2\072\ufff2\073\ufff2\075\ufff2\076" +
    "\ufff2\077\ufff2\100\ufff2\101\ufff2\102\ufff2\103\ufff2\104\ufff2" +
    "\001\002\000\004\030\255\001\002\000\076\005\ufff6\006" +
    "\ufff6\007\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6" +
    "\027\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6\061" +
    "\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6\072\ufff6" +
    "\073\ufff6\075\ufff6\076\ufff6\077\ufff6\100\ufff6\101\ufff6\102" +
    "\ufff6\103\ufff6\104\ufff6\001\002\000\026\014\uffd6\015\uffd6" +
    "\016\uffd6\017\uffd6\020\uffd6\076\uffd6\077\uffd6\100\uffd6\101" +
    "\uffd6\102\uffd6\001\002\000\004\030\251\001\002\000\026" +
    "\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\076\uffd9\077" +
    "\uffd9\100\uffd9\101\uffd9\102\uffd9\001\002\000\004\010\250" +
    "\001\002\000\004\030\237\001\002\000\076\005\ufffa\006" +
    "\ufffa\007\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa" +
    "\027\ufffa\052\ufffa\053\ufffa\054\ufffa\055\ufffa\056\ufffa\061" +
    "\ufffa\063\ufffa\064\ufffa\065\ufffa\066\ufffa\067\ufffa\072\ufffa" +
    "\073\ufffa\075\ufffa\076\ufffa\077\ufffa\100\ufffa\101\ufffa\102" +
    "\ufffa\103\ufffa\104\ufffa\001\002\000\006\007\uffc2\011\uffc2" +
    "\001\002\000\076\005\ufff7\006\ufff7\007\ufff7\014\ufff7\015" +
    "\ufff7\016\ufff7\017\ufff7\020\ufff7\027\ufff7\052\ufff7\053\ufff7" +
    "\054\ufff7\055\ufff7\056\ufff7\061\ufff7\063\ufff7\064\ufff7\065" +
    "\ufff7\066\ufff7\067\ufff7\072\ufff7\073\ufff7\075\ufff7\076\ufff7" +
    "\077\ufff7\100\ufff7\101\ufff7\102\ufff7\103\ufff7\104\ufff7\001" +
    "\002\000\010\004\231\055\230\056\232\001\002\000\004" +
    "\030\224\001\002\000\026\014\uffd7\015\uffd7\016\uffd7\017" +
    "\uffd7\020\uffd7\076\uffd7\077\uffd7\100\uffd7\101\uffd7\102\uffd7" +
    "\001\002\000\004\030\220\001\002\000\026\014\020\015" +
    "\057\016\044\017\016\020\053\076\040\077\032\100\050" +
    "\101\036\102\031\001\002\000\006\007\uffc1\011\uffc1\001" +
    "\002\000\004\010\202\001\002\000\004\030\176\001\002" +
    "\000\004\030\060\001\002\000\006\007\uffc3\011\uffc3\001" +
    "\002\000\042\007\062\013\076\021\066\022\061\023\063" +
    "\024\065\025\075\026\070\030\067\032\077\034\072\041" +
    "\073\055\100\056\074\072\064\073\071\001\002\000\050" +
    "\010\uffab\012\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035" +
    "\uffab\036\uffab\037\uffab\040\uffab\042\uffab\043\uffab\044\uffab" +
    "\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\074\uffab\001" +
    "\002\000\054\010\uffa9\012\uffa9\031\uffa9\032\uffa9\033\uffa9" +
    "\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\042\uffa9\043" +
    "\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9" +
    "\055\174\056\175\074\uffa9\001\002\000\050\010\uffaa\012" +
    "\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa" +
    "\037\uffaa\040\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046" +
    "\uffaa\047\uffaa\050\uffaa\051\uffaa\074\uffaa\001\002\000\004" +
    "\030\167\001\002\000\050\010\uffac\012\uffac\031\uffac\032" +
    "\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac" +
    "\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050" +
    "\uffac\051\uffac\074\uffac\001\002\000\050\010\uffaf\012\uffaf" +
    "\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037" +
    "\uffaf\040\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf" +
    "\047\uffaf\050\uffaf\051\uffaf\074\uffaf\001\002\000\042\007" +
    "\062\013\076\021\066\022\061\023\063\024\065\025\075" +
    "\026\070\030\067\032\077\034\072\041\073\055\100\056" +
    "\074\072\064\073\071\001\002\000\050\010\uffad\012\uffad" +
    "\031\uffad\032\uffad\033\uffad\034\uffad\035\uffad\036\uffad\037" +
    "\uffad\040\uffad\042\uffad\043\uffad\044\uffad\045\uffad\046\uffad" +
    "\047\uffad\050\uffad\051\uffad\074\uffad\001\002\000\004\030" +
    "\162\001\002\000\042\007\062\013\076\021\066\022\061" +
    "\023\063\024\065\025\075\026\070\030\067\032\077\034" +
    "\072\041\073\055\100\056\074\072\064\073\071\001\002" +
    "\000\042\007\062\013\076\021\066\022\061\023\063\024" +
    "\065\025\075\026\070\030\067\032\077\034\072\041\073" +
    "\055\100\056\074\072\064\073\071\001\002\000\004\007" +
    "\157\001\002\000\050\010\uffae\012\uffae\031\uffae\032\uffae" +
    "\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae\042" +
    "\uffae\043\uffae\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae" +
    "\051\uffae\074\uffae\001\002\000\014\014\020\015\057\016" +
    "\044\017\016\020\053\001\002\000\042\007\062\013\076" +
    "\021\066\022\061\023\063\024\065\025\075\026\070\030" +
    "\067\032\077\034\072\041\073\055\100\056\074\072\064" +
    "\073\071\001\002\000\004\007\144\001\002\000\040\032" +
    "\116\033\113\034\105\035\117\036\102\037\110\040\104" +
    "\042\106\043\120\044\107\045\114\046\115\047\111\050" +
    "\112\074\103\001\002\000\042\007\062\013\076\021\066" +
    "\022\061\023\063\024\065\025\075\026\070\030\067\032" +
    "\077\034\072\041\073\055\100\056\074\072\064\073\071" +
    "\001\002\000\042\007\062\013\076\021\066\022\061\023" +
    "\063\024\065\025\075\026\070\030\067\032\077\034\072" +
    "\041\073\055\100\056\074\072\064\073\071\001\002\000" +
    "\042\007\062\013\076\021\066\022\061\023\063\024\065" +
    "\025\075\026\070\030\067\032\077\034\072\041\073\055" +
    "\100\056\074\072\064\073\071\001\002\000\042\007\062" +
    "\013\076\021\066\022\061\023\063\024\065\025\075\026" +
    "\070\030\067\032\077\034\072\041\073\055\100\056\074" +
    "\072\064\073\071\001\002\000\042\007\062\013\076\021" +
    "\066\022\061\023\063\024\065\025\075\026\070\030\067" +
    "\032\077\034\072\041\073\055\100\056\074\072\064\073" +
    "\071\001\002\000\042\007\062\013\076\021\066\022\061" +
    "\023\063\024\065\025\075\026\070\030\067\032\077\034" +
    "\072\041\073\055\100\056\074\072\064\073\071\001\002" +
    "\000\042\007\062\013\076\021\066\022\061\023\063\024" +
    "\065\025\075\026\070\030\067\032\077\034\072\041\073" +
    "\055\100\056\074\072\064\073\071\001\002\000\042\007" +
    "\062\013\076\021\066\022\061\023\063\024\065\025\075" +
    "\026\070\030\067\032\077\034\072\041\073\055\100\056" +
    "\074\072\064\073\071\001\002\000\042\007\062\013\076" +
    "\021\066\022\061\023\063\024\065\025\075\026\070\030" +
    "\067\032\077\034\072\041\073\055\100\056\074\072\064" +
    "\073\071\001\002\000\042\007\062\013\076\021\066\022" +
    "\061\023\063\024\065\025\075\026\070\030\067\032\077" +
    "\034\072\041\073\055\100\056\074\072\064\073\071\001" +
    "\002\000\042\007\062\013\076\021\066\022\061\023\063" +
    "\024\065\025\075\026\070\030\067\032\077\034\072\041" +
    "\073\055\100\056\074\072\064\073\071\001\002\000\042" +
    "\007\062\013\076\021\066\022\061\023\063\024\065\025" +
    "\075\026\070\030\067\032\077\034\072\041\073\055\100" +
    "\056\074\072\064\073\071\001\002\000\042\007\062\013" +
    "\076\021\066\022\061\023\063\024\065\025\075\026\070" +
    "\030\067\032\077\034\072\041\073\055\100\056\074\072" +
    "\064\073\071\001\002\000\042\007\062\013\076\021\066" +
    "\022\061\023\063\024\065\025\075\026\070\030\067\032" +
    "\077\034\072\041\073\055\100\056\074\072\064\073\071" +
    "\001\002\000\042\007\062\013\076\021\066\022\061\023" +
    "\063\024\065\025\075\026\070\030\067\032\077\034\072" +
    "\041\073\055\100\056\074\072\064\073\071\001\002\000" +
    "\050\010\uffb8\012\uffb8\031\uffb8\032\116\033\113\034\105" +
    "\035\117\036\102\037\uffb8\040\uffb8\042\uffb8\043\uffb8\044" +
    "\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\074\uffb8" +
    "\001\002\000\050\010\uffb2\012\uffb2\031\uffb2\032\uffb2\033" +
    "\uffb2\034\uffb2\035\uffb2\036\102\037\uffb2\040\uffb2\042\uffb2" +
    "\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051" +
    "\uffb2\074\uffb2\001\002\000\050\010\uffb4\012\uffb4\031\uffb4" +
    "\032\uffb4\033\113\034\uffb4\035\117\036\102\037\uffb4\040" +
    "\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4" +
    "\050\uffb4\051\uffb4\074\uffb4\001\002\000\050\010\uffb6\012" +
    "\uffb6\031\uffb6\032\116\033\113\034\105\035\117\036\102" +
    "\037\uffb6\040\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046" +
    "\uffb6\047\uffb6\050\uffb6\051\uffb6\074\uffb6\001\002\000\050" +
    "\010\uffb5\012\uffb5\031\uffb5\032\116\033\113\034\105\035" +
    "\117\036\102\037\uffb5\040\uffb5\042\uffb5\043\uffb5\044\uffb5" +
    "\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\074\uffb5\001" +
    "\002\000\050\010\uffb3\012\uffb3\031\uffb3\032\uffb3\033\uffb3" +
    "\034\uffb3\035\uffb3\036\102\037\uffb3\040\uffb3\042\uffb3\043" +
    "\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3" +
    "\074\uffb3\001\002\000\040\032\116\033\113\034\105\035" +
    "\117\036\102\037\110\040\104\042\106\043\120\044\107" +
    "\045\114\046\115\047\111\050\112\051\130\001\002\000" +
    "\042\007\062\013\076\021\066\022\061\023\063\024\065" +
    "\025\075\026\070\030\067\032\077\034\072\041\073\055" +
    "\100\056\074\072\064\073\071\001\002\000\050\010\uffa8" +
    "\012\uffa8\031\uffa8\032\116\033\113\034\105\035\117\036" +
    "\102\037\110\040\104\042\106\043\120\044\107\045\114" +
    "\046\115\047\111\050\112\051\uffa8\074\uffa8\001\002\000" +
    "\050\010\uffba\012\uffba\031\uffba\032\116\033\113\034\105" +
    "\035\117\036\102\037\uffba\040\uffba\042\uffba\043\120\044" +
    "\107\045\114\046\115\047\uffba\050\uffba\051\uffba\074\uffba" +
    "\001\002\000\050\010\uffbd\012\uffbd\031\uffbd\032\116\033" +
    "\113\034\105\035\117\036\102\037\uffbd\040\104\042\106" +
    "\043\120\044\107\045\114\046\115\047\111\050\uffbd\051" +
    "\uffbd\074\uffbd\001\002\000\050\010\uffb7\012\uffb7\031\uffb7" +
    "\032\116\033\113\034\105\035\117\036\102\037\uffb7\040" +
    "\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7" +
    "\050\uffb7\051\uffb7\074\uffb7\001\002\000\050\010\uffbb\012" +
    "\uffbb\031\uffbb\032\116\033\113\034\105\035\117\036\102" +
    "\037\uffbb\040\uffbb\042\uffbb\043\120\044\107\045\114\046" +
    "\115\047\uffbb\050\uffbb\051\uffbb\074\uffbb\001\002\000\050" +
    "\010\uffb0\012\uffb0\031\uffb0\032\uffb0\033\113\034\uffb0\035" +
    "\117\036\102\037\uffb0\040\uffb0\042\uffb0\043\uffb0\044\uffb0" +
    "\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\074\uffb0\001" +
    "\002\000\050\010\uffbc\012\uffbc\031\uffbc\032\116\033\113" +
    "\034\105\035\117\036\102\037\uffbc\040\uffbc\042\106\043" +
    "\120\044\107\045\114\046\115\047\111\050\uffbc\051\uffbc" +
    "\074\uffbc\001\002\000\040\031\141\032\116\033\113\034" +
    "\105\035\117\036\102\037\110\040\104\042\106\043\120" +
    "\044\107\045\114\046\115\047\111\050\112\001\002\000" +
    "\004\010\142\001\002\000\076\005\ufff3\006\ufff3\007\ufff3" +
    "\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\027\ufff3\052" +
    "\ufff3\053\ufff3\054\ufff3\055\ufff3\056\ufff3\061\ufff3\063\ufff3" +
    "\064\ufff3\065\ufff3\066\ufff3\067\ufff3\072\ufff3\073\ufff3\075" +
    "\ufff3\076\ufff3\077\ufff3\100\ufff3\101\ufff3\102\ufff3\103\ufff3" +
    "\104\ufff3\001\002\000\050\010\uffb1\012\uffb1\031\uffb1\032" +
    "\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1" +
    "\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050" +
    "\uffb1\051\uffb1\074\uffb1\001\002\000\050\010\uffa5\012\uffa5" +
    "\031\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037" +
    "\uffa5\040\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5" +
    "\047\uffa5\050\uffa5\051\uffa5\074\uffa5\001\002\000\050\010" +
    "\uffbe\012\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe" +
    "\036\uffbe\037\uffbe\040\uffbe\042\uffbe\043\uffbe\044\uffbe\045" +
    "\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\074\uffbe\001\002" +
    "\000\004\011\151\001\002\000\052\010\uff9f\011\154\012" +
    "\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f" +
    "\037\uff9f\040\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046" +
    "\uff9f\047\uff9f\050\uff9f\051\uff9f\074\uff9f\001\002\000\050" +
    "\010\uffa1\012\uffa1\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035" +
    "\uffa1\036\uffa1\037\uffa1\040\uffa1\042\uffa1\043\uffa1\044\uffa1" +
    "\045\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1\074\uffa1\001" +
    "\002\000\042\007\062\013\076\021\066\022\061\023\063" +
    "\024\065\025\075\026\070\030\067\032\077\034\072\041" +
    "\073\055\100\056\074\072\064\073\071\001\002\000\040" +
    "\012\153\032\116\033\113\034\105\035\117\036\102\037" +
    "\110\040\104\042\106\043\120\044\107\045\114\046\115" +
    "\047\111\050\112\001\002\000\052\010\uff9d\011\uff9d\012" +
    "\uff9d\031\uff9d\032\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d" +
    "\037\uff9d\040\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046" +
    "\uff9d\047\uff9d\050\uff9d\051\uff9d\074\uff9d\001\002\000\042" +
    "\007\062\013\076\021\066\022\061\023\063\024\065\025" +
    "\075\026\070\030\067\032\077\034\072\041\073\055\100" +
    "\056\074\072\064\073\071\001\002\000\040\012\156\032" +
    "\116\033\113\034\105\035\117\036\102\037\110\040\104" +
    "\042\106\043\120\044\107\045\114\046\115\047\111\050" +
    "\112\001\002\000\052\010\uff9e\011\uff9e\012\uff9e\031\uff9e" +
    "\032\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040" +
    "\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e" +
    "\050\uff9e\051\uff9e\074\uff9e\001\002\000\050\010\uffa4\012" +
    "\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4" +
    "\037\uffa4\040\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046" +
    "\uffa4\047\uffa4\050\uffa4\051\uffa4\074\uffa4\001\002\000\050" +
    "\010\uffb9\012\uffb9\031\uffb9\032\116\033\113\034\105\035" +
    "\117\036\102\037\uffb9\040\uffb9\042\106\043\120\044\107" +
    "\045\114\046\115\047\111\050\uffb9\051\uffb9\074\uffb9\001" +
    "\002\000\050\010\uffbf\012\uffbf\031\uffbf\032\uffbf\033\uffbf" +
    "\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\042\uffbf\043" +
    "\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf" +
    "\074\uffbf\001\002\000\042\007\062\013\076\021\066\022" +
    "\061\023\063\024\065\025\075\026\070\030\067\032\077" +
    "\034\072\041\073\055\100\056\074\072\064\073\071\001" +
    "\002\000\040\031\164\032\116\033\113\034\105\035\117" +
    "\036\102\037\110\040\104\042\106\043\120\044\107\045" +
    "\114\046\115\047\111\050\112\001\002\000\050\010\uffa3" +
    "\012\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036" +
    "\uffa3\037\uffa3\040\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3" +
    "\046\uffa3\047\uffa3\050\uffa3\051\uffa3\074\uffa3\001\002\000" +
    "\040\031\166\032\116\033\113\034\105\035\117\036\102" +
    "\037\110\040\104\042\106\043\120\044\107\045\114\046" +
    "\115\047\111\050\112\001\002\000\050\010\uffa0\012\uffa0" +
    "\031\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037" +
    "\uffa0\040\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0" +
    "\047\uffa0\050\uffa0\051\uffa0\074\uffa0\001\002\000\042\007" +
    "\062\013\076\021\066\022\061\023\063\024\065\025\075" +
    "\026\070\030\067\032\077\034\072\041\073\055\100\056" +
    "\074\072\064\073\071\001\002\000\040\032\116\033\113" +
    "\034\105\035\117\036\102\037\110\040\104\042\106\043" +
    "\120\044\107\045\114\046\115\047\111\050\112\074\171" +
    "\001\002\000\042\007\062\013\076\021\066\022\061\023" +
    "\063\024\065\025\075\026\070\030\067\032\077\034\072" +
    "\041\073\055\100\056\074\072\064\073\071\001\002\000" +
    "\040\031\173\032\116\033\113\034\105\035\117\036\102" +
    "\037\110\040\104\042\106\043\120\044\107\045\114\046" +
    "\115\047\111\050\112\001\002\000\050\010\uffa2\012\uffa2" +
    "\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037" +
    "\uffa2\040\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2" +
    "\047\uffa2\050\uffa2\051\uffa2\074\uffa2\001\002\000\050\010" +
    "\uffa7\012\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7" +
    "\036\uffa7\037\uffa7\040\uffa7\042\uffa7\043\uffa7\044\uffa7\045" +
    "\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\074\uffa7\001\002" +
    "\000\050\010\uffa6\012\uffa6\031\uffa6\032\uffa6\033\uffa6\034" +
    "\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\042\uffa6\043\uffa6" +
    "\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\074" +
    "\uffa6\001\002\000\042\007\062\013\076\021\066\022\061" +
    "\023\063\024\065\025\075\026\070\030\067\032\077\034" +
    "\072\041\073\055\100\056\074\072\064\073\071\001\002" +
    "\000\040\031\200\032\116\033\113\034\105\035\117\036" +
    "\102\037\110\040\104\042\106\043\120\044\107\045\114" +
    "\046\115\047\111\050\112\001\002\000\004\010\201\001" +
    "\002\000\076\005\uffc7\006\uffc7\007\uffc7\014\uffc7\015\uffc7" +
    "\016\uffc7\017\uffc7\020\uffc7\027\uffc7\052\uffc7\053\uffc7\054" +
    "\uffc7\055\uffc7\056\uffc7\061\uffc7\063\uffc7\064\uffc7\065\uffc7" +
    "\066\uffc7\067\uffc7\072\uffc7\073\uffc7\075\uffc7\076\uffc7\077" +
    "\uffc7\100\uffc7\101\uffc7\102\uffc7\103\uffc7\104\uffc7\001\002" +
    "\000\076\005\uffdf\006\uffdf\007\uffdf\014\uffdf\015\uffdf\016" +
    "\uffdf\017\uffdf\020\uffdf\027\uffdf\052\uffdf\053\uffdf\054\uffdf" +
    "\055\uffdf\056\uffdf\061\uffdf\063\uffdf\064\uffdf\065\uffdf\066" +
    "\uffdf\067\uffdf\072\uffdf\073\uffdf\075\uffdf\076\uffdf\077\uffdf" +
    "\100\uffdf\101\uffdf\102\uffdf\103\uffdf\104\uffdf\001\002\000" +
    "\004\007\210\001\002\000\026\014\uffdb\015\uffdb\016\uffdb" +
    "\017\uffdb\020\uffdb\076\uffdb\077\uffdb\100\uffdb\101\uffdb\102" +
    "\uffdb\001\002\000\006\010\216\074\215\001\002\000\012" +
    "\004\211\010\uffce\011\212\074\uffce\001\002\000\006\010" +
    "\uffd0\074\uffd0\001\002\000\012\004\uffcc\010\uffcc\011\uffcc" +
    "\074\uffcc\001\002\000\042\007\062\013\076\021\066\022" +
    "\061\023\063\024\065\025\075\026\070\030\067\032\077" +
    "\034\072\041\073\055\100\056\074\072\064\073\071\001" +
    "\002\000\004\012\213\001\002\000\012\004\uffcd\010\uffcd" +
    "\011\uffcd\074\uffcd\001\002\000\042\010\uffcf\032\116\033" +
    "\113\034\105\035\117\036\102\037\110\040\104\042\106" +
    "\043\120\044\107\045\114\046\115\047\111\050\112\074" +
    "\uffcf\001\002\000\004\007\210\001\002\000\124\005\uffd4" +
    "\006\uffd4\007\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017" +
    "\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4" +
    "\026\uffd4\027\uffd4\030\uffd4\032\uffd4\034\uffd4\041\uffd4\052" +
    "\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4\061\uffd4\063\uffd4" +
    "\064\uffd4\065\uffd4\066\uffd4\067\uffd4\072\uffd4\073\uffd4\075" +
    "\uffd4\076\uffd4\077\uffd4\100\uffd4\101\uffd4\102\uffd4\103\uffd4" +
    "\104\uffd4\001\002\000\006\010\uffd1\074\uffd1\001\002\000" +
    "\042\007\062\013\076\021\066\022\061\023\063\024\065" +
    "\025\075\026\070\030\067\032\077\034\072\041\073\055" +
    "\100\056\074\072\064\073\071\001\002\000\040\031\222" +
    "\032\116\033\113\034\105\035\117\036\102\037\110\040" +
    "\104\042\106\043\120\044\107\045\114\046\115\047\111" +
    "\050\112\001\002\000\004\010\223\001\002\000\076\005" +
    "\uffc6\006\uffc6\007\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6" +
    "\020\uffc6\027\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6\056" +
    "\uffc6\061\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6" +
    "\072\uffc6\073\uffc6\075\uffc6\076\uffc6\077\uffc6\100\uffc6\101" +
    "\uffc6\102\uffc6\103\uffc6\104\uffc6\001\002\000\042\007\062" +
    "\013\076\021\066\022\061\023\063\024\065\025\075\026" +
    "\070\030\067\032\077\034\072\041\073\055\100\056\074" +
    "\072\064\073\071\001\002\000\040\031\226\032\116\033" +
    "\113\034\105\035\117\036\102\037\110\040\104\042\106" +
    "\043\120\044\107\045\114\046\115\047\111\050\112\001" +
    "\002\000\004\010\227\001\002\000\076\005\ufff5\006\ufff5" +
    "\007\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\027" +
    "\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\061\ufff5" +
    "\063\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5\072\ufff5\073" +
    "\ufff5\075\ufff5\076\ufff5\077\ufff5\100\ufff5\101\ufff5\102\ufff5" +
    "\103\ufff5\104\ufff5\001\002\000\004\010\236\001\002\000" +
    "\042\007\062\013\076\021\066\022\061\023\063\024\065" +
    "\025\075\026\070\030\067\032\077\034\072\041\073\055" +
    "\100\056\074\072\064\073\071\001\002\000\004\010\233" +
    "\001\002\000\076\005\uffca\006\uffca\007\uffca\014\uffca\015" +
    "\uffca\016\uffca\017\uffca\020\uffca\027\uffca\052\uffca\053\uffca" +
    "\054\uffca\055\uffca\056\uffca\061\uffca\063\uffca\064\uffca\065" +
    "\uffca\066\uffca\067\uffca\072\uffca\073\uffca\075\uffca\076\uffca" +
    "\077\uffca\100\uffca\101\uffca\102\uffca\103\uffca\104\uffca\001" +
    "\002\000\040\010\235\032\116\033\113\034\105\035\117" +
    "\036\102\037\110\040\104\042\106\043\120\044\107\045" +
    "\114\046\115\047\111\050\112\001\002\000\124\005\uffd2" +
    "\006\uffd2\007\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017" +
    "\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2" +
    "\026\uffd2\027\uffd2\030\uffd2\032\uffd2\034\uffd2\041\uffd2\052" +
    "\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\061\uffd2\063\uffd2" +
    "\064\uffd2\065\uffd2\066\uffd2\067\uffd2\072\uffd2\073\uffd2\075" +
    "\uffd2\076\uffd2\077\uffd2\100\uffd2\101\uffd2\102\uffd2\103\uffd2" +
    "\104\uffd2\001\002\000\076\005\uffcb\006\uffcb\007\uffcb\014" +
    "\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\027\uffcb\052\uffcb" +
    "\053\uffcb\054\uffcb\055\uffcb\056\uffcb\061\uffcb\063\uffcb\064" +
    "\uffcb\065\uffcb\066\uffcb\067\uffcb\072\uffcb\073\uffcb\075\uffcb" +
    "\076\uffcb\077\uffcb\100\uffcb\101\uffcb\102\uffcb\103\uffcb\104" +
    "\uffcb\001\002\000\030\007\240\014\020\015\057\016\044" +
    "\017\016\020\053\076\040\077\032\100\050\101\036\102" +
    "\031\001\002\000\004\004\231\001\002\000\042\007\uffdc" +
    "\013\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026" +
    "\uffdc\030\uffdc\032\uffdc\034\uffdc\041\uffdc\055\uffdc\056\uffdc" +
    "\072\uffdc\073\uffdc\001\002\000\042\007\062\013\076\021" +
    "\066\022\061\023\063\024\065\025\075\026\070\030\067" +
    "\032\077\034\072\041\073\055\100\056\074\072\064\073" +
    "\071\001\002\000\040\010\244\032\116\033\113\034\105" +
    "\035\117\036\102\037\110\040\104\042\106\043\120\044" +
    "\107\045\114\046\115\047\111\050\112\001\002\000\042" +
    "\007\062\013\076\021\066\022\061\023\063\024\065\025" +
    "\075\026\070\030\067\032\077\034\072\041\073\055\100" +
    "\056\074\072\064\073\071\001\002\000\040\031\246\032" +
    "\116\033\113\034\105\035\117\036\102\037\110\040\104" +
    "\042\106\043\120\044\107\045\114\046\115\047\111\050" +
    "\112\001\002\000\004\005\006\001\002\000\076\005\uffdd" +
    "\006\uffdd\007\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020" +
    "\uffdd\027\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd" +
    "\061\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd\067\uffdd\072" +
    "\uffdd\073\uffdd\075\uffdd\076\uffdd\077\uffdd\100\uffdd\101\uffdd" +
    "\102\uffdd\103\uffdd\104\uffdd\001\002\000\076\005\uffe0\006" +
    "\uffe0\007\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0" +
    "\027\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0\061" +
    "\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\072\uffe0" +
    "\073\uffe0\075\uffe0\076\uffe0\077\uffe0\100\uffe0\101\uffe0\102" +
    "\uffe0\103\uffe0\104\uffe0\001\002\000\042\007\062\013\076" +
    "\021\066\022\061\023\063\024\065\025\075\026\070\030" +
    "\067\032\077\034\072\041\073\055\100\056\074\072\064" +
    "\073\071\001\002\000\040\031\253\032\116\033\113\034" +
    "\105\035\117\036\102\037\110\040\104\042\106\043\120" +
    "\044\107\045\114\046\115\047\111\050\112\001\002\000" +
    "\004\005\006\001\002\000\076\005\uffe1\006\uffe1\007\uffe1" +
    "\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\027\uffe1\052" +
    "\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1\061\uffe1\063\uffe1" +
    "\064\uffe1\065\uffe1\066\uffe1\067\uffe1\072\uffe1\073\uffe1\075" +
    "\uffe1\076\uffe1\077\uffe1\100\uffe1\101\uffe1\102\uffe1\103\uffe1" +
    "\104\uffe1\001\002\000\042\007\062\013\076\021\066\022" +
    "\061\023\063\024\065\025\075\026\070\030\067\032\077" +
    "\034\072\041\073\055\100\056\074\072\064\073\071\001" +
    "\002\000\040\031\257\032\116\033\113\034\105\035\117" +
    "\036\102\037\110\040\104\042\106\043\120\044\107\045" +
    "\114\046\115\047\111\050\112\001\002\000\004\005\006" +
    "\001\002\000\100\005\uffe3\006\uffe3\007\uffe3\014\uffe3\015" +
    "\uffe3\016\uffe3\017\uffe3\020\uffe3\027\uffe3\052\uffe3\053\uffe3" +
    "\054\uffe3\055\uffe3\056\uffe3\061\uffe3\062\uffe3\063\uffe3\064" +
    "\uffe3\065\uffe3\066\uffe3\067\uffe3\072\uffe3\073\uffe3\075\uffe3" +
    "\076\uffe3\077\uffe3\100\uffe3\101\uffe3\102\uffe3\103\uffe3\104" +
    "\uffe3\001\002\000\004\010\262\001\002\000\076\005\uffc9" +
    "\006\uffc9\007\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020" +
    "\uffc9\027\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9" +
    "\061\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9\072" +
    "\uffc9\073\uffc9\075\uffc9\076\uffc9\077\uffc9\100\uffc9\101\uffc9" +
    "\102\uffc9\103\uffc9\104\uffc9\001\002\000\004\010\264\001" +
    "\002\000\076\005\uffc8\006\uffc8\007\uffc8\014\uffc8\015\uffc8" +
    "\016\uffc8\017\uffc8\020\uffc8\027\uffc8\052\uffc8\053\uffc8\054" +
    "\uffc8\055\uffc8\056\uffc8\061\uffc8\063\uffc8\064\uffc8\065\uffc8" +
    "\066\uffc8\067\uffc8\072\uffc8\073\uffc8\075\uffc8\076\uffc8\077" +
    "\uffc8\100\uffc8\101\uffc8\102\uffc8\103\uffc8\104\uffc8\001\002" +
    "\000\042\007\062\013\076\021\066\022\061\023\063\024" +
    "\065\025\075\026\070\030\067\032\077\034\072\041\073" +
    "\055\100\056\074\072\064\073\071\001\002\000\040\032" +
    "\116\033\113\034\105\035\117\036\102\037\110\040\104" +
    "\042\106\043\120\044\107\045\114\046\115\047\111\050" +
    "\112\074\267\001\002\000\042\007\062\013\076\021\066" +
    "\022\061\023\063\024\065\025\075\026\070\030\067\032" +
    "\077\034\072\041\073\055\100\056\074\072\064\073\071" +
    "\001\002\000\040\031\271\032\116\033\113\034\105\035" +
    "\117\036\102\037\110\040\104\042\106\043\120\044\107" +
    "\045\114\046\115\047\111\050\112\001\002\000\004\010" +
    "\272\001\002\000\076\005\ufff4\006\ufff4\007\ufff4\014\ufff4" +
    "\015\ufff4\016\ufff4\017\ufff4\020\ufff4\027\ufff4\052\ufff4\053" +
    "\ufff4\054\ufff4\055\ufff4\056\ufff4\061\ufff4\063\ufff4\064\ufff4" +
    "\065\ufff4\066\ufff4\067\ufff4\072\ufff4\073\ufff4\075\ufff4\076" +
    "\ufff4\077\ufff4\100\ufff4\101\ufff4\102\ufff4\103\ufff4\104\ufff4" +
    "\001\002\000\102\002\uffff\005\uffff\006\uffff\007\uffff\014" +
    "\uffff\015\uffff\016\uffff\017\uffff\020\uffff\027\uffff\052\uffff" +
    "\053\uffff\054\uffff\055\uffff\056\uffff\061\uffff\062\uffff\063" +
    "\uffff\064\uffff\065\uffff\066\uffff\067\uffff\072\uffff\073\uffff" +
    "\075\uffff\076\uffff\077\uffff\100\uffff\101\uffff\102\uffff\103" +
    "\uffff\104\uffff\001\002\000\076\005\ufffe\006\ufffe\007\ufffe" +
    "\014\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\027\ufffe\052" +
    "\ufffe\053\ufffe\054\ufffe\055\ufffe\056\ufffe\061\ufffe\063\ufffe" +
    "\064\ufffe\065\ufffe\066\ufffe\067\ufffe\072\ufffe\073\ufffe\075" +
    "\ufffe\076\ufffe\077\ufffe\100\ufffe\101\ufffe\102\ufffe\103\ufffe" +
    "\104\ufffe\001\002\000\006\010\276\074\215\001\002\000" +
    "\124\005\uffd3\006\uffd3\007\uffd3\013\uffd3\014\uffd3\015\uffd3" +
    "\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024" +
    "\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\032\uffd3\034\uffd3" +
    "\041\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3\061" +
    "\uffd3\063\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3\072\uffd3" +
    "\073\uffd3\075\uffd3\076\uffd3\077\uffd3\100\uffd3\101\uffd3\102" +
    "\uffd3\103\uffd3\104\uffd3\001\002\000\042\007\062\013\076" +
    "\021\066\022\061\023\063\024\065\025\075\026\070\030" +
    "\067\032\077\034\072\041\073\055\100\056\074\072\064" +
    "\073\071\001\002\000\040\031\301\032\116\033\113\034" +
    "\105\035\117\036\102\037\110\040\104\042\106\043\120" +
    "\044\107\045\114\046\115\047\111\050\112\001\002\000" +
    "\004\005\302\001\002\000\010\006\306\066\311\067\310" +
    "\001\002\000\010\006\322\066\311\067\310\001\002\000" +
    "\010\006\uffec\066\uffec\067\uffec\001\002\000\076\005\006" +
    "\006\316\007\046\014\020\015\057\016\044\017\016\020" +
    "\053\027\011\052\037\053\041\054\054\055\026\056\023" +
    "\061\034\063\007\064\042\065\012\066\311\067\310\072" +
    "\022\073\047\075\056\076\040\077\032\100\050\101\036" +
    "\102\031\103\055\104\051\001\002\000\076\005\uffed\006" +
    "\uffed\007\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed" +
    "\027\uffed\052\uffed\053\uffed\054\uffed\055\uffed\056\uffed\061" +
    "\uffed\063\uffed\064\uffed\065\uffed\066\uffed\067\uffed\072\uffed" +
    "\073\uffed\075\uffed\076\uffed\077\uffed\100\uffed\101\uffed\102" +
    "\uffed\103\uffed\104\uffed\001\002\000\076\005\uffe9\006\uffe9" +
    "\007\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\027" +
    "\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\061\uffe9" +
    "\063\uffe9\064\uffe9\065\uffe9\066\uffe9\067\uffe9\072\uffe9\073" +
    "\uffe9\075\uffe9\076\uffe9\077\uffe9\100\uffe9\101\uffe9\102\uffe9" +
    "\103\uffe9\104\uffe9\001\002\000\004\051\314\001\002\000" +
    "\042\007\062\013\076\021\066\022\061\023\063\024\065" +
    "\025\075\026\070\030\067\032\077\034\072\041\073\055" +
    "\100\056\074\072\064\073\071\001\002\000\040\032\116" +
    "\033\113\034\105\035\117\036\102\037\110\040\104\042" +
    "\106\043\120\044\107\045\114\046\115\047\111\050\112" +
    "\051\313\001\002\000\076\005\uffe7\006\uffe7\007\uffe7\014" +
    "\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\027\uffe7\052\uffe7" +
    "\053\uffe7\054\uffe7\055\uffe7\056\uffe7\061\uffe7\063\uffe7\064" +
    "\uffe7\065\uffe7\066\uffe7\067\uffe7\072\uffe7\073\uffe7\075\uffe7" +
    "\076\uffe7\077\uffe7\100\uffe7\101\uffe7\102\uffe7\103\uffe7\104" +
    "\uffe7\001\002\000\076\005\uffe6\006\uffe6\007\uffe6\014\uffe6" +
    "\015\uffe6\016\uffe6\017\uffe6\020\uffe6\027\uffe6\052\uffe6\053" +
    "\uffe6\054\uffe6\055\uffe6\056\uffe6\061\uffe6\063\uffe6\064\uffe6" +
    "\065\uffe6\066\uffe6\067\uffe6\072\uffe6\073\uffe6\075\uffe6\076" +
    "\uffe6\077\uffe6\100\uffe6\101\uffe6\102\uffe6\103\uffe6\104\uffe6" +
    "\001\002\000\076\005\uffe8\006\uffe8\007\uffe8\014\uffe8\015" +
    "\uffe8\016\uffe8\017\uffe8\020\uffe8\027\uffe8\052\uffe8\053\uffe8" +
    "\054\uffe8\055\uffe8\056\uffe8\061\uffe8\063\uffe8\064\uffe8\065" +
    "\uffe8\066\uffe8\067\uffe8\072\uffe8\073\uffe8\075\uffe8\076\uffe8" +
    "\077\uffe8\100\uffe8\101\uffe8\102\uffe8\103\uffe8\104\uffe8\001" +
    "\002\000\076\005\uffee\006\uffee\007\uffee\014\uffee\015\uffee" +
    "\016\uffee\017\uffee\020\uffee\027\uffee\052\uffee\053\uffee\054" +
    "\uffee\055\uffee\056\uffee\061\uffee\063\uffee\064\uffee\065\uffee" +
    "\066\uffee\067\uffee\072\uffee\073\uffee\075\uffee\076\uffee\077" +
    "\uffee\100\uffee\101\uffee\102\uffee\103\uffee\104\uffee\001\002" +
    "\000\076\005\006\006\uffea\007\046\014\020\015\057\016" +
    "\044\017\016\020\053\027\011\052\037\053\041\054\054" +
    "\055\026\056\023\061\034\063\007\064\042\065\012\066" +
    "\uffea\067\uffea\072\022\073\047\075\056\076\040\077\032" +
    "\100\050\101\036\102\031\103\055\104\051\001\002\000" +
    "\010\006\uffeb\066\uffeb\067\uffeb\001\002\000\076\005\006" +
    "\006\323\007\046\014\020\015\057\016\044\017\016\020" +
    "\053\027\011\052\037\053\041\054\054\055\026\056\023" +
    "\061\034\063\007\064\042\065\012\066\311\067\310\072" +
    "\022\073\047\075\056\076\040\077\032\100\050\101\036" +
    "\102\031\103\055\104\051\001\002\000\076\005\uffef\006" +
    "\uffef\007\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef" +
    "\027\uffef\052\uffef\053\uffef\054\uffef\055\uffef\056\uffef\061" +
    "\uffef\063\uffef\064\uffef\065\uffef\066\uffef\067\uffef\072\uffef" +
    "\073\uffef\075\uffef\076\uffef\077\uffef\100\uffef\101\uffef\102" +
    "\uffef\103\uffef\104\uffef\001\002\000\076\005\ufff0\006\ufff0" +
    "\007\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\027" +
    "\ufff0\052\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0\061\ufff0" +
    "\063\ufff0\064\ufff0\065\ufff0\066\ufff0\067\ufff0\072\ufff0\073" +
    "\ufff0\075\ufff0\076\ufff0\077\ufff0\100\ufff0\101\ufff0\102\ufff0" +
    "\103\ufff0\104\ufff0\001\002\000\004\031\325\001\002\000" +
    "\004\010\326\001\002\000\076\005\uffc5\006\uffc5\007\uffc5" +
    "\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\027\uffc5\052" +
    "\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5\061\uffc5\063\uffc5" +
    "\064\uffc5\065\uffc5\066\uffc5\067\uffc5\072\uffc5\073\uffc5\075" +
    "\uffc5\076\uffc5\077\uffc5\100\uffc5\101\uffc5\102\uffc5\103\uffc5" +
    "\104\uffc5\001\002\000\006\005\006\061\330\001\002\000" +
    "\004\030\332\001\002\000\076\005\uffe5\006\uffe5\007\uffe5" +
    "\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\027\uffe5\052" +
    "\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\061\uffe5\063\uffe5" +
    "\064\uffe5\065\uffe5\066\uffe5\067\uffe5\072\uffe5\073\uffe5\075" +
    "\uffe5\076\uffe5\077\uffe5\100\uffe5\101\uffe5\102\uffe5\103\uffe5" +
    "\104\uffe5\001\002\000\042\007\062\013\076\021\066\022" +
    "\061\023\063\024\065\025\075\026\070\030\067\032\077" +
    "\034\072\041\073\055\100\056\074\072\064\073\071\001" +
    "\002\000\040\031\334\032\116\033\113\034\105\035\117" +
    "\036\102\037\110\040\104\042\106\043\120\044\107\045" +
    "\114\046\115\047\111\050\112\001\002\000\004\005\006" +
    "\001\002\000\100\005\uffe2\006\uffe2\007\uffe2\014\uffe2\015" +
    "\uffe2\016\uffe2\017\uffe2\020\uffe2\027\uffe2\052\uffe2\053\uffe2" +
    "\054\uffe2\055\uffe2\056\uffe2\061\uffe2\062\uffe2\063\uffe2\064" +
    "\uffe2\065\uffe2\066\uffe2\067\uffe2\072\uffe2\073\uffe2\075\uffe2" +
    "\076\uffe2\077\uffe2\100\uffe2\101\uffe2\102\uffe2\103\uffe2\104" +
    "\uffe2\001\002\000\004\052\337\001\002\000\004\030\340" +
    "\001\002\000\042\007\062\013\076\021\066\022\061\023" +
    "\063\024\065\025\075\026\070\030\067\032\077\034\072" +
    "\041\073\055\100\056\074\072\064\073\071\001\002\000" +
    "\040\031\342\032\116\033\113\034\105\035\117\036\102" +
    "\037\110\040\104\042\106\043\120\044\107\045\114\046" +
    "\115\047\111\050\112\001\002\000\004\010\343\001\002" +
    "\000\076\005\uffde\006\uffde\007\uffde\014\uffde\015\uffde\016" +
    "\uffde\017\uffde\020\uffde\027\uffde\052\uffde\053\uffde\054\uffde" +
    "\055\uffde\056\uffde\061\uffde\063\uffde\064\uffde\065\uffde\066" +
    "\uffde\067\uffde\072\uffde\073\uffde\075\uffde\076\uffde\077\uffde" +
    "\100\uffde\101\uffde\102\uffde\103\uffde\104\uffde\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\342\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\003\013\004\020\006\012" +
    "\007\016\010\042\011\014\012\032\013\007\015\023\016" +
    "\044\017\027\024\034\031\024\032\051\033\026\001\001" +
    "\000\004\003\335\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\026\205\027\206\030\274" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\013" +
    "\006\012\007\273\010\042\011\014\012\032\013\007\015" +
    "\023\016\044\017\027\024\034\031\024\032\051\033\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\202\031\203" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\160\001\001\000\004\005\157\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\145\001" +
    "\001\000\004\005\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\142\001\001\000\004\005\137\001" +
    "\001\000\004\005\136\001\001\000\004\005\135\001\001" +
    "\000\004\005\134\001\001\000\004\005\133\001\001\000" +
    "\004\005\132\001\001\000\004\005\131\001\001\000\004" +
    "\005\126\001\001\000\004\005\125\001\001\000\004\005" +
    "\124\001\001\000\004\005\123\001\001\000\004\005\122" +
    "\001\001\000\004\005\121\001\001\000\004\005\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\025\146" +
    "\034\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\151\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\154\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\167" +
    "\001\001\000\002\001\001\000\004\005\171\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\026\205\027\206\030\204\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\213\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\026\205\027\216" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\220\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\224\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\233\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\006\012\014\241\031\024\032\051\033\240\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\242\001\001" +
    "\000\002\001\001\000\004\005\244\001\001\000\002\001" +
    "\001\000\004\003\246\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\251\001\001\000\002\001\001\000" +
    "\004\003\253\001\001\000\002\001\001\000\004\005\255" +
    "\001\001\000\002\001\001\000\004\003\257\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\265\001\001\000" +
    "\002\001\001\000\004\005\267\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\277\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\020\302\021\304\022\306\023\303\001\001\000\010" +
    "\021\320\022\306\023\317\001\001\000\002\001\001\000" +
    "\042\003\013\004\316\006\012\007\016\010\042\011\014" +
    "\012\032\013\007\015\023\016\044\017\027\022\314\024" +
    "\034\031\024\032\051\033\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\311\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\013\006" +
    "\012\007\273\010\042\011\014\012\032\013\007\015\023" +
    "\016\044\017\027\024\034\031\024\032\051\033\026\001" +
    "\001\000\002\001\001\000\042\003\013\004\316\006\012" +
    "\007\016\010\042\011\014\012\032\013\007\015\023\016" +
    "\044\017\027\022\314\024\034\031\024\032\051\033\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\330" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\332\001\001\000\002\001\001\000\004\003\334\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\340\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Instruccion arbol;
    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("Error caracter no esperado");
        System.err.println(s);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {

//Codigo de acciones
      

  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PARACORCHETE ::= acorchete E ccorchete 
            {
              LinkedList<NodoAST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    RESULT = new LinkedList<NodoAST>();
                    RESULT.add(new ArreglosNew(e, eleft, eright));
              
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARACORCHETE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // PARACORCHETE ::= PARACORCHETE acorchete E ccorchete 
            {
              LinkedList<NodoAST> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<NodoAST> lista = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    RESULT = lista;
                    RESULT.add(new ArreglosNew(e, eleft, eright));
              
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARACORCHETE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OPCIONESNEW ::= PARACORCHETE 
            {
              Expresion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> d = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 //recibiria una lista de Exp
                RESULT = new ParaCorchete(d);
              
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONESNEW",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // E ::= apar E cpar 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = e;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // E ::= neww T OPCIONESNEW 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		TipoContenedor t = (TipoContenedor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 //luego de t pone otro terminal para bajar una y meter las demas opciones del new
            RESULT = new Newww(t, e, eleft,eright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E ::= write_file apar E coma E cpar 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion ruta = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion contenido = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new EscribirArchivo(ruta, contenido, aleft, aright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E ::= read_file apar E cpar 
            {
              Expresion RESULT =null;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion ruta = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new LeerArchivo(ruta, rutaleft, rutaright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E ::= menosmenos id 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
         RESULT = new OPPreFijo(new Identificador(id, null, idleft, idleft), Operacion.Operador.MENOS, idleft, idright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E ::= masmas id 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new OPPreFijo(new Identificador(id, null, idleft, idleft), Operacion.Operador.MAS, idleft, idright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E ::= id menosmenos 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new OPPostFijo(new Identificador(id, null, idleft, idleft), Operacion.Operador.MENOS, idleft, idright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E ::= id masmas 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new OPPostFijo(new Identificador(id, null, idleft, idleft), Operacion.Operador.MAS, idleft, idright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E ::= E interrogacion E dospuntos E 
            {
              Expresion RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int vddleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int vddright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion vdd = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int fakeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fakeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion fake = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new OpTernario(cond, vdd, fake,condleft, condright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E ::= id 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Identificador(id, new TipoContenedor(Simbolo.Tipo.ID), idleft, idright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E ::= falsee 
            {
              Expresion RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ee = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Booleano(ee,new TipoContenedor(Simbolo.Tipo.BOOLEAN), eeleft, eeright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E ::= truee 
            {
              Expresion RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ee = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Booleano(ee,new TipoContenedor(Simbolo.Tipo.BOOLEAN), eeleft, eeright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E ::= charER 
            {
              Expresion RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ee = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        
        Object ww = ee.substring(1,ee.length()-1);
        RESULT = new Caracter(ww, new TipoContenedor(Simbolo.Tipo.CHAR), eeleft, eeright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E ::= decimal 
            {
              Expresion RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object ee = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Decimal(ee, new TipoContenedor(Simbolo.Tipo.DOUBLE), eeleft, eeright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E ::= entero 
            {
              Expresion RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object ee = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Entero(ee, new TipoContenedor(Simbolo.Tipo.INT), eeleft, eeright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E ::= cadena 
            {
              Expresion RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ee = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        //ee.substring(1,ee.length()-1)
        RESULT = new Cadena(ee, new TipoContenedor(Simbolo.Tipo.STRING), eeleft, eeright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E ::= E menos E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Aritmetica(e1, e2, Operacion.Operador.MENOS, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E ::= E potencia E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Aritmetica(e1, e2, Operacion.Operador.POTENCIA, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E ::= E dividir E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Aritmetica(e1, e2, Operacion.Operador.DIVIDIR, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E ::= E por E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Aritmetica(e1, e2, Operacion.Operador.POR, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E ::= E mas E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Aritmetica(e1, e2, Operacion.Operador.MAS, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E ::= E menorigualq E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Relacional(e1, e2, Operacion.Operador.MENORIGUALQ, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E ::= E mayorigualq E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Relacional(e1, e2, Operacion.Operador.MAYORIGUALQ, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E ::= E menorq E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Relacional(e1, e2, Operacion.Operador.MENORQ, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E ::= E mayorq E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Relacional(e1, e2, Operacion.Operador.MAYORQ, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E ::= diferenteunario E 
            {
              Expresion RESULT =null;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Logica(e1, Operacion.Operador.NOT, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E ::= E diferente E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Relacional(e1, e2, Operacion.Operador.DIFERENTE, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E ::= E igualigual E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Relacional(e1, e2, Operacion.Operador.IGUAL, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E ::= E aand E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Logica(e1, e2, Operacion.Operador.AND, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E ::= E oor E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Logica(e1, e2, Operacion.Operador.OR, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E ::= mas E 
            {
              Expresion RESULT =null;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Aritmetica(e1, Operacion.Operador.POSITIVO, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E ::= menos E 
            {
              Expresion RESULT =null;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Aritmetica(e1, Operacion.Operador.NEGATIVO, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // T ::= doublee 
            {
              TipoContenedor RESULT =null;
		
        //RESULT = Simbolo.Tipo.DOUBLE;
        RESULT = new TipoContenedor(Simbolo.Tipo.DOUBLE);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // T ::= booleann 
            {
              TipoContenedor RESULT =null;
		
        //RESULT = Simbolo.Tipo.BOOLEAN;
        RESULT = new TipoContenedor(Simbolo.Tipo.BOOLEAN);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // T ::= stringg 
            {
              TipoContenedor RESULT =null;
		
        //RESULT = Simbolo.Tipo.STRING;
        RESULT = new TipoContenedor(Simbolo.Tipo.STRING);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // T ::= charr 
            {
              TipoContenedor RESULT =null;
		
        //RESULT = Simbolo.Tipo.CHAR;
        RESULT = new TipoContenedor(Simbolo.Tipo.CHAR);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // T ::= intt 
            {
              TipoContenedor RESULT =null;
		
        //RESULT = Simbolo.Tipo.INT;
        RESULT = new TipoContenedor(Simbolo.Tipo.INT);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IMPRESIONES ::= imprimir apar cpar puntoycoma 
            {
              Instruccion RESULT =null;
		
                RESULT = new ImprimirTS("hola");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESIONES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IMPRESIONES ::= printLinea apar E cpar puntoycoma 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                RESULT = new Printer(e1, e1left, e1right, true);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESIONES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IMPRESIONES ::= print apar E cpar puntoycoma 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                RESULT = new Printer(e1, e1left, e1right);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESIONES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PREPOSTFIJOS ::= menosmenos id puntoycoma 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                RESULT = new OPPreFijo(new Identificador(id, null, idleft, idleft), Operacion.Operador.MENOS, idleft, idright);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PREPOSTFIJOS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PREPOSTFIJOS ::= masmas id puntoycoma 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                RESULT = new OPPreFijo(new Identificador(id, null, idleft, idleft), Operacion.Operador.MAS, idleft, idright);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PREPOSTFIJOS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PREPOSTFIJOS ::= id menosmenos puntoycoma 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                RESULT = new OPPostFijo(new Identificador(id, null, idleft, idleft), Operacion.Operador.MENOS, idleft, idright);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PREPOSTFIJOS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PREPOSTFIJOS ::= id masmas puntoycoma 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                RESULT = new OPPostFijo(new Identificador(id, null, idleft, idleft), Operacion.Operador.MAS, idleft, idright);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PREPOSTFIJOS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VARIABLE_DECLARATOR_ID ::= id 
            {
              LinkedList<NodoAST> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                            RESULT = new LinkedList<NodoAST>();
                            RESULT.add(new Identificador(id, idleft, idright));
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE_DECLARATOR_ID",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VARIABLE_DECLARATOR_ID ::= VARIABLE_DECLARATOR_ID acorchete ccorchete 
            {
              LinkedList<NodoAST> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<NodoAST> i = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                            RESULT = i;
                            RESULT.add(new Corchetee());                                
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE_DECLARATOR_ID",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VARIABLE_DECLARATOR ::= VARIABLE_DECLARATOR_ID 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> d = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                            RESULT = d;
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE_DECLARATOR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VARIABLE_DECLARATOR ::= VARIABLE_DECLARATOR_ID igual E 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<NodoAST> lista = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                            RESULT = new VariableDeclarator(lista, e, eleft, eright);
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE_DECLARATOR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VARIABLE_DECLARATORS ::= VARIABLE_DECLARATOR 
            {
              LinkedList<Object> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                            RESULT = new LinkedList<Object>();
                            RESULT.add(i);
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE_DECLARATORS",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VARIABLE_DECLARATORS ::= VARIABLE_DECLARATORS coma VARIABLE_DECLARATOR 
            {
              LinkedList<Object> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Object> d = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                            RESULT = d;
                            RESULT.add(i);
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE_DECLARATORS",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FIELD_DECLARATION ::= id igual E puntoycoma 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 //asignacion
                        RESULT = new Asignacion(id, e, idleft, idright);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FIELD_DECLARATION",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FIELD_DECLARATION ::= T VARIABLE_DECLARATORS puntoycoma 
            {
              Instruccion RESULT =null;
		int tipopleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tipopright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		TipoContenedor tipop = (TipoContenedor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Object> lista = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        RESULT = new Declaraciones(tipop, lista, tipopleft, tipopright);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FIELD_DECLARATION",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FIELD_DECLARATION ::= FIELD_MODIFIERS T VARIABLE_DECLARATORS puntoycoma 
            {
              Instruccion RESULT =null;
		int vileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int viright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<String> vi = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int tipopleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tipopright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		TipoContenedor tipop = (TipoContenedor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Object> lista = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        RESULT = new Declaraciones(vi, tipop, lista, tipopleft, tipopright);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FIELD_DECLARATION",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FIELD_MODIFIER ::= finall 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = d; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FIELD_MODIFIER",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FIELD_MODIFIER ::= estatico 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = d; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FIELD_MODIFIER",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FIELD_MODIFIER ::= privado 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = d; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FIELD_MODIFIER",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FIELD_MODIFIER ::= protegido 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = d; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FIELD_MODIFIER",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FIELD_MODIFIER ::= publico 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = d;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FIELD_MODIFIER",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FIELD_MODIFIERS ::= FIELD_MODIFIER 
            {
              LinkedList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        RESULT = new LinkedList<String>();
                        RESULT.add(i);
                   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FIELD_MODIFIERS",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FIELD_MODIFIERS ::= FIELD_MODIFIERS FIELD_MODIFIER 
            {
              LinkedList<String> RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<String> j = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        RESULT = j;
                        RESULT.add(i);
                   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FIELD_MODIFIERS",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FOR_INIT ::= FIELD_DECLARATION 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		      
            RESULT = d;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR_INIT",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CICLOS ::= forr apar FOR_INIT E puntoycoma E cpar S 
            {
              Instruccion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int inicioleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int inicioright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Instruccion inicio = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int aumetoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aumetoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion aumeto = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion s1 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Forr(inicio, cond, aumeto, s1, fleft, fright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CICLOS ::= doo S whilee apar E cpar puntoycoma 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Instruccion s1 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
        RESULT = new DoWhile(s1, e1, dleft, dright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CICLOS ::= continuee puntoycoma 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new Continuee(eleft, eright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CICLOS ::= breakk puntoycoma 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new Breakk(eleft, eright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CICLOS ::= whilee apar E cpar S 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion s1 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new WhileCiclo(e1, s1, e1left, e1right);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IF_LIST ::= IF_LIST elsee iff apar E cpar S 
            {
              LinkedList<IfLista> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		LinkedList<IfLista> l = (LinkedList<IfLista>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion s1 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = l;
            RESULT.add(new IfLista(e1, s1, e1left, e1right));
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF_LIST",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IF_LIST ::= iff apar E cpar S 
            {
              LinkedList<IfLista> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion s1 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new LinkedList<IfLista>();
            RESULT.add(new IfLista(e1, s1, e1left, e1right));
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF_LIST",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IF_STATEMENT ::= IF_LIST 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<IfLista> i = (LinkedList<IfLista>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Iff(null, i, ileft, iright);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IF_STATEMENT ::= IF_LIST elsee S 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<IfLista> i = (LinkedList<IfLista>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion s1 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Iff(s1, i, ileft, iright);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SWITCH_LABEL ::= defaultt dospuntos 
            {
              NodoAST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    RESULT = new Defaultt(dleft, dright);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_LABEL",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SWITCH_LABEL ::= casee E dospuntos 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    RESULT = new Casee(e, eleft, eright);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_LABEL",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SWITCH_LABELS ::= SWITCH_LABELS SWITCH_LABEL 
            {
              LinkedList<NodoAST> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> f = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int dnodoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dnodoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST dnodo = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    RESULT = f;
                    RESULT.add(dnodo);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_LABELS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SWITCH_LABELS ::= SWITCH_LABEL 
            {
              LinkedList<NodoAST> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST i = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    RESULT = new LinkedList<>();
                    RESULT.add(i);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_LABELS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SWITCH_BLOCK_STATEMENT_GROUP ::= SWITCH_LABELS B 
            {
              Instruccion RESULT =null;
		int listaCaseleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaCaseright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> listaCase = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int listaSentenciasleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int listaSentenciasright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> listaSentencias = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 //cambiar la S por una B y toca instanciar una clase Bloque para mandar a guardar
                    Bloque blo = new Bloque(listaSentencias);
                    RESULT = new SwitchBlockStatement_Group(listaCase, blo);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_BLOCK_STATEMENT_GROUP",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SWITCH_BLOCK_STATEMENT_GROUPS ::= SWITCH_BLOCK_STATEMENT_GROUPS SWITCH_BLOCK_STATEMENT_GROUP 
            {
              LinkedList<NodoAST> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> f = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int dnodoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dnodoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion dnodo = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    RESULT = f;
                    RESULT.add(dnodo);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_BLOCK_STATEMENT_GROUPS",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SWITCH_BLOCK_STATEMENT_GROUPS ::= SWITCH_BLOCK_STATEMENT_GROUP 
            {
              LinkedList<NodoAST> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    RESULT = new LinkedList<>();
                    RESULT.add(i);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_BLOCK_STATEMENT_GROUPS",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SWITCH_BLOCK ::= switchh apar E cpar allave cllave 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
                    //no se hace nada
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_BLOCK",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SWITCH_BLOCK ::= switchh apar E cpar allave SWITCH_LABELS cllave 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int swileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int swiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> swi = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    RESULT = new SwitchBlock(e, eleft, eright, null, swi);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_BLOCK",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SWITCH_BLOCK ::= switchh apar E cpar allave SWITCH_BLOCK_STATEMENT_GROUPS cllave 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int grupoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int gruporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> grupo = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    RESULT = new SwitchBlock(e, eleft, eright, grupo, null);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_BLOCK",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SWITCH_BLOCK ::= switchh apar E cpar allave SWITCH_BLOCK_STATEMENT_GROUPS SWITCH_LABELS cllave 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<NodoAST> g = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> s = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    RESULT = new SwitchBlock(e, eleft, eright, g, s);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_BLOCK",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // COND ::= SWITCH_BLOCK 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = d;
      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // COND ::= IF_STATEMENT 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = d;
      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ARCHIVOS ::= grafica apar E coma E cpar puntoycoma 
            {
              NodoAST RESULT =null;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion ruta = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion contenido = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                RESULT = new Graficar(ruta, contenido, rutaleft, rutaright);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARCHIVOS",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ARCHIVOS ::= write_file apar E coma E cpar puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion ruta = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion contenido = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                RESULT = new EscribirArchivo(ruta, contenido, aleft, aright);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARCHIVOS",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ARCHIVOS ::= read_file apar E cpar puntoycoma 
            {
              NodoAST RESULT =null;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion ruta = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                RESULT = new LeerArchivo(ruta, rutaleft, rutaright);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARCHIVOS",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // J ::= ARCHIVOS 
            {
              NodoAST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST d = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = d;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("J",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // J ::= PREPOSTFIJOS 
            {
              NodoAST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion d = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = d;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("J",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // J ::= IMPRESIONES 
            {
              NodoAST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = d;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("J",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // J ::= COND 
            {
              NodoAST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = d;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("J",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // J ::= CICLOS 
            {
              NodoAST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = d;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("J",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // J ::= S 
            {
              NodoAST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = d;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("J",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // J ::= FIELD_DECLARATION 
            {
              NodoAST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = d;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("J",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // B ::= J 
            {
              LinkedList<NodoAST> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST i = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new LinkedList<>();
        RESULT.add(i);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // B ::= B J 
            {
              LinkedList<NodoAST> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> l = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST i = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = l;
        RESULT.add(i);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= allave B cllave 
            {
              Instruccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> l = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new Bloque(l);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // I ::= S 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion l = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        this.parser.arbol = l;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("I",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= I EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

