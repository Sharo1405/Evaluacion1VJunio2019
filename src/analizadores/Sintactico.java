
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jun 14 11:35:46 CST 2019
//----------------------------------------------------

package analizadores;

import ast.ArbolAST;
import ast.NodoAST;
import ast.entorno.Simbolo;
import ast.expresiones.*;
import ast.expresiones.arreglos.*;
import ast.expresiones.operacion.*;
import ast.expresiones.primitivos.*;
import ast.importaciones.Importar;
import ast.instrucciones.declaraciones.*;
import ast.instrucciones.*;
import ast.instrucciones.Printer;
import ast.instrucciones.Seleccion.*;
import ast.instrucciones.ciclos.*;
import ast.instrucciones.ciclos.RetCont.*;
import java.util.LinkedList;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jun 14 11:35:46 CST 2019
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\230\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\036\004\000\002\036\003\000\002\036\003" +
    "\000\002\041\006\000\002\041\005\000\002\037\004\000" +
    "\002\037\003\000\002\040\010\000\002\040\012\000\002" +
    "\040\007\000\002\040\011\000\002\054\003\000\002\054" +
    "\004\000\002\043\004\000\002\043\003\000\002\044\003" +
    "\000\002\044\003\000\002\052\010\000\002\052\012\000" +
    "\002\052\007\000\002\052\011\000\002\045\010\000\002" +
    "\045\007\000\002\045\007\000\002\045\010\000\002\045" +
    "\003\000\002\051\005\000\002\051\004\000\002\047\005" +
    "\000\002\047\003\000\002\050\005\000\002\050\004\000" +
    "\002\046\005\000\002\046\004\000\002\033\006\000\002" +
    "\033\005\000\002\030\005\000\002\030\003\000\002\027" +
    "\005\000\002\027\003\000\002\026\005\000\002\026\003" +
    "\000\002\003\005\000\002\004\004\000\002\004\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\056\005\000\002\056\004" +
    "\000\002\055\006\000\002\055\005\000\002\055\006\000" +
    "\002\055\007\000\002\053\007\000\002\053\011\000\002" +
    "\024\007\000\002\024\011\000\002\024\011\000\002\011" +
    "\003\000\002\011\003\000\002\017\012\000\002\017\011" +
    "\000\002\017\011\000\002\017\010\000\002\020\003\000" +
    "\002\020\004\000\002\023\004\000\002\021\003\000\002" +
    "\021\004\000\002\022\005\000\002\022\004\000\002\012" +
    "\005\000\002\012\003\000\002\013\007\000\002\013\011" +
    "\000\002\010\007\000\002\010\004\000\002\010\004\000" +
    "\002\010\011\000\002\010\012\000\002\014\003\000\002" +
    "\032\004\000\002\032\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\015\007\000\002" +
    "\015\007\000\002\015\006\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\005\004\000" +
    "\002\005\004\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\004\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\007\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\004\000\002" +
    "\005\006\000\002\005\010\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\035\005\000\002\035\003" +
    "\000\002\034\003\000\002\025\006\000\002\025\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0160\000\012\005\014\077\007\107\013\110\015\001" +
    "\002\000\012\002\ufffd\077\007\107\u0160\110\015\001\002" +
    "\000\004\110\u0155\001\002\000\004\002\000\001\002\000" +
    "\006\104\u0154\110\ufff3\001\002\000\004\002\uffff\001\002" +
    "\000\010\002\ufff8\077\ufff8\110\ufff8\001\002\000\004\002" +
    "\u0153\001\002\000\004\021\u0151\001\002\000\064\007\326" +
    "\014\043\015\046\016\042\017\040\020\035\030\276\053" +
    "\321\054\322\055\331\056\313\057\310\062\317\064\274" +
    "\065\323\066\277\073\306\074\327\076\333\103\315\105" +
    "\332\106\330\110\312\113\034\114\334\001\002\000\004" +
    "\007\020\001\002\000\010\002\ufffc\077\007\110\015\001" +
    "\002\000\010\002\ufff9\077\ufff9\110\ufff9\001\002\000\006" +
    "\005\021\111\022\001\002\000\036\007\047\014\043\015" +
    "\046\016\042\017\040\020\035\077\026\100\033\101\041" +
    "\102\032\103\050\104\044\110\052\113\034\001\002\000" +
    "\004\007\023\001\002\000\004\005\024\001\002\000\036" +
    "\007\047\014\043\015\046\016\042\017\040\020\035\077" +
    "\026\100\033\101\041\102\032\103\050\104\044\110\052" +
    "\113\034\001\002\000\036\007\uffa6\014\uffa6\015\uffa6\016" +
    "\uffa6\017\uffa6\020\uffa6\077\uffa6\100\uffa6\101\uffa6\102\uffa6" +
    "\103\uffa6\104\uffa6\110\260\113\uffa6\001\002\000\036\007" +
    "\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\077\uffa5" +
    "\100\uffa5\101\uffa5\102\uffa5\103\uffa5\104\uffa5\110\uffa5\113" +
    "\uffa5\001\002\000\040\006\uffef\007\uffef\014\uffef\015\uffef" +
    "\016\uffef\017\uffef\020\uffef\077\uffef\100\uffef\101\uffef\102" +
    "\uffef\103\uffef\104\uffef\110\uffef\113\uffef\001\002\000\004" +
    "\007\113\001\002\000\034\007\047\014\043\015\046\016" +
    "\042\017\040\020\035\077\026\100\033\101\041\102\032" +
    "\103\050\104\044\113\034\001\002\000\036\007\uffa2\014" +
    "\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\077\uffa2\100\uffa2" +
    "\101\uffa2\102\uffa2\103\uffa2\104\uffa2\110\uffa2\113\uffa2\001" +
    "\002\000\036\007\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4" +
    "\020\uffa4\077\uffa4\100\uffa4\101\uffa4\102\uffa4\103\uffa4\104" +
    "\uffa4\110\uffa4\113\uffa4\001\002\000\010\007\uff92\011\uff92" +
    "\112\uff92\001\002\000\010\007\uff95\011\uff95\112\uff95\001" +
    "\002\000\040\006\uffe5\007\uffe5\014\uffe5\015\uffe5\016\uffe5" +
    "\017\uffe5\020\uffe5\077\uffe5\100\uffe5\101\uffe5\102\uffe5\103" +
    "\uffe5\104\uffe5\110\uffe5\113\uffe5\001\002\000\040\006\065" +
    "\007\047\014\043\015\046\016\042\017\040\020\035\077" +
    "\026\100\033\101\041\102\032\103\050\104\044\110\052" +
    "\113\034\001\002\000\010\007\uff94\011\uff94\112\uff94\001" +
    "\002\000\036\007\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3" +
    "\020\uffa3\077\uffa3\100\uffa3\101\uffa3\102\uffa3\103\uffa3\104" +
    "\uffa3\110\uffa3\113\uffa3\001\002\000\010\007\uff96\011\uff96" +
    "\112\uff96\001\002\000\010\007\uff98\011\uff98\112\uff98\001" +
    "\002\000\036\007\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0" +
    "\020\uffa0\077\uffa0\100\uffa0\101\uffa0\102\uffa0\103\uffa0\104" +
    "\uffa0\110\uffa0\113\uffa0\001\002\000\040\006\ufff0\007\ufff0" +
    "\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\077\ufff0\100" +
    "\ufff0\101\ufff0\102\ufff0\103\ufff0\104\ufff0\110\ufff0\113\ufff0" +
    "\001\002\000\010\007\uff97\011\uff97\112\uff97\001\002\000" +
    "\010\007\uff93\011\uff93\112\uff93\001\002\000\036\007\uffa1" +
    "\014\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1\077\uffa1\100" +
    "\uffa1\101\uffa1\102\uffa1\103\uffa1\104\uffa1\110\uffa1\113\uffa1" +
    "\001\002\000\040\006\uffee\007\uffee\014\uffee\015\uffee\016" +
    "\uffee\017\uffee\020\uffee\077\uffee\100\uffee\101\uffee\102\uffee" +
    "\103\uffee\104\uffee\110\uffee\113\uffee\001\002\000\004\007" +
    "\053\001\002\000\006\005\054\111\055\001\002\000\036" +
    "\007\047\014\043\015\046\016\042\017\040\020\035\077" +
    "\026\100\033\101\041\102\032\103\050\104\044\110\052" +
    "\113\034\001\002\000\004\007\056\001\002\000\004\005" +
    "\057\001\002\000\036\007\047\014\043\015\046\016\042" +
    "\017\040\020\035\077\026\100\033\101\041\102\032\103" +
    "\050\104\044\110\052\113\034\001\002\000\040\006\061" +
    "\007\047\014\043\015\046\016\042\017\040\020\035\077" +
    "\026\100\033\101\041\102\032\103\050\104\044\110\052" +
    "\113\034\001\002\000\040\006\uffea\007\uffea\014\uffea\015" +
    "\uffea\016\uffea\017\uffea\020\uffea\077\uffea\100\uffea\101\uffea" +
    "\102\uffea\103\uffea\104\uffea\110\uffea\113\uffea\001\002\000" +
    "\040\006\ufff1\007\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1" +
    "\020\ufff1\077\ufff1\100\ufff1\101\ufff1\102\ufff1\103\ufff1\104" +
    "\ufff1\110\ufff1\113\ufff1\001\002\000\040\006\064\007\047" +
    "\014\043\015\046\016\042\017\040\020\035\077\026\100" +
    "\033\101\041\102\032\103\050\104\044\110\052\113\034" +
    "\001\002\000\040\006\uffeb\007\uffeb\014\uffeb\015\uffeb\016" +
    "\uffeb\017\uffeb\020\uffeb\077\uffeb\100\uffeb\101\uffeb\102\uffeb" +
    "\103\uffeb\104\uffeb\110\uffeb\113\uffeb\001\002\000\010\002" +
    "\ufff4\077\ufff4\110\ufff4\001\002\000\010\007\076\011\073" +
    "\112\074\001\002\000\034\007\uffa7\014\uffa7\015\uffa7\016" +
    "\uffa7\017\uffa7\020\uffa7\077\uffa7\100\uffa7\101\uffa7\102\uffa7" +
    "\103\uffa7\104\uffa7\113\uffa7\001\002\000\006\010\254\075" +
    "\253\001\002\000\012\004\131\010\uffd7\011\114\075\uffd7" +
    "\001\002\000\006\007\124\011\123\001\002\000\004\012" +
    "\122\001\002\000\004\031\077\001\002\000\006\010\uffd9" +
    "\075\uffd9\001\002\000\014\004\uffd5\010\uffd5\011\uffd5\031" +
    "\077\075\uffd5\001\002\000\024\007\047\014\043\015\046" +
    "\016\042\017\040\020\035\032\105\103\102\113\034\001" +
    "\002\000\004\005\014\001\002\000\040\006\uffe7\007\uffe7" +
    "\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\077\uffe7\100" +
    "\uffe7\101\uffe7\102\uffe7\103\uffe7\104\uffe7\110\uffe7\113\uffe7" +
    "\001\002\000\020\007\047\014\043\015\046\016\042\017" +
    "\040\020\035\113\034\001\002\000\004\007\113\001\002" +
    "\000\006\032\uffe1\075\uffe1\001\002\000\006\005\uffe3\010" +
    "\uffe3\001\002\000\006\032\107\075\110\001\002\000\006" +
    "\005\uffe4\010\uffe4\001\002\000\022\007\047\014\043\015" +
    "\046\016\042\017\040\020\035\103\102\113\034\001\002" +
    "\000\006\032\uffe2\075\uffe2\001\002\000\010\011\114\032" +
    "\uffdf\075\uffdf\001\002\000\014\004\uffd5\010\uffd5\011\uffd5" +
    "\032\uffd5\075\uffd5\001\002\000\004\012\115\001\002\000" +
    "\014\004\uffd6\010\uffd6\011\uffd6\032\uffd6\075\uffd6\001\002" +
    "\000\004\007\113\001\002\000\010\011\114\032\uffe0\075" +
    "\uffe0\001\002\000\004\005\014\001\002\000\040\006\uffe8" +
    "\007\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\077" +
    "\uffe8\100\uffe8\101\uffe8\102\uffe8\103\uffe8\104\uffe8\110\uffe8" +
    "\113\uffe8\001\002\000\006\007\uffdd\011\uffdd\001\002\000" +
    "\004\012\130\001\002\000\004\031\077\001\002\000\006" +
    "\005\014\010\127\001\002\000\040\006\uffe6\007\uffe6\014" +
    "\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\077\uffe6\100\uffe6" +
    "\101\uffe6\102\uffe6\103\uffe6\104\uffe6\110\uffe6\113\uffe6\001" +
    "\002\000\040\006\uffe9\007\uffe9\014\uffe9\015\uffe9\016\uffe9" +
    "\017\uffe9\020\uffe9\077\uffe9\100\uffe9\101\uffe9\102\uffe9\103" +
    "\uffe9\104\uffe9\110\uffe9\113\uffe9\001\002\000\006\007\uffde" +
    "\011\uffde\001\002\000\046\005\137\007\150\013\140\021" +
    "\133\022\146\023\142\024\144\025\145\026\151\027\135" +
    "\031\154\033\153\035\143\042\134\056\136\057\132\073" +
    "\152\074\141\001\002\000\004\007\252\001\002\000\052" +
    "\006\uff81\010\uff81\012\uff81\032\uff81\033\uff81\034\uff81\035" +
    "\uff81\036\uff81\037\uff81\040\uff81\041\uff81\043\uff81\044\uff81" +
    "\045\uff81\046\uff81\047\uff81\050\uff81\051\uff81\052\uff81\075" +
    "\uff81\001\002\000\046\005\137\007\150\013\140\021\133" +
    "\022\146\023\142\024\144\025\145\026\151\027\135\031" +
    "\154\033\153\035\143\042\134\056\136\057\132\073\152" +
    "\074\141\001\002\000\052\006\uff7f\010\uff7f\012\uff7f\032" +
    "\uff7f\033\uff7f\034\uff7f\035\uff7f\036\uff7f\037\uff7f\040\uff7f" +
    "\041\uff7f\043\uff7f\044\uff7f\045\uff7f\046\uff7f\047\uff7f\050" +
    "\uff7f\051\uff7f\052\uff7f\075\uff7f\001\002\000\004\007\250" +
    "\001\002\000\046\005\137\007\150\013\140\021\133\022" +
    "\146\023\142\024\144\025\145\026\151\027\135\031\154" +
    "\033\153\035\143\042\134\056\136\057\132\073\152\074" +
    "\141\001\002\000\020\007\047\014\043\015\046\016\042" +
    "\017\040\020\035\113\034\001\002\000\004\031\235\001" +
    "\002\000\052\006\uff7c\010\uff7c\012\uff7c\032\uff7c\033\uff7c" +
    "\034\uff7c\035\uff7c\036\uff7c\037\uff7c\040\uff7c\041\uff7c\043" +
    "\uff7c\044\uff7c\045\uff7c\046\uff7c\047\uff7c\050\uff7c\051\uff7c" +
    "\052\uff7c\075\uff7c\001\002\000\046\005\137\007\150\013" +
    "\140\021\133\022\146\023\142\024\144\025\145\026\151" +
    "\027\135\031\154\033\153\035\143\042\134\056\136\057" +
    "\132\073\152\074\141\001\002\000\052\006\uff7e\010\uff7e" +
    "\012\uff7e\032\uff7e\033\uff7e\034\uff7e\035\uff7e\036\uff7e\037" +
    "\uff7e\040\uff7e\041\uff7e\043\uff7e\044\uff7e\045\uff7e\046\uff7e" +
    "\047\uff7e\050\uff7e\051\uff7e\052\uff7e\075\uff7e\001\002\000" +
    "\052\006\uff7b\010\uff7b\012\uff7b\032\uff7b\033\uff7b\034\uff7b" +
    "\035\uff7b\036\uff7b\037\uff7b\040\uff7b\041\uff7b\043\uff7b\044" +
    "\uff7b\045\uff7b\046\uff7b\047\uff7b\050\uff7b\051\uff7b\052\uff7b" +
    "\075\uff7b\001\002\000\052\006\uff7d\010\uff7d\012\uff7d\032" +
    "\uff7d\033\uff7d\034\uff7d\035\uff7d\036\uff7d\037\uff7d\040\uff7d" +
    "\041\uff7d\043\uff7d\044\uff7d\045\uff7d\046\uff7d\047\uff7d\050" +
    "\uff7d\051\uff7d\052\uff7d\075\uff7d\001\002\000\042\010\uffd8" +
    "\033\172\034\166\035\160\036\174\037\156\040\163\041" +
    "\157\043\161\044\173\045\162\046\167\047\171\050\164" +
    "\051\165\075\uffd8\001\002\000\060\006\uff7a\010\uff7a\011" +
    "\225\012\uff7a\032\uff7a\033\uff7a\034\uff7a\035\uff7a\036\uff7a" +
    "\037\uff7a\040\uff7a\041\uff7a\043\uff7a\044\uff7a\045\uff7a\046" +
    "\uff7a\047\uff7a\050\uff7a\051\uff7a\052\uff7a\056\224\057\226" +
    "\075\uff7a\001\002\000\052\006\uff80\010\uff80\012\uff80\032" +
    "\uff80\033\uff80\034\uff80\035\uff80\036\uff80\037\uff80\040\uff80" +
    "\041\uff80\043\uff80\044\uff80\045\uff80\046\uff80\047\uff80\050" +
    "\uff80\051\uff80\052\uff80\075\uff80\001\002\000\004\031\216" +
    "\001\002\000\046\005\137\007\150\013\140\021\133\022" +
    "\146\023\142\024\144\025\145\026\151\027\135\031\154" +
    "\033\153\035\143\042\134\056\136\057\132\073\152\074" +
    "\141\001\002\000\046\005\137\007\150\013\140\021\133" +
    "\022\146\023\142\024\144\025\145\026\151\027\135\031" +
    "\154\033\153\035\143\042\134\056\136\057\132\073\152" +
    "\074\141\001\002\000\040\032\170\033\172\034\166\035" +
    "\160\036\174\037\156\040\163\041\157\043\161\044\173" +
    "\045\162\046\167\047\171\050\164\051\165\001\002\000" +
    "\046\005\137\007\150\013\140\021\133\022\146\023\142" +
    "\024\144\025\145\026\151\027\135\031\154\033\153\035" +
    "\143\042\134\056\136\057\132\073\152\074\141\001\002" +
    "\000\046\005\137\007\150\013\140\021\133\022\146\023" +
    "\142\024\144\025\145\026\151\027\135\031\154\033\153" +
    "\035\143\042\134\056\136\057\132\073\152\074\141\001" +
    "\002\000\046\005\137\007\150\013\140\021\133\022\146" +
    "\023\142\024\144\025\145\026\151\027\135\031\154\033" +
    "\153\035\143\042\134\056\136\057\132\073\152\074\141" +
    "\001\002\000\046\005\137\007\150\013\140\021\133\022" +
    "\146\023\142\024\144\025\145\026\151\027\135\031\154" +
    "\033\153\035\143\042\134\056\136\057\132\073\152\074" +
    "\141\001\002\000\046\005\137\007\150\013\140\021\133" +
    "\022\146\023\142\024\144\025\145\026\151\027\135\031" +
    "\154\033\153\035\143\042\134\056\136\057\132\073\152" +
    "\074\141\001\002\000\046\005\137\007\150\013\140\021" +
    "\133\022\146\023\142\024\144\025\145\026\151\027\135" +
    "\031\154\033\153\035\143\042\134\056\136\057\132\073" +
    "\152\074\141\001\002\000\046\005\137\007\150\013\140" +
    "\021\133\022\146\023\142\024\144\025\145\026\151\027" +
    "\135\031\154\033\153\035\143\042\134\056\136\057\132" +
    "\073\152\074\141\001\002\000\046\005\137\007\150\013" +
    "\140\021\133\022\146\023\142\024\144\025\145\026\151" +
    "\027\135\031\154\033\153\035\143\042\134\056\136\057" +
    "\132\073\152\074\141\001\002\000\046\005\137\007\150" +
    "\013\140\021\133\022\146\023\142\024\144\025\145\026" +
    "\151\027\135\031\154\033\153\035\143\042\134\056\136" +
    "\057\132\073\152\074\141\001\002\000\046\005\137\007" +
    "\150\013\140\021\133\022\146\023\142\024\144\025\145" +
    "\026\151\027\135\031\154\033\153\035\143\042\134\056" +
    "\136\057\132\073\152\074\141\001\002\000\052\006\uff6f" +
    "\010\uff6f\012\uff6f\032\uff6f\033\uff6f\034\uff6f\035\uff6f\036" +
    "\uff6f\037\uff6f\040\uff6f\041\uff6f\043\uff6f\044\uff6f\045\uff6f" +
    "\046\uff6f\047\uff6f\050\uff6f\051\uff6f\052\uff6f\075\uff6f\001" +
    "\002\000\046\005\137\007\150\013\140\021\133\022\146" +
    "\023\142\024\144\025\145\026\151\027\135\031\154\033" +
    "\153\035\143\042\134\056\136\057\132\073\152\074\141" +
    "\001\002\000\046\005\137\007\150\013\140\021\133\022" +
    "\146\023\142\024\144\025\145\026\151\027\135\031\154" +
    "\033\153\035\143\042\134\056\136\057\132\073\152\074" +
    "\141\001\002\000\046\005\137\007\150\013\140\021\133" +
    "\022\146\023\142\024\144\025\145\026\151\027\135\031" +
    "\154\033\153\035\143\042\134\056\136\057\132\073\152" +
    "\074\141\001\002\000\046\005\137\007\150\013\140\021" +
    "\133\022\146\023\142\024\144\025\145\026\151\027\135" +
    "\031\154\033\153\035\143\042\134\056\136\057\132\073" +
    "\152\074\141\001\002\000\052\006\uff84\010\uff84\012\uff84" +
    "\032\uff84\033\uff84\034\uff84\035\uff84\036\uff84\037\156\040" +
    "\uff84\041\uff84\043\uff84\044\uff84\045\uff84\046\uff84\047\uff84" +
    "\050\uff84\051\uff84\052\uff84\075\uff84\001\002\000\052\006" +
    "\uff8a\010\uff8a\012\uff8a\032\uff8a\033\172\034\166\035\160" +
    "\036\174\037\156\040\uff8a\041\uff8a\043\uff8a\044\uff8a\045" +
    "\uff8a\046\uff8a\047\uff8a\050\uff8a\051\uff8a\052\uff8a\075\uff8a" +
    "\001\002\000\052\006\uff86\010\uff86\012\uff86\032\uff86\033" +
    "\uff86\034\166\035\uff86\036\174\037\156\040\uff86\041\uff86" +
    "\043\uff86\044\uff86\045\uff86\046\uff86\047\uff86\050\uff86\051" +
    "\uff86\052\uff86\075\uff86\001\002\000\052\006\uff88\010\uff88" +
    "\012\uff88\032\uff88\033\172\034\166\035\160\036\174\037" +
    "\156\040\uff88\041\uff88\043\uff88\044\uff88\045\uff88\046\uff88" +
    "\047\uff88\050\uff88\051\uff88\052\uff88\075\uff88\001\002\000" +
    "\052\006\uff87\010\uff87\012\uff87\032\uff87\033\172\034\166" +
    "\035\160\036\174\037\156\040\uff87\041\uff87\043\uff87\044" +
    "\uff87\045\uff87\046\uff87\047\uff87\050\uff87\051\uff87\052\uff87" +
    "\075\uff87\001\002\000\052\006\uff85\010\uff85\012\uff85\032" +
    "\uff85\033\uff85\034\uff85\035\uff85\036\uff85\037\156\040\uff85" +
    "\041\uff85\043\uff85\044\uff85\045\uff85\046\uff85\047\uff85\050" +
    "\uff85\051\uff85\052\uff85\075\uff85\001\002\000\040\033\172" +
    "\034\166\035\160\036\174\037\156\040\163\041\157\043" +
    "\161\044\173\045\162\046\167\047\171\050\164\051\165" +
    "\052\204\001\002\000\046\005\137\007\150\013\140\021" +
    "\133\022\146\023\142\024\144\025\145\026\151\027\135" +
    "\031\154\033\153\035\143\042\134\056\136\057\132\073" +
    "\152\074\141\001\002\000\052\006\uff79\010\uff79\012\uff79" +
    "\032\uff79\033\172\034\166\035\160\036\174\037\156\040" +
    "\163\041\157\043\161\044\173\045\162\046\167\047\171" +
    "\050\164\051\165\052\uff79\075\uff79\001\002\000\052\006" +
    "\uff8c\010\uff8c\012\uff8c\032\uff8c\033\172\034\166\035\160" +
    "\036\174\037\156\040\uff8c\041\uff8c\043\uff8c\044\173\045" +
    "\162\046\167\047\171\050\uff8c\051\uff8c\052\uff8c\075\uff8c" +
    "\001\002\000\052\006\uff8f\010\uff8f\012\uff8f\032\uff8f\033" +
    "\172\034\166\035\160\036\174\037\156\040\uff8f\041\157" +
    "\043\161\044\173\045\162\046\167\047\171\050\164\051" +
    "\uff8f\052\uff8f\075\uff8f\001\002\000\052\006\uff89\010\uff89" +
    "\012\uff89\032\uff89\033\172\034\166\035\160\036\174\037" +
    "\156\040\uff89\041\uff89\043\uff89\044\uff89\045\uff89\046\uff89" +
    "\047\uff89\050\uff89\051\uff89\052\uff89\075\uff89\001\002\000" +
    "\052\006\uff8d\010\uff8d\012\uff8d\032\uff8d\033\172\034\166" +
    "\035\160\036\174\037\156\040\uff8d\041\uff8d\043\uff8d\044" +
    "\173\045\162\046\167\047\171\050\uff8d\051\uff8d\052\uff8d" +
    "\075\uff8d\001\002\000\052\006\uff82\010\uff82\012\uff82\032" +
    "\uff82\033\uff82\034\166\035\uff82\036\174\037\156\040\uff82" +
    "\041\uff82\043\uff82\044\uff82\045\uff82\046\uff82\047\uff82\050" +
    "\uff82\051\uff82\052\uff82\075\uff82\001\002\000\052\006\uff8e" +
    "\010\uff8e\012\uff8e\032\uff8e\033\172\034\166\035\160\036" +
    "\174\037\156\040\uff8e\041\uff8e\043\161\044\173\045\162" +
    "\046\167\047\171\050\164\051\uff8e\052\uff8e\075\uff8e\001" +
    "\002\000\052\006\uff83\010\uff83\012\uff83\032\uff83\033\uff83" +
    "\034\uff83\035\uff83\036\uff83\037\uff83\040\uff83\041\uff83\043" +
    "\uff83\044\uff83\045\uff83\046\uff83\047\uff83\050\uff83\051\uff83" +
    "\052\uff83\075\uff83\001\002\000\052\006\uff90\010\uff90\012" +
    "\uff90\032\uff90\033\uff90\034\uff90\035\uff90\036\uff90\037\uff90" +
    "\040\uff90\041\uff90\043\uff90\044\uff90\045\uff90\046\uff90\047" +
    "\uff90\050\uff90\051\uff90\052\uff90\075\uff90\001\002\000\046" +
    "\005\137\007\150\013\140\021\133\022\146\023\142\024" +
    "\144\025\145\026\151\027\135\031\154\033\153\035\143" +
    "\042\134\056\136\057\132\073\152\074\141\001\002\000" +
    "\040\033\172\034\166\035\160\036\174\037\156\040\163" +
    "\041\157\043\161\044\173\045\162\046\167\047\171\050" +
    "\164\051\165\075\220\001\002\000\046\005\137\007\150" +
    "\013\140\021\133\022\146\023\142\024\144\025\145\026" +
    "\151\027\135\031\154\033\153\035\143\042\134\056\136" +
    "\057\132\073\152\074\141\001\002\000\040\032\222\033" +
    "\172\034\166\035\160\036\174\037\156\040\163\041\157" +
    "\043\161\044\173\045\162\046\167\047\171\050\164\051" +
    "\165\001\002\000\052\006\uff72\010\uff72\012\uff72\032\uff72" +
    "\033\uff72\034\uff72\035\uff72\036\uff72\037\uff72\040\uff72\041" +
    "\uff72\043\uff72\044\uff72\045\uff72\046\uff72\047\uff72\050\uff72" +
    "\051\uff72\052\uff72\075\uff72\001\002\000\054\006\uff74\010" +
    "\uff74\011\231\012\uff74\032\uff74\033\uff74\034\uff74\035\uff74" +
    "\036\uff74\037\uff74\040\uff74\041\uff74\043\uff74\044\uff74\045" +
    "\uff74\046\uff74\047\uff74\050\uff74\051\uff74\052\uff74\075\uff74" +
    "\001\002\000\052\006\uff78\010\uff78\012\uff78\032\uff78\033" +
    "\uff78\034\uff78\035\uff78\036\uff78\037\uff78\040\uff78\041\uff78" +
    "\043\uff78\044\uff78\045\uff78\046\uff78\047\uff78\050\uff78\051" +
    "\uff78\052\uff78\075\uff78\001\002\000\046\005\137\007\150" +
    "\013\140\021\133\022\146\023\142\024\144\025\145\026" +
    "\151\027\135\031\154\033\153\035\143\042\134\056\136" +
    "\057\132\073\152\074\141\001\002\000\052\006\uff77\010" +
    "\uff77\012\uff77\032\uff77\033\uff77\034\uff77\035\uff77\036\uff77" +
    "\037\uff77\040\uff77\041\uff77\043\uff77\044\uff77\045\uff77\046" +
    "\uff77\047\uff77\050\uff77\051\uff77\052\uff77\075\uff77\001\002" +
    "\000\040\012\230\033\172\034\166\035\160\036\174\037" +
    "\156\040\163\041\157\043\161\044\173\045\162\046\167" +
    "\047\171\050\164\051\165\001\002\000\056\004\uff6a\006" +
    "\uff6a\010\uff6a\011\uff6a\012\uff6a\032\uff6a\033\uff6a\034\uff6a" +
    "\035\uff6a\036\uff6a\037\uff6a\040\uff6a\041\uff6a\043\uff6a\044" +
    "\uff6a\045\uff6a\046\uff6a\047\uff6a\050\uff6a\051\uff6a\052\uff6a" +
    "\075\uff6a\001\002\000\046\005\137\007\150\013\140\021" +
    "\133\022\146\023\142\024\144\025\145\026\151\027\135" +
    "\031\154\033\153\035\143\042\134\056\136\057\132\073" +
    "\152\074\141\001\002\000\040\012\233\033\172\034\166" +
    "\035\160\036\174\037\156\040\163\041\157\043\161\044" +
    "\173\045\162\046\167\047\171\050\164\051\165\001\002" +
    "\000\056\004\uff6b\006\uff6b\010\uff6b\011\uff6b\012\uff6b\032" +
    "\uff6b\033\uff6b\034\uff6b\035\uff6b\036\uff6b\037\uff6b\040\uff6b" +
    "\041\uff6b\043\uff6b\044\uff6b\045\uff6b\046\uff6b\047\uff6b\050" +
    "\uff6b\051\uff6b\052\uff6b\075\uff6b\001\002\000\052\006\uff91" +
    "\010\uff91\012\uff91\032\uff91\033\uff91\034\uff91\035\uff91\036" +
    "\uff91\037\uff91\040\uff91\041\uff91\043\uff91\044\uff91\045\uff91" +
    "\046\uff91\047\uff91\050\uff91\051\uff91\052\uff91\075\uff91\001" +
    "\002\000\046\005\137\007\150\013\140\021\133\022\146" +
    "\023\142\024\144\025\145\026\151\027\135\031\154\033" +
    "\153\035\143\042\134\056\136\057\132\073\152\074\141" +
    "\001\002\000\040\032\237\033\172\034\166\035\160\036" +
    "\174\037\156\040\163\041\157\043\161\044\173\045\162" +
    "\046\167\047\171\050\164\051\165\001\002\000\052\006" +
    "\uff73\010\uff73\012\uff73\032\uff73\033\uff73\034\uff73\035\uff73" +
    "\036\uff73\037\uff73\040\uff73\041\uff73\043\uff73\044\uff73\045" +
    "\uff73\046\uff73\047\uff73\050\uff73\051\uff73\052\uff73\075\uff73" +
    "\001\002\000\004\011\225\001\002\000\054\006\uff6c\010" +
    "\uff6c\011\231\012\uff6c\032\uff6c\033\uff6c\034\uff6c\035\uff6c" +
    "\036\uff6c\037\uff6c\040\uff6c\041\uff6c\043\uff6c\044\uff6c\045" +
    "\uff6c\046\uff6c\047\uff6c\050\uff6c\051\uff6c\052\uff6c\075\uff6c" +
    "\001\002\000\052\006\uff70\010\uff70\012\uff70\032\uff70\033" +
    "\uff70\034\uff70\035\uff70\036\uff70\037\uff70\040\uff70\041\uff70" +
    "\043\uff70\044\uff70\045\uff70\046\uff70\047\uff70\050\uff70\051" +
    "\uff70\052\uff70\075\uff70\001\002\000\006\006\246\075\245" +
    "\001\002\000\042\006\uff6d\033\172\034\166\035\160\036" +
    "\174\037\156\040\163\041\157\043\161\044\173\045\162" +
    "\046\167\047\171\050\164\051\165\075\uff6d\001\002\000" +
    "\046\005\137\007\150\013\140\021\133\022\146\023\142" +
    "\024\144\025\145\026\151\027\135\031\154\033\153\035" +
    "\143\042\134\056\136\057\132\073\152\074\141\001\002" +
    "\000\052\006\uff71\010\uff71\012\uff71\032\uff71\033\uff71\034" +
    "\uff71\035\uff71\036\uff71\037\uff71\040\uff71\041\uff71\043\uff71" +
    "\044\uff71\045\uff71\046\uff71\047\uff71\050\uff71\051\uff71\052" +
    "\uff71\075\uff71\001\002\000\042\006\uff6e\033\172\034\166" +
    "\035\160\036\174\037\156\040\163\041\157\043\161\044" +
    "\173\045\162\046\167\047\171\050\164\051\165\075\uff6e" +
    "\001\002\000\052\006\uff76\010\uff76\012\uff76\032\uff76\033" +
    "\uff76\034\uff76\035\uff76\036\uff76\037\uff76\040\uff76\041\uff76" +
    "\043\uff76\044\uff76\045\uff76\046\uff76\047\uff76\050\uff76\051" +
    "\uff76\052\uff76\075\uff76\001\002\000\052\006\uff8b\010\uff8b" +
    "\012\uff8b\032\uff8b\033\172\034\166\035\160\036\174\037" +
    "\156\040\uff8b\041\uff8b\043\161\044\173\045\162\046\167" +
    "\047\171\050\164\051\uff8b\052\uff8b\075\uff8b\001\002\000" +
    "\052\006\uff75\010\uff75\012\uff75\032\uff75\033\uff75\034\uff75" +
    "\035\uff75\036\uff75\037\uff75\040\uff75\041\uff75\043\uff75\044" +
    "\uff75\045\uff75\046\uff75\047\uff75\050\uff75\051\uff75\052\uff75" +
    "\075\uff75\001\002\000\004\007\113\001\002\000\102\005" +
    "\uffdc\006\uffdc\007\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc" +
    "\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025" +
    "\uffdc\026\uffdc\027\uffdc\031\uffdc\033\uffdc\035\uffdc\042\uffdc" +
    "\056\uffdc\057\uffdc\073\uffdc\074\uffdc\077\uffdc\100\uffdc\101" +
    "\uffdc\102\uffdc\103\uffdc\104\uffdc\110\uffdc\113\uffdc\001\002" +
    "\000\006\010\uffda\075\uffda\001\002\000\006\010\257\075" +
    "\253\001\002\000\102\005\uffdb\006\uffdb\007\uffdb\013\uffdb" +
    "\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022" +
    "\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\031\uffdb" +
    "\033\uffdb\035\uffdb\042\uffdb\056\uffdb\057\uffdb\073\uffdb\074" +
    "\uffdb\077\uffdb\100\uffdb\101\uffdb\102\uffdb\103\uffdb\104\uffdb" +
    "\110\uffdb\113\uffdb\001\002\000\004\007\261\001\002\000" +
    "\006\005\262\111\263\001\002\000\036\007\047\014\043" +
    "\015\046\016\042\017\040\020\035\077\026\100\033\101" +
    "\041\102\032\103\050\104\044\110\052\113\034\001\002" +
    "\000\004\007\264\001\002\000\004\005\265\001\002\000" +
    "\036\007\047\014\043\015\046\016\042\017\040\020\035" +
    "\077\026\100\033\101\041\102\032\103\050\104\044\110" +
    "\052\113\034\001\002\000\040\006\267\007\047\014\043" +
    "\015\046\016\042\017\040\020\035\077\026\100\033\101" +
    "\041\102\032\103\050\104\044\110\052\113\034\001\002" +
    "\000\040\006\uffec\007\uffec\014\uffec\015\uffec\016\uffec\017" +
    "\uffec\020\uffec\077\uffec\100\uffec\101\uffec\102\uffec\103\uffec" +
    "\104\uffec\110\uffec\113\uffec\001\002\000\040\006\271\007" +
    "\047\014\043\015\046\016\042\017\040\020\035\077\026" +
    "\100\033\101\041\102\032\103\050\104\044\110\052\113" +
    "\034\001\002\000\040\006\uffed\007\uffed\014\uffed\015\uffed" +
    "\016\uffed\017\uffed\020\uffed\077\uffed\100\uffed\101\uffed\102" +
    "\uffed\103\uffed\104\uffed\110\uffed\113\uffed\001\002\000\040" +
    "\006\273\007\047\014\043\015\046\016\042\017\040\020" +
    "\035\077\026\100\033\101\041\102\032\103\050\104\044" +
    "\110\052\113\034\001\002\000\010\002\ufff5\077\ufff5\110" +
    "\ufff5\001\002\000\004\005\014\001\002\000\074\006\uffb0" +
    "\007\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\030" +
    "\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\062\uffb0" +
    "\063\u0144\064\uffb0\065\uffb0\066\uffb0\067\uffb0\070\uffb0\073" +
    "\uffb0\074\uffb0\076\uffb0\103\uffb0\105\uffb0\106\uffb0\110\uffb0" +
    "\113\uffb0\114\uffb0\001\002\000\004\031\u0141\001\002\000" +
    "\004\031\u012c\001\002\000\004\007\113\001\002\000\072" +
    "\006\uffcf\007\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020" +
    "\uffcf\030\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf" +
    "\062\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf\070\uffcf\073" +
    "\uffcf\074\uffcf\076\uffcf\103\uffcf\105\uffcf\106\uffcf\110\uffcf" +
    "\113\uffcf\114\uffcf\001\002\000\072\006\uffd2\007\uffd2\014" +
    "\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\030\uffd2\053\uffd2" +
    "\054\uffd2\055\uffd2\056\uffd2\057\uffd2\062\uffd2\064\uffd2\065" +
    "\uffd2\066\uffd2\067\uffd2\070\uffd2\073\uffd2\074\uffd2\076\uffd2" +
    "\103\uffd2\105\uffd2\106\uffd2\110\uffd2\113\uffd2\114\uffd2\001" +
    "\002\000\072\006\uffd1\007\uffd1\014\uffd1\015\uffd1\016\uffd1" +
    "\017\uffd1\020\uffd1\030\uffd1\053\uffd1\054\uffd1\055\uffd1\056" +
    "\uffd1\057\uffd1\062\uffd1\064\uffd1\065\uffd1\066\uffd1\067\uffd1" +
    "\070\uffd1\073\uffd1\074\uffd1\076\uffd1\103\uffd1\105\uffd1\106" +
    "\uffd1\110\uffd1\113\uffd1\114\uffd1\001\002\000\072\006\uffcb" +
    "\007\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\030" +
    "\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\062\uffcb" +
    "\064\uffcb\065\uffcb\066\uffcb\067\uffcb\070\uffcb\073\uffcb\074" +
    "\uffcb\076\uffcb\103\uffcb\105\uffcb\106\uffcb\110\uffcb\113\uffcb" +
    "\114\uffcb\001\002\000\066\006\u0128\007\326\014\043\015" +
    "\046\016\042\017\040\020\035\030\276\053\321\054\322" +
    "\055\331\056\313\057\310\062\317\064\274\065\323\066" +
    "\277\073\306\074\327\076\333\103\315\105\332\106\330" +
    "\110\312\113\034\114\334\001\002\000\004\031\u0122\001" +
    "\002\000\072\006\uffca\007\uffca\014\uffca\015\uffca\016\uffca" +
    "\017\uffca\020\uffca\030\uffca\053\uffca\054\uffca\055\uffca\056" +
    "\uffca\057\uffca\062\uffca\064\uffca\065\uffca\066\uffca\067\uffca" +
    "\070\uffca\073\uffca\074\uffca\076\uffca\103\uffca\105\uffca\106" +
    "\uffca\110\uffca\113\uffca\114\uffca\001\002\000\004\007\u0120" +
    "\001\002\000\072\006\uffce\007\uffce\014\uffce\015\uffce\016" +
    "\uffce\017\uffce\020\uffce\030\uffce\053\uffce\054\uffce\055\uffce" +
    "\056\uffce\057\uffce\062\uffce\064\uffce\065\uffce\066\uffce\067" +
    "\uffce\070\uffce\073\uffce\074\uffce\076\uffce\103\uffce\105\uffce" +
    "\106\uffce\110\uffce\113\uffce\114\uffce\001\002\000\004\007" +
    "\u0117\001\002\000\004\007\u0115\001\002\000\072\006\uffbd" +
    "\007\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\030" +
    "\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\062\uffbd" +
    "\064\uffbd\065\uffbd\066\uffbd\067\uffbd\070\uffbd\073\uffbd\074" +
    "\uffbd\076\uffbd\103\uffbd\105\uffbd\106\uffbd\110\uffbd\113\uffbd" +
    "\114\uffbd\001\002\000\020\007\047\014\043\015\046\016" +
    "\042\017\040\020\035\113\034\001\002\000\072\006\uffbe" +
    "\007\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\030" +
    "\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\062\uffbe" +
    "\064\uffbe\065\uffbe\066\uffbe\067\uffbe\070\uffbe\073\uffbe\074" +
    "\uffbe\076\uffbe\103\uffbe\105\uffbe\106\uffbe\110\uffbe\113\uffbe" +
    "\114\uffbe\001\002\000\004\031\u010e\001\002\000\072\006" +
    "\uffcc\007\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc" +
    "\030\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\062" +
    "\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc\070\uffcc\073\uffcc" +
    "\074\uffcc\076\uffcc\103\uffcc\105\uffcc\106\uffcc\110\uffcc\113" +
    "\uffcc\114\uffcc\001\002\000\004\031\u010a\001\002\000\004" +
    "\010\u0109\001\002\000\004\031\376\001\002\000\072\006" +
    "\uffd0\007\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0" +
    "\030\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\062" +
    "\uffd0\064\uffd0\065\uffd0\066\uffd0\067\uffd0\070\uffd0\073\uffd0" +
    "\074\uffd0\076\uffd0\103\uffd0\105\uffd0\106\uffd0\110\uffd0\113" +
    "\uffd0\114\uffd0\001\002\000\072\006\uffcd\007\uffcd\014\uffcd" +
    "\015\uffcd\016\uffcd\017\uffcd\020\uffcd\030\uffcd\053\uffcd\054" +
    "\uffcd\055\uffcd\056\uffcd\057\uffcd\062\uffcd\064\uffcd\065\uffcd" +
    "\066\uffcd\067\uffcd\070\uffcd\073\uffcd\074\uffcd\076\uffcd\103" +
    "\uffcd\105\uffcd\106\uffcd\110\uffcd\113\uffcd\114\uffcd\001\002" +
    "\000\014\004\365\007\uff93\011\225\056\364\057\366\001" +
    "\002\000\004\031\357\001\002\000\004\031\353\001\002" +
    "\000\004\010\352\001\002\000\004\031\346\001\002\000" +
    "\004\031\340\001\002\000\050\005\137\007\150\010\336" +
    "\013\140\021\133\022\146\023\142\024\144\025\145\026" +
    "\151\027\135\031\154\033\153\035\143\042\134\056\136" +
    "\057\132\073\152\074\141\001\002\000\040\010\337\033" +
    "\172\034\166\035\160\036\174\037\156\040\163\041\157" +
    "\043\161\044\173\045\162\046\167\047\171\050\164\051" +
    "\165\001\002\000\072\006\uffc8\007\uffc8\014\uffc8\015\uffc8" +
    "\016\uffc8\017\uffc8\020\uffc8\030\uffc8\053\uffc8\054\uffc8\055" +
    "\uffc8\056\uffc8\057\uffc8\062\uffc8\064\uffc8\065\uffc8\066\uffc8" +
    "\067\uffc8\070\uffc8\073\uffc8\074\uffc8\076\uffc8\103\uffc8\105" +
    "\uffc8\106\uffc8\110\uffc8\113\uffc8\114\uffc8\001\002\000\072" +
    "\006\uffc9\007\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020" +
    "\uffc9\030\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9" +
    "\062\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9\070\uffc9\073" +
    "\uffc9\074\uffc9\076\uffc9\103\uffc9\105\uffc9\106\uffc9\110\uffc9" +
    "\113\uffc9\114\uffc9\001\002\000\046\005\137\007\150\013" +
    "\140\021\133\022\146\023\142\024\144\025\145\026\151" +
    "\027\135\031\154\033\153\035\143\042\134\056\136\057" +
    "\132\073\152\074\141\001\002\000\040\033\172\034\166" +
    "\035\160\036\174\037\156\040\163\041\157\043\161\044" +
    "\173\045\162\046\167\047\171\050\164\051\165\075\342" +
    "\001\002\000\046\005\137\007\150\013\140\021\133\022" +
    "\146\023\142\024\144\025\145\026\151\027\135\031\154" +
    "\033\153\035\143\042\134\056\136\057\132\073\152\074" +
    "\141\001\002\000\040\032\344\033\172\034\166\035\160" +
    "\036\174\037\156\040\163\041\157\043\161\044\173\045" +
    "\162\046\167\047\171\050\164\051\165\001\002\000\004" +
    "\010\345\001\002\000\072\006\uffbf\007\uffbf\014\uffbf\015" +
    "\uffbf\016\uffbf\017\uffbf\020\uffbf\030\uffbf\053\uffbf\054\uffbf" +
    "\055\uffbf\056\uffbf\057\uffbf\062\uffbf\064\uffbf\065\uffbf\066" +
    "\uffbf\067\uffbf\070\uffbf\073\uffbf\074\uffbf\076\uffbf\103\uffbf" +
    "\105\uffbf\106\uffbf\110\uffbf\113\uffbf\114\uffbf\001\002\000" +
    "\046\005\137\007\150\013\140\021\133\022\146\023\142" +
    "\024\144\025\145\026\151\027\135\031\154\033\153\035" +
    "\143\042\134\056\136\057\132\073\152\074\141\001\002" +
    "\000\040\032\350\033\172\034\166\035\160\036\174\037" +
    "\156\040\163\041\157\043\161\044\173\045\162\046\167" +
    "\047\171\050\164\051\165\001\002\000\004\010\351\001" +
    "\002\000\072\006\uff9b\007\uff9b\014\uff9b\015\uff9b\016\uff9b" +
    "\017\uff9b\020\uff9b\030\uff9b\053\uff9b\054\uff9b\055\uff9b\056" +
    "\uff9b\057\uff9b\062\uff9b\064\uff9b\065\uff9b\066\uff9b\067\uff9b" +
    "\070\uff9b\073\uff9b\074\uff9b\076\uff9b\103\uff9b\105\uff9b\106" +
    "\uff9b\110\uff9b\113\uff9b\114\uff9b\001\002\000\072\006\uffab" +
    "\007\uffab\014\uffab\015\uffab\016\uffab\017\uffab\020\uffab\030" +
    "\uffab\053\uffab\054\uffab\055\uffab\056\uffab\057\uffab\062\uffab" +
    "\064\uffab\065\uffab\066\uffab\067\uffab\070\uffab\073\uffab\074" +
    "\uffab\076\uffab\103\uffab\105\uffab\106\uffab\110\uffab\113\uffab" +
    "\114\uffab\001\002\000\046\005\137\007\150\013\140\021" +
    "\133\022\146\023\142\024\144\025\145\026\151\027\135" +
    "\031\154\033\153\035\143\042\134\056\136\057\132\073" +
    "\152\074\141\001\002\000\040\032\355\033\172\034\166" +
    "\035\160\036\174\037\156\040\163\041\157\043\161\044" +
    "\173\045\162\046\167\047\171\050\164\051\165\001\002" +
    "\000\004\010\356\001\002\000\072\006\uff9a\007\uff9a\014" +
    "\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a\030\uff9a\053\uff9a" +
    "\054\uff9a\055\uff9a\056\uff9a\057\uff9a\062\uff9a\064\uff9a\065" +
    "\uff9a\066\uff9a\067\uff9a\070\uff9a\073\uff9a\074\uff9a\076\uff9a" +
    "\103\uff9a\105\uff9a\106\uff9a\110\uff9a\113\uff9a\114\uff9a\001" +
    "\002\000\046\005\137\007\150\013\140\021\133\022\146" +
    "\023\142\024\144\025\145\026\151\027\135\031\154\033" +
    "\153\035\143\042\134\056\136\057\132\073\152\074\141" +
    "\001\002\000\040\032\361\033\172\034\166\035\160\036" +
    "\174\037\156\040\163\041\157\043\161\044\173\045\162" +
    "\046\167\047\171\050\164\051\165\001\002\000\004\010" +
    "\362\001\002\000\072\006\uffc1\007\uffc1\014\uffc1\015\uffc1" +
    "\016\uffc1\017\uffc1\020\uffc1\030\uffc1\053\uffc1\054\uffc1\055" +
    "\uffc1\056\uffc1\057\uffc1\062\uffc1\064\uffc1\065\uffc1\066\uffc1" +
    "\067\uffc1\070\uffc1\073\uffc1\074\uffc1\076\uffc1\103\uffc1\105" +
    "\uffc1\106\uffc1\110\uffc1\113\uffc1\114\uffc1\001\002\000\006" +
    "\004\373\011\231\001\002\000\004\010\372\001\002\000" +
    "\046\005\137\007\150\013\140\021\133\022\146\023\142" +
    "\024\144\025\145\026\151\027\135\031\154\033\153\035" +
    "\143\042\134\056\136\057\132\073\152\074\141\001\002" +
    "\000\004\010\367\001\002\000\072\006\uff9e\007\uff9e\014" +
    "\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e\030\uff9e\053\uff9e" +
    "\054\uff9e\055\uff9e\056\uff9e\057\uff9e\062\uff9e\064\uff9e\065" +
    "\uff9e\066\uff9e\067\uff9e\070\uff9e\073\uff9e\074\uff9e\076\uff9e" +
    "\103\uff9e\105\uff9e\106\uff9e\110\uff9e\113\uff9e\114\uff9e\001" +
    "\002\000\040\010\371\033\172\034\166\035\160\036\174" +
    "\037\156\040\163\041\157\043\161\044\173\045\162\046" +
    "\167\047\171\050\164\051\165\001\002\000\072\006\uffc5" +
    "\007\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\030" +
    "\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\062\uffc5" +
    "\064\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5\073\uffc5\074" +
    "\uffc5\076\uffc5\103\uffc5\105\uffc5\106\uffc5\110\uffc5\113\uffc5" +
    "\114\uffc5\001\002\000\072\006\uff9f\007\uff9f\014\uff9f\015" +
    "\uff9f\016\uff9f\017\uff9f\020\uff9f\030\uff9f\053\uff9f\054\uff9f" +
    "\055\uff9f\056\uff9f\057\uff9f\062\uff9f\064\uff9f\065\uff9f\066" +
    "\uff9f\067\uff9f\070\uff9f\073\uff9f\074\uff9f\076\uff9f\103\uff9f" +
    "\105\uff9f\106\uff9f\110\uff9f\113\uff9f\114\uff9f\001\002\000" +
    "\046\005\137\007\150\013\140\021\133\022\146\023\142" +
    "\024\144\025\145\026\151\027\135\031\154\033\153\035" +
    "\143\042\134\056\136\057\132\073\152\074\141\001\002" +
    "\000\040\010\375\033\172\034\166\035\160\036\174\037" +
    "\156\040\163\041\157\043\161\044\173\045\162\046\167" +
    "\047\171\050\164\051\165\001\002\000\072\006\uffc4\007" +
    "\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\030\uffc4" +
    "\053\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\062\uffc4\064" +
    "\uffc4\065\uffc4\066\uffc4\067\uffc4\070\uffc4\073\uffc4\074\uffc4" +
    "\076\uffc4\103\uffc4\105\uffc4\106\uffc4\110\uffc4\113\uffc4\114" +
    "\uffc4\001\002\000\034\007\047\014\043\015\046\016\042" +
    "\017\040\020\035\077\026\100\033\101\041\102\032\103" +
    "\050\104\044\113\034\001\002\000\034\007\uffa6\014\uffa6" +
    "\015\uffa6\016\uffa6\017\uffa6\020\uffa6\077\uffa6\100\uffa6\101" +
    "\uffa6\102\uffa6\103\uffa6\104\uffa6\113\uffa6\001\002\000\034" +
    "\007\047\014\043\015\046\016\042\017\040\020\035\077" +
    "\026\100\033\101\041\102\032\103\050\104\044\113\034" +
    "\001\002\000\046\005\uffa8\007\uffa8\013\uffa8\021\uffa8\022" +
    "\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\031\uffa8" +
    "\033\uffa8\035\uffa8\042\uffa8\056\uffa8\057\uffa8\073\uffa8\074" +
    "\uffa8\001\002\000\046\005\137\007\150\013\140\021\133" +
    "\022\146\023\142\024\144\025\145\026\151\027\135\031" +
    "\154\033\153\035\143\042\134\056\136\057\132\073\152" +
    "\074\141\001\002\000\040\010\u0104\033\172\034\166\035" +
    "\160\036\174\037\156\040\163\041\157\043\161\044\173" +
    "\045\162\046\167\047\171\050\164\051\165\001\002\000" +
    "\046\005\137\007\150\013\140\021\133\022\146\023\142" +
    "\024\144\025\145\026\151\027\135\031\154\033\153\035" +
    "\143\042\134\056\136\057\132\073\152\074\141\001\002" +
    "\000\040\032\u0106\033\172\034\166\035\160\036\174\037" +
    "\156\040\163\041\157\043\161\044\173\045\162\046\167" +
    "\047\171\050\164\051\165\001\002\000\004\005\014\001" +
    "\002\000\072\006\uffa9\007\uffa9\014\uffa9\015\uffa9\016\uffa9" +
    "\017\uffa9\020\uffa9\030\uffa9\053\uffa9\054\uffa9\055\uffa9\056" +
    "\uffa9\057\uffa9\062\uffa9\064\uffa9\065\uffa9\066\uffa9\067\uffa9" +
    "\070\uffa9\073\uffa9\074\uffa9\076\uffa9\103\uffa9\105\uffa9\106" +
    "\uffa9\110\uffa9\113\uffa9\114\uffa9\001\002\000\004\007\113" +
    "\001\002\000\072\006\uffac\007\uffac\014\uffac\015\uffac\016" +
    "\uffac\017\uffac\020\uffac\030\uffac\053\uffac\054\uffac\055\uffac" +
    "\056\uffac\057\uffac\062\uffac\064\uffac\065\uffac\066\uffac\067" +
    "\uffac\070\uffac\073\uffac\074\uffac\076\uffac\103\uffac\105\uffac" +
    "\106\uffac\110\uffac\113\uffac\114\uffac\001\002\000\046\005" +
    "\137\007\150\013\140\021\133\022\146\023\142\024\144" +
    "\025\145\026\151\027\135\031\154\033\153\035\143\042" +
    "\134\056\136\057\132\073\152\074\141\001\002\000\040" +
    "\032\u010c\033\172\034\166\035\160\036\174\037\156\040" +
    "\163\041\157\043\161\044\173\045\162\046\167\047\171" +
    "\050\164\051\165\001\002\000\004\005\014\001\002\000" +
    "\072\006\uffad\007\uffad\014\uffad\015\uffad\016\uffad\017\uffad" +
    "\020\uffad\030\uffad\053\uffad\054\uffad\055\uffad\056\uffad\057" +
    "\uffad\062\uffad\064\uffad\065\uffad\066\uffad\067\uffad\070\uffad" +
    "\073\uffad\074\uffad\076\uffad\103\uffad\105\uffad\106\uffad\110" +
    "\uffad\113\uffad\114\uffad\001\002\000\046\005\137\007\150" +
    "\013\140\021\133\022\146\023\142\024\144\025\145\026" +
    "\151\027\135\031\154\033\153\035\143\042\134\056\136" +
    "\057\132\073\152\074\141\001\002\000\040\032\u0110\033" +
    "\172\034\166\035\160\036\174\037\156\040\163\041\157" +
    "\043\161\044\173\045\162\046\167\047\171\050\164\051" +
    "\165\001\002\000\004\005\014\001\002\000\074\006\uffaf" +
    "\007\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\030" +
    "\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf\062\uffaf" +
    "\063\uffaf\064\uffaf\065\uffaf\066\uffaf\067\uffaf\070\uffaf\073" +
    "\uffaf\074\uffaf\076\uffaf\103\uffaf\105\uffaf\106\uffaf\110\uffaf" +
    "\113\uffaf\114\uffaf\001\002\000\004\007\113\001\002\000" +
    "\006\010\u0114\075\253\001\002\000\072\006\uffc7\007\uffc7" +
    "\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\030\uffc7\053" +
    "\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\062\uffc7\064\uffc7" +
    "\065\uffc7\066\uffc7\067\uffc7\070\uffc7\073\uffc7\074\uffc7\076" +
    "\uffc7\103\uffc7\105\uffc7\106\uffc7\110\uffc7\113\uffc7\114\uffc7" +
    "\001\002\000\004\010\u0116\001\002\000\072\006\uff9d\007" +
    "\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\030\uff9d" +
    "\053\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d\062\uff9d\064" +
    "\uff9d\065\uff9d\066\uff9d\067\uff9d\070\uff9d\073\uff9d\074\uff9d" +
    "\076\uff9d\103\uff9d\105\uff9d\106\uff9d\110\uff9d\113\uff9d\114" +
    "\uff9d\001\002\000\006\005\u0119\111\u0118\001\002\000\004" +
    "\007\u011c\001\002\000\036\007\047\014\043\015\046\016" +
    "\042\017\040\020\035\077\026\100\033\101\041\102\032" +
    "\103\050\104\044\110\052\113\034\001\002\000\040\006" +
    "\u011b\007\047\014\043\015\046\016\042\017\040\020\035" +
    "\077\026\100\033\101\041\102\032\103\050\104\044\110" +
    "\052\113\034\001\002\000\072\006\uffc3\007\uffc3\014\uffc3" +
    "\015\uffc3\016\uffc3\017\uffc3\020\uffc3\030\uffc3\053\uffc3\054" +
    "\uffc3\055\uffc3\056\uffc3\057\uffc3\062\uffc3\064\uffc3\065\uffc3" +
    "\066\uffc3\067\uffc3\070\uffc3\073\uffc3\074\uffc3\076\uffc3\103" +
    "\uffc3\105\uffc3\106\uffc3\110\uffc3\113\uffc3\114\uffc3\001\002" +
    "\000\004\005\u011d\001\002\000\036\007\047\014\043\015" +
    "\046\016\042\017\040\020\035\077\026\100\033\101\041" +
    "\102\032\103\050\104\044\110\052\113\034\001\002\000" +
    "\040\006\u011f\007\047\014\043\015\046\016\042\017\040" +
    "\020\035\077\026\100\033\101\041\102\032\103\050\104" +
    "\044\110\052\113\034\001\002\000\072\006\uffc2\007\uffc2" +
    "\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\030\uffc2\053" +
    "\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\062\uffc2\064\uffc2" +
    "\065\uffc2\066\uffc2\067\uffc2\070\uffc2\073\uffc2\074\uffc2\076" +
    "\uffc2\103\uffc2\105\uffc2\106\uffc2\110\uffc2\113\uffc2\114\uffc2" +
    "\001\002\000\004\010\u0121\001\002\000\072\006\uff9c\007" +
    "\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\030\uff9c" +
    "\053\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c\062\uff9c\064" +
    "\uff9c\065\uff9c\066\uff9c\067\uff9c\070\uff9c\073\uff9c\074\uff9c" +
    "\076\uff9c\103\uff9c\105\uff9c\106\uff9c\110\uff9c\113\uff9c\114" +
    "\uff9c\001\002\000\046\005\137\007\150\013\140\021\133" +
    "\022\146\023\142\024\144\025\145\026\151\027\135\031" +
    "\154\033\153\035\143\042\134\056\136\057\132\073\152" +
    "\074\141\001\002\000\040\033\172\034\166\035\160\036" +
    "\174\037\156\040\163\041\157\043\161\044\173\045\162" +
    "\046\167\047\171\050\164\051\165\075\u0124\001\002\000" +
    "\046\005\137\007\150\013\140\021\133\022\146\023\142" +
    "\024\144\025\145\026\151\027\135\031\154\033\153\035" +
    "\143\042\134\056\136\057\132\073\152\074\141\001\002" +
    "\000\040\032\u0126\033\172\034\166\035\160\036\174\037" +
    "\156\040\163\041\157\043\161\044\173\045\162\046\167" +
    "\047\171\050\164\051\165\001\002\000\004\010\u0127\001" +
    "\002\000\072\006\uffc0\007\uffc0\014\uffc0\015\uffc0\016\uffc0" +
    "\017\uffc0\020\uffc0\030\uffc0\053\uffc0\054\uffc0\055\uffc0\056" +
    "\uffc0\057\uffc0\062\uffc0\064\uffc0\065\uffc0\066\uffc0\067\uffc0" +
    "\070\uffc0\073\uffc0\074\uffc0\076\uffc0\103\uffc0\105\uffc0\106" +
    "\uffc0\110\uffc0\113\uffc0\114\uffc0\001\002\000\110\002\uffd4" +
    "\006\uffd4\007\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020" +
    "\uffd4\030\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4" +
    "\062\uffd4\063\uffd4\064\uffd4\065\uffd4\066\uffd4\067\uffd4\070" +
    "\uffd4\073\uffd4\074\uffd4\076\uffd4\077\uffd4\100\uffd4\101\uffd4" +
    "\102\uffd4\103\uffd4\104\uffd4\105\uffd4\106\uffd4\110\uffd4\113" +
    "\uffd4\114\uffd4\001\002\000\072\006\uffd3\007\uffd3\014\uffd3" +
    "\015\uffd3\016\uffd3\017\uffd3\020\uffd3\030\uffd3\053\uffd3\054" +
    "\uffd3\055\uffd3\056\uffd3\057\uffd3\062\uffd3\064\uffd3\065\uffd3" +
    "\066\uffd3\067\uffd3\070\uffd3\073\uffd3\074\uffd3\076\uffd3\103" +
    "\uffd3\105\uffd3\106\uffd3\110\uffd3\113\uffd3\114\uffd3\001\002" +
    "\000\006\010\u012b\075\253\001\002\000\072\006\uffc6\007" +
    "\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\030\uffc6" +
    "\053\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\062\uffc6\064" +
    "\uffc6\065\uffc6\066\uffc6\067\uffc6\070\uffc6\073\uffc6\074\uffc6" +
    "\076\uffc6\103\uffc6\105\uffc6\106\uffc6\110\uffc6\113\uffc6\114" +
    "\uffc6\001\002\000\046\005\137\007\150\013\140\021\133" +
    "\022\146\023\142\024\144\025\145\026\151\027\135\031" +
    "\154\033\153\035\143\042\134\056\136\057\132\073\152" +
    "\074\141\001\002\000\040\032\u012e\033\172\034\166\035" +
    "\160\036\174\037\156\040\163\041\157\043\161\044\173" +
    "\045\162\046\167\047\171\050\164\051\165\001\002\000" +
    "\004\005\u012f\001\002\000\010\006\u0133\067\u0136\070\u0135" +
    "\001\002\000\010\006\u013f\067\u0136\070\u0135\001\002\000" +
    "\010\006\uffb8\067\uffb8\070\uffb8\001\002\000\072\006\u013b" +
    "\007\326\014\043\015\046\016\042\017\040\020\035\030" +
    "\276\053\321\054\322\055\331\056\313\057\310\062\317" +
    "\064\274\065\323\066\277\067\u0136\070\u0135\073\306\074" +
    "\327\076\333\103\315\105\332\106\330\110\312\113\034" +
    "\114\334\001\002\000\072\006\uffb9\007\uffb9\014\uffb9\015" +
    "\uffb9\016\uffb9\017\uffb9\020\uffb9\030\uffb9\053\uffb9\054\uffb9" +
    "\055\uffb9\056\uffb9\057\uffb9\062\uffb9\064\uffb9\065\uffb9\066" +
    "\uffb9\067\uffb9\070\uffb9\073\uffb9\074\uffb9\076\uffb9\103\uffb9" +
    "\105\uffb9\106\uffb9\110\uffb9\113\uffb9\114\uffb9\001\002\000" +
    "\072\006\uffb5\007\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5" +
    "\020\uffb5\030\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057" +
    "\uffb5\062\uffb5\064\uffb5\065\uffb5\066\uffb5\067\uffb5\070\uffb5" +
    "\073\uffb5\074\uffb5\076\uffb5\103\uffb5\105\uffb5\106\uffb5\110" +
    "\uffb5\113\uffb5\114\uffb5\001\002\000\004\052\u0139\001\002" +
    "\000\046\005\137\007\150\013\140\021\133\022\146\023" +
    "\142\024\144\025\145\026\151\027\135\031\154\033\153" +
    "\035\143\042\134\056\136\057\132\073\152\074\141\001" +
    "\002\000\040\033\172\034\166\035\160\036\174\037\156" +
    "\040\163\041\157\043\161\044\173\045\162\046\167\047" +
    "\171\050\164\051\165\052\u0138\001\002\000\072\006\uffb3" +
    "\007\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\030" +
    "\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\062\uffb3" +
    "\064\uffb3\065\uffb3\066\uffb3\067\uffb3\070\uffb3\073\uffb3\074" +
    "\uffb3\076\uffb3\103\uffb3\105\uffb3\106\uffb3\110\uffb3\113\uffb3" +
    "\114\uffb3\001\002\000\072\006\uffb2\007\uffb2\014\uffb2\015" +
    "\uffb2\016\uffb2\017\uffb2\020\uffb2\030\uffb2\053\uffb2\054\uffb2" +
    "\055\uffb2\056\uffb2\057\uffb2\062\uffb2\064\uffb2\065\uffb2\066" +
    "\uffb2\067\uffb2\070\uffb2\073\uffb2\074\uffb2\076\uffb2\103\uffb2" +
    "\105\uffb2\106\uffb2\110\uffb2\113\uffb2\114\uffb2\001\002\000" +
    "\072\006\uffb4\007\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4" +
    "\020\uffb4\030\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057" +
    "\uffb4\062\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4\070\uffb4" +
    "\073\uffb4\074\uffb4\076\uffb4\103\uffb4\105\uffb4\106\uffb4\110" +
    "\uffb4\113\uffb4\114\uffb4\001\002\000\072\006\uffba\007\uffba" +
    "\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba\030\uffba\053" +
    "\uffba\054\uffba\055\uffba\056\uffba\057\uffba\062\uffba\064\uffba" +
    "\065\uffba\066\uffba\067\uffba\070\uffba\073\uffba\074\uffba\076" +
    "\uffba\103\uffba\105\uffba\106\uffba\110\uffba\113\uffba\114\uffba" +
    "\001\002\000\072\006\uffb6\007\326\014\043\015\046\016" +
    "\042\017\040\020\035\030\276\053\321\054\322\055\331" +
    "\056\313\057\310\062\317\064\274\065\323\066\277\067" +
    "\uffb6\070\uffb6\073\306\074\327\076\333\103\315\105\332" +
    "\106\330\110\312\113\034\114\334\001\002\000\010\006" +
    "\uffb7\067\uffb7\070\uffb7\001\002\000\072\006\u0140\007\326" +
    "\014\043\015\046\016\042\017\040\020\035\030\276\053" +
    "\321\054\322\055\331\056\313\057\310\062\317\064\274" +
    "\065\323\066\277\067\u0136\070\u0135\073\306\074\327\076" +
    "\333\103\315\105\332\106\330\110\312\113\034\114\334" +
    "\001\002\000\072\006\uffbb\007\uffbb\014\uffbb\015\uffbb\016" +
    "\uffbb\017\uffbb\020\uffbb\030\uffbb\053\uffbb\054\uffbb\055\uffbb" +
    "\056\uffbb\057\uffbb\062\uffbb\064\uffbb\065\uffbb\066\uffbb\067" +
    "\uffbb\070\uffbb\073\uffbb\074\uffbb\076\uffbb\103\uffbb\105\uffbb" +
    "\106\uffbb\110\uffbb\113\uffbb\114\uffbb\001\002\000\072\006" +
    "\uffbc\007\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc" +
    "\030\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\062" +
    "\uffbc\064\uffbc\065\uffbc\066\uffbc\067\uffbc\070\uffbc\073\uffbc" +
    "\074\uffbc\076\uffbc\103\uffbc\105\uffbc\106\uffbc\110\uffbc\113" +
    "\uffbc\114\uffbc\001\002\000\004\032\u0142\001\002\000\004" +
    "\010\u0143\001\002\000\072\006\uff99\007\uff99\014\uff99\015" +
    "\uff99\016\uff99\017\uff99\020\uff99\030\uff99\053\uff99\054\uff99" +
    "\055\uff99\056\uff99\057\uff99\062\uff99\064\uff99\065\uff99\066" +
    "\uff99\067\uff99\070\uff99\073\uff99\074\uff99\076\uff99\103\uff99" +
    "\105\uff99\106\uff99\110\uff99\113\uff99\114\uff99\001\002\000" +
    "\006\005\014\062\u0145\001\002\000\004\031\u0147\001\002" +
    "\000\072\006\uffb1\007\uffb1\014\uffb1\015\uffb1\016\uffb1\017" +
    "\uffb1\020\uffb1\030\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1" +
    "\057\uffb1\062\uffb1\064\uffb1\065\uffb1\066\uffb1\067\uffb1\070" +
    "\uffb1\073\uffb1\074\uffb1\076\uffb1\103\uffb1\105\uffb1\106\uffb1" +
    "\110\uffb1\113\uffb1\114\uffb1\001\002\000\046\005\137\007" +
    "\150\013\140\021\133\022\146\023\142\024\144\025\145" +
    "\026\151\027\135\031\154\033\153\035\143\042\134\056" +
    "\136\057\132\073\152\074\141\001\002\000\040\032\u0149" +
    "\033\172\034\166\035\160\036\174\037\156\040\163\041" +
    "\157\043\161\044\173\045\162\046\167\047\171\050\164" +
    "\051\165\001\002\000\004\005\014\001\002\000\074\006" +
    "\uffae\007\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae" +
    "\030\uffae\053\uffae\054\uffae\055\uffae\056\uffae\057\uffae\062" +
    "\uffae\063\uffae\064\uffae\065\uffae\066\uffae\067\uffae\070\uffae" +
    "\073\uffae\074\uffae\076\uffae\103\uffae\105\uffae\106\uffae\110" +
    "\uffae\113\uffae\114\uffae\001\002\000\004\053\u014c\001\002" +
    "\000\004\031\u014d\001\002\000\046\005\137\007\150\013" +
    "\140\021\133\022\146\023\142\024\144\025\145\026\151" +
    "\027\135\031\154\033\153\035\143\042\134\056\136\057" +
    "\132\073\152\074\141\001\002\000\040\032\u014f\033\172" +
    "\034\166\035\160\036\174\037\156\040\163\041\157\043" +
    "\161\044\173\045\162\046\167\047\171\050\164\051\165" +
    "\001\002\000\004\010\u0150\001\002\000\072\006\uffaa\007" +
    "\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\030\uffaa" +
    "\053\uffaa\054\uffaa\055\uffaa\056\uffaa\057\uffaa\062\uffaa\064" +
    "\uffaa\065\uffaa\066\uffaa\067\uffaa\070\uffaa\073\uffaa\074\uffaa" +
    "\076\uffaa\103\uffaa\105\uffaa\106\uffaa\110\uffaa\113\uffaa\114" +
    "\uffaa\001\002\000\004\010\u0152\001\002\000\012\002\ufffa" +
    "\077\ufffa\107\ufffa\110\ufffa\001\002\000\004\002\001\001" +
    "\002\000\004\110\ufff2\001\002\000\004\007\u0156\001\002" +
    "\000\006\005\u0158\111\u0157\001\002\000\004\007\u015b\001" +
    "\002\000\036\007\047\014\043\015\046\016\042\017\040" +
    "\020\035\077\026\100\033\101\041\102\032\103\050\104" +
    "\044\110\052\113\034\001\002\000\040\006\u015a\007\047" +
    "\014\043\015\046\016\042\017\040\020\035\077\026\100" +
    "\033\101\041\102\032\103\050\104\044\110\052\113\034" +
    "\001\002\000\010\002\ufff7\077\ufff7\110\ufff7\001\002\000" +
    "\004\005\u015c\001\002\000\036\007\047\014\043\015\046" +
    "\016\042\017\040\020\035\077\026\100\033\101\041\102" +
    "\032\103\050\104\044\110\052\113\034\001\002\000\040" +
    "\006\u015e\007\047\014\043\015\046\016\042\017\040\020" +
    "\035\077\026\100\033\101\041\102\032\103\050\104\044" +
    "\110\052\113\034\001\002\000\010\002\ufff6\077\ufff6\110" +
    "\ufff6\001\002\000\010\002\ufffe\077\007\110\015\001\002" +
    "\000\004\021\u0161\001\002\000\004\010\u0162\001\002\000" +
    "\012\002\ufffb\077\ufffb\107\ufffb\110\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0160\000\020\002\011\003\005\036\007\037\015\040" +
    "\010\041\003\054\004\001\001\000\010\037\u015e\040\010" +
    "\054\004\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\004\304\006\277\007" +
    "\301\010\323\011\300\012\315\013\274\015\310\016\324" +
    "\017\313\024\317\053\303\055\302\056\306\001\001\000" +
    "\002\001\001\000\006\040\016\054\004\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\006\027\031\024\032" +
    "\030\033\035\043\271\044\044\045\050\052\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\006\027\031" +
    "\024\032\030\033\035\043\036\044\044\045\050\052\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\026\070\027\074\030\255\001\001\000\006" +
    "\006\065\031\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\006\027\031\024\032\030\033\035\044\061\045" +
    "\050\052\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\006\027\031\024\032\030\033\035\043\062" +
    "\044\044\045\050\052\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\006\027\031\024\032\030\033\035" +
    "\043\057\044\044\045\050\052\026\001\001\000\020\006" +
    "\027\031\024\032\030\033\035\044\061\045\050\052\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\006" +
    "\027\031\024\032\030\033\035\044\061\045\050\052\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\026" +
    "\070\027\074\030\067\046\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\051\117\001\001\000\002\001\001" +
    "\000\004\051\077\001\001\000\010\006\102\047\105\050" +
    "\103\001\001\000\004\003\100\001\001\000\002\001\001" +
    "\000\004\006\115\001\001\000\004\026\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\102\050\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\116\001\001\000\002\001" +
    "\001\000\004\003\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\051\124\001\001\000" +
    "\004\003\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\250\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\243\035\242\001" +
    "\001\000\004\006\237\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\233\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\222\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\214\001\001\000\004\005\154\001\001\000\002" +
    "\001\001\000\004\005\213\001\001\000\004\005\212\001" +
    "\001\000\004\005\211\001\001\000\004\005\210\001\001" +
    "\000\004\005\207\001\001\000\004\005\206\001\001\000" +
    "\004\005\205\001\001\000\004\005\202\001\001\000\004" +
    "\005\201\001\001\000\004\005\200\001\001\000\002\001" +
    "\001\000\004\005\177\001\001\000\004\005\176\001\001" +
    "\000\004\005\175\001\001\000\004\005\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\204\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\216\001\001\000\002\001" +
    "\001\000\004\005\220\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\226\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\231\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\235\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\025\240\034" +
    "\241\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\246\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\026\070\027\254\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\006\027\031\024\032\030\033\035\043\267\044\044" +
    "\045\050\052\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\006\027\031\024\032\030\033\035\043\265" +
    "\044\044\045\050\052\026\001\001\000\020\006\027\031" +
    "\024\032\030\033\035\044\061\045\050\052\026\001\001" +
    "\000\002\001\001\000\020\006\027\031\024\032\030\033" +
    "\035\044\061\045\050\052\026\001\001\000\002\001\001" +
    "\000\020\006\027\031\024\032\030\033\035\044\061\045" +
    "\050\052\026\001\001\000\002\001\001\000\004\003\u014a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\026\070\027\074\030\u0129\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\006\277\007\u0128\010\323\011\300\012\315" +
    "\013\274\015\310\016\324\017\313\024\317\053\303\055" +
    "\302\056\306\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\u0111\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\362\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\334\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\340\001\001\000\002\001\001\000\004\005\342\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\346\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\353" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\357\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\367\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\373\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\006\027\014\u0101\031\376\032\377\033" +
    "\u0100\001\001\000\002\001\001\000\006\006\u0107\031\066" +
    "\001\001\000\002\001\001\000\004\005\u0102\001\001\000" +
    "\002\001\001\000\004\005\u0104\001\001\000\002\001\001" +
    "\000\004\003\u0106\001\001\000\002\001\001\000\010\026" +
    "\070\027\074\030\067\001\001\000\002\001\001\000\004" +
    "\005\u010a\001\001\000\002\001\001\000\004\003\u010c\001" +
    "\001\000\002\001\001\000\004\005\u010e\001\001\000\002" +
    "\001\001\000\004\003\u0110\001\001\000\002\001\001\000" +
    "\010\026\070\027\074\030\u0112\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\006\027\031\024" +
    "\032\030\033\035\043\u0119\044\044\045\050\052\026\001" +
    "\001\000\020\006\027\031\024\032\030\033\035\044\061" +
    "\045\050\052\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\006\027\031\024\032\030\033\035\043\u011d" +
    "\044\044\045\050\052\026\001\001\000\020\006\027\031" +
    "\024\032\030\033\035\044\061\045\050\052\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\u0122\001\001\000\002\001\001\000\004\005\u0124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\u012c\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\020\u012f\021\u0131\022\u0133" +
    "\023\u0130\001\001\000\010\021\u013d\022\u0133\023\u013c\001" +
    "\001\000\002\001\001\000\040\004\u013b\006\277\007\301" +
    "\010\323\011\300\012\315\013\274\015\310\016\324\017" +
    "\313\022\u0139\024\317\053\303\055\302\056\306\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\u0136\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\006\277\007\u0128\010\323\011\300\012\315\013\274" +
    "\015\310\016\324\017\313\024\317\053\303\055\302\056" +
    "\306\001\001\000\002\001\001\000\040\004\u013b\006\277" +
    "\007\301\010\323\011\300\012\315\013\274\015\310\016" +
    "\324\017\313\022\u0139\024\317\053\303\055\302\056\306" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\u0145" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\u0147\001\001\000\002\001\001\000\004\003\u0149\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\u014d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\006\027\031\024\032" +
    "\030\033\035\043\u0158\044\044\045\050\052\026\001\001" +
    "\000\020\006\027\031\024\032\030\033\035\044\061\045" +
    "\050\052\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\006\027\031\024\032\030\033\035\043\u015c\044" +
    "\044\045\050\052\026\001\001\000\020\006\027\031\024" +
    "\032\030\033\035\044\061\045\050\052\026\001\001\000" +
    "\002\001\001\000\006\040\016\054\004\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Instruccion arbolINSTRUCCION;

    public ArbolAST arbol;
    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error de sintaxis no recuperado!!!,"+String.valueOf(s.value)+"!!!"+String.valueOf(s.sym));
        System.err.println("Error caracter no esperado");
        System.err.println(s);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {

//Codigo de acciones
      

  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // PARACORCHETE ::= acorchete E ccorchete 
            {
              LinkedList<NodoAST> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    RESULT = new LinkedList<NodoAST>();
                    RESULT.add(new ArreglosNew(e, eleft, eright));
              
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARACORCHETE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // PARACORCHETE ::= PARACORCHETE acorchete E ccorchete 
            {
              LinkedList<NodoAST> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<NodoAST> lista = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    RESULT = lista;
                    RESULT.add(new ArreglosNew(e, eleft, eright));
              
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARACORCHETE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // OPCIONESNEW ::= PARACORCHETE 
            {
              Expresion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> d = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 //recibiria una lista de Exp
                RESULT = new ParaCorchete(d);
              
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONESNEW",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // LISTAARRAY ::= E 
            {
              LinkedList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT = new LinkedList<Expresion>();
                RESULT.add(e);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAARRAY",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // LISTAARRAY ::= LISTAARRAY coma E 
            {
              LinkedList<Expresion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Expresion> l = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT = l;
                RESULT.add(e);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAARRAY",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // E ::= apar E cpar 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = e;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // E ::= neww T OPCIONESNEW 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		TipoContenedor t = (TipoContenedor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 //luego de t pone otro terminal para bajar una y meter las demas opciones del new
            RESULT = new Newww(t, e, eleft,eright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // E ::= allave LISTAARRAY cllave 
            {
              Expresion RESULT =null;
		int laleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String la = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Expresion> d = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new ArreglosEsteSi(d, laleft, laright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // E ::= write_file apar E coma E cpar 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion ruta = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion contenido = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new EscribirArchivo(ruta, contenido, aleft, aright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // E ::= read_file apar E cpar 
            {
              Expresion RESULT =null;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion ruta = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new LeerArchivo(ruta, rutaleft, rutaright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // E ::= id PARACORCHETE 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int indiceArregloleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int indiceArregloright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> indiceArreglo = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 //lo de un arreglo
        RESULT = new PosicionArregloRetorno(id, indiceArreglo, idleft, idright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // E ::= menosmenos id 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
         RESULT = new OPPreFijo(new Identificador(id, null, idleft, idleft), Operacion.Operador.MENOS, idleft, idright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // E ::= masmas id 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new OPPreFijo(new Identificador(id, null, idleft, idleft), Operacion.Operador.MAS, idleft, idright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // E ::= id menosmenos 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new OPPostFijo(new Identificador(id, null, idleft, idleft), Operacion.Operador.MENOS, idleft, idright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // E ::= id masmas 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new OPPostFijo(new Identificador(id, null, idleft, idleft), Operacion.Operador.MAS, idleft, idright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // E ::= E interrogacion E dospuntos E 
            {
              Expresion RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int vddleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int vddright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion vdd = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int fakeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fakeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion fake = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new OpTernario(cond, vdd, fake,condleft, condright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // E ::= id 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Identificador(id, new TipoContenedor(Simbolo.Tipo.ID), idleft, idright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // E ::= nulo 
            {
              Expresion RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ee = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Nulo(ee,new TipoContenedor(Simbolo.Tipo.NULO), eeleft, eeright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // E ::= falsee 
            {
              Expresion RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ee = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Booleano(ee,new TipoContenedor(Simbolo.Tipo.BOOLEAN), eeleft, eeright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // E ::= truee 
            {
              Expresion RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ee = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Booleano(ee,new TipoContenedor(Simbolo.Tipo.BOOLEAN), eeleft, eeright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // E ::= charER 
            {
              Expresion RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ee = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        
        Object ww = ee.substring(1,ee.length()-1);
        RESULT = new Caracter(ww, new TipoContenedor(Simbolo.Tipo.CHAR), eeleft, eeright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // E ::= decimal 
            {
              Expresion RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object ee = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Decimal(ee, new TipoContenedor(Simbolo.Tipo.DOUBLE), eeleft, eeright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // E ::= entero 
            {
              Expresion RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object ee = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Entero(ee, new TipoContenedor(Simbolo.Tipo.INT), eeleft, eeright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // E ::= cadena 
            {
              Expresion RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ee = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        //ee.substring(1,ee.length()-1)
        RESULT = new Cadena(ee, new TipoContenedor(Simbolo.Tipo.STRING), eeleft, eeright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // E ::= E menos E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Aritmetica(e1, e2, Operacion.Operador.MENOS, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // E ::= E potencia E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Aritmetica(e1, e2, Operacion.Operador.POTENCIA, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // E ::= E dividir E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Aritmetica(e1, e2, Operacion.Operador.DIVIDIR, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // E ::= E por E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Aritmetica(e1, e2, Operacion.Operador.POR, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // E ::= E mas E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Aritmetica(e1, e2, Operacion.Operador.MAS, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // E ::= E menorigualq E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Relacional(e1, e2, Operacion.Operador.MENORIGUALQ, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // E ::= E mayorigualq E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Relacional(e1, e2, Operacion.Operador.MAYORIGUALQ, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // E ::= E menorq E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Relacional(e1, e2, Operacion.Operador.MENORQ, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // E ::= E mayorq E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Relacional(e1, e2, Operacion.Operador.MAYORQ, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // E ::= diferenteunario E 
            {
              Expresion RESULT =null;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Logica(e1, Operacion.Operador.NOT, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // E ::= E diferente E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Relacional(e1, e2, Operacion.Operador.DIFERENTE, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // E ::= E igualigual E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Relacional(e1, e2, Operacion.Operador.IGUAL, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // E ::= E aand E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Logica(e1, e2, Operacion.Operador.AND, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // E ::= E oor E 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Logica(e1, e2, Operacion.Operador.OR, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // E ::= mas E 
            {
              Expresion RESULT =null;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Aritmetica(e1, Operacion.Operador.POSITIVO, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // E ::= menos E 
            {
              Expresion RESULT =null;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Aritmetica(e1, Operacion.Operador.NEGATIVO, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // T ::= voidd 
            {
              TipoContenedor RESULT =null;
		
    
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // T ::= id 
            {
              TipoContenedor RESULT =null;
		
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // T ::= doublee 
            {
              TipoContenedor RESULT =null;
		
        RESULT = new TipoContenedor(Simbolo.Tipo.DOUBLE);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // T ::= booleann 
            {
              TipoContenedor RESULT =null;
		
        RESULT = new TipoContenedor(Simbolo.Tipo.BOOLEAN);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // T ::= stringg 
            {
              TipoContenedor RESULT =null;
		
        RESULT = new TipoContenedor(Simbolo.Tipo.STRING);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // T ::= charr 
            {
              TipoContenedor RESULT =null;
		
        RESULT = new TipoContenedor(Simbolo.Tipo.CHAR);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // T ::= intt 
            {
              TipoContenedor RESULT =null;
		
        RESULT = new TipoContenedor(Simbolo.Tipo.INT);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // IMPRESIONES ::= imprimir apar cpar puntoycoma 
            {
              Instruccion RESULT =null;
		
                RESULT = new ImprimirTS("hola");
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESIONES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // IMPRESIONES ::= printLinea apar E cpar puntoycoma 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                RESULT = new Printer(e1, e1left, e1right, true);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESIONES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // IMPRESIONES ::= print apar E cpar puntoycoma 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                RESULT = new Printer(e1, e1left, e1right);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESIONES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PREPOSTFIJOS ::= menosmenos id puntoycoma 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                RESULT = new OPPreFijo(new Identificador(id, null, idleft, idleft), Operacion.Operador.MENOS, idleft, idright);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PREPOSTFIJOS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PREPOSTFIJOS ::= masmas id puntoycoma 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                RESULT = new OPPreFijo(new Identificador(id, null, idleft, idleft), Operacion.Operador.MAS, idleft, idright);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PREPOSTFIJOS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // PREPOSTFIJOS ::= id menosmenos puntoycoma 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                RESULT = new OPPostFijo(new Identificador(id, null, idleft, idleft), Operacion.Operador.MENOS, idleft, idright);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PREPOSTFIJOS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PREPOSTFIJOS ::= id masmas puntoycoma 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                RESULT = new OPPostFijo(new Identificador(id, null, idleft, idleft), Operacion.Operador.MAS, idleft, idright);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PREPOSTFIJOS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // FIELD_MODIFIER ::= abstracto 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = d; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FIELD_MODIFIER",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // FIELD_MODIFIER ::= finall 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = d; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FIELD_MODIFIER",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // FIELD_MODIFIER ::= estatico 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = d; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FIELD_MODIFIER",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // FIELD_MODIFIER ::= privado 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = d; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FIELD_MODIFIER",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // FIELD_MODIFIER ::= protegido 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = d; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FIELD_MODIFIER",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // FIELD_MODIFIER ::= publico 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = d;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FIELD_MODIFIER",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // FIELD_MODIFIERS ::= FIELD_MODIFIER 
            {
              LinkedList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        RESULT = new LinkedList<String>();
                        RESULT.add(i);
                   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FIELD_MODIFIERS",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FIELD_MODIFIERS ::= FIELD_MODIFIERS FIELD_MODIFIER 
            {
              LinkedList<String> RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<String> j = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        RESULT = j;
                        RESULT.add(i);
                   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FIELD_MODIFIERS",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // FOR_INIT ::= FIELD_DECLARATION 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		      
            RESULT = d;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR_INIT",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CICLOS ::= forr apar FOR_INIT E puntoycoma E cpar S 
            {
              Instruccion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int inicioleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int inicioright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Instruccion inicio = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int aumetoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aumetoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion aumeto = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion s1 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new Forr(inicio, cond, aumeto, s1, fleft, fright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CICLOS ::= doo S whilee apar E cpar puntoycoma 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Instruccion s1 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
        RESULT = new DoWhile(s1, e1, dleft, dright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CICLOS ::= continuee puntoycoma 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new Continuee(eleft, eright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CICLOS ::= breakk puntoycoma 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new Breakk(eleft, eright);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CICLOS ::= whilee apar E cpar S 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion s1 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new WhileCiclo(e1, s1, e1left, e1right);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CICLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // IF_LIST ::= IF_LIST elsee iff apar E cpar S 
            {
              LinkedList<IfLista> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		LinkedList<IfLista> l = (LinkedList<IfLista>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion s1 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = l;
            RESULT.add(new IfLista(e1, s1, e1left, e1right));
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF_LIST",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // IF_LIST ::= iff apar E cpar S 
            {
              LinkedList<IfLista> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion s1 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new LinkedList<IfLista>();
            RESULT.add(new IfLista(e1, s1, e1left, e1right));
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF_LIST",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // IF_STATEMENT ::= IF_LIST 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<IfLista> i = (LinkedList<IfLista>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Iff(null, i, ileft, iright);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // IF_STATEMENT ::= IF_LIST elsee S 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<IfLista> i = (LinkedList<IfLista>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion s1 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Iff(s1, i, ileft, iright);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SWITCH_LABEL ::= defaultt dospuntos 
            {
              NodoAST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    RESULT = new Defaultt(dleft, dright);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_LABEL",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SWITCH_LABEL ::= casee E dospuntos 
            {
              NodoAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    RESULT = new Casee(e, eleft, eright);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_LABEL",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SWITCH_LABELS ::= SWITCH_LABELS SWITCH_LABEL 
            {
              LinkedList<NodoAST> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> f = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int dnodoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dnodoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST dnodo = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    RESULT = f;
                    RESULT.add(dnodo);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_LABELS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SWITCH_LABELS ::= SWITCH_LABEL 
            {
              LinkedList<NodoAST> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST i = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    RESULT = new LinkedList<>();
                    RESULT.add(i);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_LABELS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SWITCH_BLOCK_STATEMENT_GROUP ::= SWITCH_LABELS B 
            {
              Instruccion RESULT =null;
		int listaCaseleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaCaseright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> listaCase = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int listaSentenciasleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int listaSentenciasright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> listaSentencias = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 //cambiar la S por una B y toca instanciar una clase Bloque para mandar a guardar
                    Bloque blo = new Bloque(listaSentencias);
                    RESULT = new SwitchBlockStatement_Group(listaCase, blo);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_BLOCK_STATEMENT_GROUP",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SWITCH_BLOCK_STATEMENT_GROUPS ::= SWITCH_BLOCK_STATEMENT_GROUPS SWITCH_BLOCK_STATEMENT_GROUP 
            {
              LinkedList<NodoAST> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> f = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int dnodoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dnodoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion dnodo = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    RESULT = f;
                    RESULT.add(dnodo);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_BLOCK_STATEMENT_GROUPS",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SWITCH_BLOCK_STATEMENT_GROUPS ::= SWITCH_BLOCK_STATEMENT_GROUP 
            {
              LinkedList<NodoAST> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    RESULT = new LinkedList<>();
                    RESULT.add(i);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_BLOCK_STATEMENT_GROUPS",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SWITCH_BLOCK ::= switchh apar E cpar allave cllave 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
                    //no se hace nada
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_BLOCK",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SWITCH_BLOCK ::= switchh apar E cpar allave SWITCH_LABELS cllave 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int swileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int swiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> swi = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    RESULT = new SwitchBlock(e, eleft, eright, null, swi);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_BLOCK",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SWITCH_BLOCK ::= switchh apar E cpar allave SWITCH_BLOCK_STATEMENT_GROUPS cllave 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int grupoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int gruporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> grupo = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    RESULT = new SwitchBlock(e, eleft, eright, grupo, null);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_BLOCK",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SWITCH_BLOCK ::= switchh apar E cpar allave SWITCH_BLOCK_STATEMENT_GROUPS SWITCH_LABELS cllave 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<NodoAST> g = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> s = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    RESULT = new SwitchBlock(e, eleft, eright, g, s);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH_BLOCK",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // COND ::= SWITCH_BLOCK 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = d;
      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // COND ::= IF_STATEMENT 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = d;
      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ARCHIVOS ::= grafica apar E coma E cpar puntoycoma 
            {
              NodoAST RESULT =null;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion ruta = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion contenido = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                RESULT = new Graficar(ruta, contenido, rutaleft, rutaright);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARCHIVOS",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ARCHIVOS ::= write_file apar E coma E cpar puntoycoma 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion ruta = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion contenido = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                RESULT = new EscribirArchivo(ruta, contenido, aleft, aright);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARCHIVOS",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ARCHIVOS ::= read_file apar E cpar puntoycoma 
            {
              NodoAST RESULT =null;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion ruta = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                RESULT = new LeerArchivo(ruta, rutaleft, rutaright);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARCHIVOS",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CLASE_LOCAL ::= clase id extender id allave CONTENIDO_CLASE cllave 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE_LOCAL",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CLASE_LOCAL ::= clase id allave CONTENIDO_CLASE cllave 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE_LOCAL",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LOCAL_FIELD_DECLARATION ::= id PARACORCHETE igual E puntoycoma 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int listaEleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int listaEright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<NodoAST> listaE = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        RESULT = new AsignacionArreglo( id, listaE, e, idleft, idright);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LOCAL_FIELD_DECLARATION",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LOCAL_FIELD_DECLARATION ::= id igual E puntoycoma 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 //asignacion
                        RESULT = new Asignacion(id, e, idleft, idright);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LOCAL_FIELD_DECLARATION",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LOCAL_FIELD_DECLARATION ::= T VARIABLE_DECLARATORS puntoycoma 
            {
              Instruccion RESULT =null;
		int tipopleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tipopright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		TipoContenedor tipop = (TipoContenedor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Object> lista = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        RESULT = new Declaraciones(tipop, lista, tipopleft, tipopright);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LOCAL_FIELD_DECLARATION",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LOCAL_FIELD_DECLARATION ::= finall T VARIABLE_DECLARATORS puntoycoma 
            {
              Instruccion RESULT =null;
		int vileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int viright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String vi = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int tipopleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tipopright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		TipoContenedor tipop = (TipoContenedor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Object> lista = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        LinkedList<String> mod = new LinkedList<>();
                        mod.add(vi);
                        RESULT = new Declaraciones(mod, tipop, lista, tipopleft, tipopright);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LOCAL_FIELD_DECLARATION",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // RETORNOO ::= retorno puntoycoma 
            {
              Object RESULT =null;
		
            
           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETORNOO",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // RETORNOO ::= retorno E puntoycoma 
            {
              Object RESULT =null;
		
            
           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETORNOO",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // J ::= RETORNOO 
            {
              NodoAST RESULT =null;
		
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("J",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // J ::= CLASE_LOCAL 
            {
              NodoAST RESULT =null;
		
        
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("J",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // J ::= ARCHIVOS 
            {
              NodoAST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST d = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = d;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("J",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // J ::= PREPOSTFIJOS 
            {
              NodoAST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion d = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = d;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("J",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // J ::= IMPRESIONES 
            {
              NodoAST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = d;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("J",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // J ::= COND 
            {
              NodoAST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = d;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("J",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // J ::= CICLOS 
            {
              NodoAST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = d;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("J",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // J ::= LOCAL_FIELD_DECLARATION 
            {
              NodoAST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 //solo pueden ser final sin mod acceso private, public, protected
        RESULT = d;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("J",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // B ::= J 
            {
              LinkedList<NodoAST> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST i = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new LinkedList<>();
        RESULT.add(i);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // B ::= B J 
            {
              LinkedList<NodoAST> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> l = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST i = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = l;
        RESULT.add(i);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // S ::= allave B cllave 
            {
              Instruccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> l = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT = new Bloque(l);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VARIABLE_DECLARATOR_ID ::= id 
            {
              LinkedList<NodoAST> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                            RESULT = new LinkedList<NodoAST>();
                            RESULT.add(new Identificador(id, idleft, idright));
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE_DECLARATOR_ID",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VARIABLE_DECLARATOR_ID ::= VARIABLE_DECLARATOR_ID acorchete ccorchete 
            {
              LinkedList<NodoAST> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<NodoAST> i = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                            RESULT = i;
                            RESULT.add(new Corchetee());                                
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE_DECLARATOR_ID",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VARIABLE_DECLARATOR ::= VARIABLE_DECLARATOR_ID 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> d = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                            RESULT = d;
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE_DECLARATOR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VARIABLE_DECLARATOR ::= VARIABLE_DECLARATOR_ID igual E 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<NodoAST> lista = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                            RESULT = new VariableDeclarator(lista, e, eleft, eright);
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE_DECLARATOR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VARIABLE_DECLARATORS ::= VARIABLE_DECLARATOR 
            {
              LinkedList<Object> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                            RESULT = new LinkedList<Object>();
                            RESULT.add(i);
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE_DECLARATORS",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VARIABLE_DECLARATORS ::= VARIABLE_DECLARATORS coma VARIABLE_DECLARATOR 
            {
              LinkedList<Object> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Object> d = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                            RESULT = d;
                            RESULT.add(i);
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE_DECLARATORS",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FIELD_DECLARATION ::= T VARIABLE_DECLARATORS puntoycoma 
            {
              Instruccion RESULT =null;
		int tipopleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tipopright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		TipoContenedor tipop = (TipoContenedor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Object> lista = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        RESULT = new Declaraciones(tipop, lista, tipopleft, tipopright);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FIELD_DECLARATION",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FIELD_DECLARATION ::= FIELD_MODIFIERS T VARIABLE_DECLARATORS puntoycoma 
            {
              Instruccion RESULT =null;
		int vileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int viright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<String> vi = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int tipopleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tipopright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		TipoContenedor tipop = (TipoContenedor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Object> lista = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        RESULT = new Declaraciones(vi, tipop, lista, tipopleft, tipopright);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FIELD_DECLARATION",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LCORCHETE ::= acorchete ccorchete 
            {
              Object RESULT =null;
		
                
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LCORCHETE",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LCORCHETE ::= LCORCHETE acorchete ccorchete 
            {
              Object RESULT =null;
		
                
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LCORCHETE",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FORMAL_PAR ::= T VARIABLE_DECLARATOR_ID 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FORMAL_PAR",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FORMAL_PAR ::= finall T VARIABLE_DECLARATOR_ID 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FORMAL_PAR",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FORMAL_PARAMETERS ::= FORMAL_PAR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMETERS",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FORMAL_PARAMETERS ::= FORMAL_PARAMETERS coma FORMAL_PAR 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMETERS",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PARA ::= apar cpar 
            {
              Object RESULT =null;
		
            
       
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PARA ::= apar FORMAL_PARAMETERS cpar 
            {
              Object RESULT =null;
		
            
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACIONES_VAR_FUN ::= FIELD_DECLARATION 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_VAR_FUN",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACIONES_VAR_FUN ::= FIELD_MODIFIERS T LCORCHETE id PARA S 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_VAR_FUN",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACIONES_VAR_FUN ::= FIELD_MODIFIERS T id PARA S 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_VAR_FUN",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACIONES_VAR_FUN ::= FIELD_MODIFIERS T mainn PARA S 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_VAR_FUN",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACIONES_VAR_FUN ::= FIELD_MODIFIERS T LCORCHETE id PARA puntoycoma 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_VAR_FUN",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CLASE_MIEMBRO ::= clase id extender id allave CONTENIDO_CLASE cllave 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE_MIEMBRO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CLASE_MIEMBRO ::= clase id allave CONTENIDO_CLASE cllave 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE_MIEMBRO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CLASE_MIEMBRO ::= FIELD_MODIFIER clase id extender id allave CONTENIDO_CLASE cllave 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE_MIEMBRO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CLASE_MIEMBRO ::= FIELD_MODIFIER clase id allave CONTENIDO_CLASE cllave 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE_MIEMBRO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DENTRO_CLASE ::= DECLARACIONES_VAR_FUN 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DENTRO_CLASE",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DENTRO_CLASE ::= CLASE_MIEMBRO 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DENTRO_CLASE",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CONTENIDO_CLASE ::= DENTRO_CLASE 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO_CLASE",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONTENIDO_CLASE ::= CONTENIDO_CLASE DENTRO_CLASE 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO_CLASE",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // MOD_CLASE_SUPERIOR ::= publico abstracto 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MOD_CLASE_SUPERIOR",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // MOD_CLASE_SUPERIOR ::= publico 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MOD_CLASE_SUPERIOR",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CLASE ::= clase id extender id allave CONTENIDO_CLASE cllave 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CLASE ::= clase id allave CONTENIDO_CLASE cllave 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CLASE ::= MOD_CLASE_SUPERIOR clase id extender id allave CONTENIDO_CLASE cllave 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CLASE ::= MOD_CLASE_SUPERIOR clase id allave CONTENIDO_CLASE cllave 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LCLASE ::= CLASE 
            {
              LinkedList<NodoAST> RESULT =null;
		
            
         
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LCLASE",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LCLASE ::= LCLASE CLASE 
            {
              LinkedList<NodoAST> RESULT =null;
		
            
         
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LCLASE",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LIMPORT ::= importa cadena puntoycoma 
            {
              LinkedList<Importar> RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		               //-------------------FALTA------------------
            RESULT = new LinkedList<>();
            RESULT.add(new Importar(cad, cadleft, cadright));
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LIMPORT",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LIMPORT ::= LIMPORT importa cadena puntoycoma 
            {
              LinkedList<Importar> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Importar> l = (LinkedList<Importar>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		   //-------------------FALTA------------------
            RESULT = l;
            RESULT.add(new Importar(cad, cadleft, cadright));
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LIMPORT",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SS ::= LCLASE 
            {
              ArbolAST RESULT =null;
		int lclaseleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lclaseright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> lclase = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new ArbolAST(lclase, 0);
     
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SS",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SS ::= LIMPORT 
            {
              ArbolAST RESULT =null;
		int limportleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int limportright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Importar> limport = (LinkedList<Importar>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new ArbolAST(limport);
     
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SS",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SS ::= LIMPORT LCLASE 
            {
              ArbolAST RESULT =null;
		int limportleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int limportright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Importar> limport = (LinkedList<Importar>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int lclaseleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lclaseright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> lclase = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT = new ArbolAST(limport, lclase);
      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SS",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // I ::= SS 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArbolAST l = (ArbolAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        this.parser.arbol = l;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("I",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // I ::= S 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion l = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        this.parser.arbolINSTRUCCION = l;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("I",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= I EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

