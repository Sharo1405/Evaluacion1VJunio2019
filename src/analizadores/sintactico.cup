package analizadores;


import ast.ArbolAST;
import ast.NodoAST;
import ast.entorno.Simbolo;
import ast.expresiones.Expresion;
import ast.expresiones.Identificador;
import ast.expresiones.OPPostFijo;
import ast.expresiones.OPPreFijo;
import ast.expresiones.operacion.Aritmetica;
import ast.expresiones.operacion.Logica;
import ast.expresiones.operacion.OpTernario;
import ast.expresiones.operacion.TipoContenedor;
import ast.expresiones.operacion.Relacional;
import ast.expresiones.operacion.Operacion;
import ast.expresiones.primitivos.Booleano;
import ast.expresiones.primitivos.Cadena;
import ast.expresiones.primitivos.Caracter;
import ast.expresiones.primitivos.Decimal;
import ast.expresiones.primitivos.Entero;
import ast.instrucciones.Bloque;
import ast.instrucciones.Declaracion;
import ast.instrucciones.Asignacion;
import ast.instrucciones.Instruccion;
import ast.instrucciones.ImprimirTS;
import ast.instrucciones.Printer;
import ast.instrucciones.Seleccion.IfLista;
import ast.instrucciones.Seleccion.Iff;
import ast.instrucciones.ciclos.WhileCiclo;
import ast.instrucciones.ciclos.RetCont.*;
import java.util.LinkedList;
import java_cup.runtime.*;


parser code

{:
    public Instruccion arbol;
    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("Error caracter no esperado");
        System.err.println(s);
    }
:}


action code
{://Codigo de acciones
      
:}


terminal String igual, allave, cllave, id, puntoycoma;
terminal String intt, charr, stringg, doublee, booleann; //TIpo dato
terminal String cadena, truee, falsee,charER;
terminal Object entero, decimal; //tipos primitivos
terminal String imprimir, apar, cpar; 
terminal String mas, por, menos, dividir, potencia; //aritmeticas
terminal String oor, aand, diferenteunario; //logica
terminal String igualigual, mayorq, menorq, menorigualq, mayorigualq, diferente;
terminal String interrogacion, dospuntos, whilee, breakk, continuee, masmas, menosmenos; //ternario
terminal String iff, elsee;
terminal String MENOSUNARIO, MASUNARIO;

terminal String print;

nonterminal I;
nonterminal Instruccion S;
nonterminal LinkedList<NodoAST> B;
nonterminal Expresion E;
nonterminal Instruccion D;
nonterminal TipoContenedor T;
nonterminal Instruccion J;
nonterminal Instruccion CICLOS;
nonterminal Instruccion COND;
nonterminal Instruccion IF_STATEMENT;
nonterminal LinkedList<IfLista> IF_LIST;


precedence left interrogacion;
precedence left oor;
precedence left aand;
precedence right diferenteunario;
precedence left igualigual, diferente;
precedence left mayorq, menorq, menorigualq, mayorigualq;
precedence left mas, menos;
precedence left por, dividir;
precedence left potencia;
precedence right masmas, menosmenos;
precedence right MENOSUNARIO, MASUNARIO;



start with I;

I::= S:l{:
        this.parser.arbol = l;
    :};

//"S" es el bloque
S::= allave B:l cllave {:
        RESULT = new Bloque(l);
    :};
    
B::= B:l J:i {:
        RESULT = l;
        RESULT.add(i);
    :}
    |J:i {:
       RESULT = new LinkedList<>();
        RESULT.add(i);
    :};

J::= D:d {:
        RESULT = d;
    :}
    |S:d {:
        RESULT = d;
    :}
    |CICLOS:d {:
        RESULT = d;
    :}
    |COND:d{:
        RESULT = d;
    :};

COND::= IF_STATEMENT:d {:
        RESULT = d;
      :};


IF_STATEMENT::= IF_LIST:i elsee S:s1{:
            RESULT = new Iff(s1, i, ileft, iright);
        :}
        |IF_LIST:i {:
            RESULT = new Iff(null, i, ileft, iright);
        :};

IF_LIST::= iff apar E:e1 cpar S:s1 {:
            RESULT = new LinkedList<IfLista>();
            RESULT.add(new IfLista(e1, s1, e1left, e1right));
        :}
        |IF_LIST:l elsee iff apar E:e1 cpar S:s1{:
            RESULT = l;
            RESULT.add(new IfLista(e1, s1, e1left, e1right));
        :};


CICLOS::= whilee apar E:e1 cpar S:s1 {:
        RESULT = new WhileCiclo(e1, s1, e1left, e1right);
    :}
    |breakk:e puntoycoma{:
        RESULT = new Breakk(eleft, eright);
    :}
    |continuee:e puntoycoma {:
        RESULT = new Continuee(eleft, eright);
    :}; 



D::= T:t id:id igual E:e puntoycoma {:
        RESULT = new Declaracion(t,id, e, idleft, idright);
    :}
    |T:t id:id puntoycoma {:
        RESULT = new Declaracion(t, id, idleft, idright);
    :}
    |id:id igual E:e puntoycoma{:
        RESULT = new Asignacion(id, e, idleft, idright);
    :}
    |print apar E:e1 cpar puntoycoma{:
        RESULT = new Printer(e1, e1left, e1right);
    :}
    |imprimir apar cpar puntoycoma {:
        RESULT = new ImprimirTS("hola");
    :}
    |id:id masmas puntoycoma{:
        RESULT = new OPPostFijo(new Identificador(id, null, idleft, idleft), Operacion.Operador.MAS, idleft, idright);
    :}
    |id:id menosmenos puntoycoma{:
        RESULT = new OPPostFijo(new Identificador(id, null, idleft, idleft), Operacion.Operador.MENOS, idleft, idright);
    :}
    |masmas id:id puntoycoma{:
        RESULT = new OPPreFijo(new Identificador(id, null, idleft, idleft), Operacion.Operador.MAS, idleft, idright);
    :}
    |menosmenos id:id puntoycoma{:
        RESULT = new OPPreFijo(new Identificador(id, null, idleft, idleft), Operacion.Operador.MENOS, idleft, idright);
    :};


T::= intt{:
        //RESULT = Simbolo.Tipo.INT;
        RESULT = new TipoContenedor(Simbolo.Tipo.INT);
    :}
    |charr {:
        //RESULT = Simbolo.Tipo.CHAR;
        RESULT = new TipoContenedor(Simbolo.Tipo.CHAR);
    :}
    |stringg{:
        //RESULT = Simbolo.Tipo.STRING;
        RESULT = new TipoContenedor(Simbolo.Tipo.STRING);
    :}
    |booleann{:
        //RESULT = Simbolo.Tipo.BOOLEAN;
        RESULT = new TipoContenedor(Simbolo.Tipo.BOOLEAN);
    :}
    |doublee{:
        //RESULT = Simbolo.Tipo.DOUBLE;
        RESULT = new TipoContenedor(Simbolo.Tipo.DOUBLE);
    :};

E::= menos:mas E:e1 {:
        RESULT = new Aritmetica(e1, Operacion.Operador.NEGATIVO, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    :}%prec MENOSUNARIO    
    |mas:mas E:e1 {:
        RESULT = new Aritmetica(e1, Operacion.Operador.POSITIVO, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    :}%prec MASUNARIO
    |E:e1 oor:mas E:e2 {:
        RESULT = new Logica(e1, e2, Operacion.Operador.OR, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    :}    
    |E:e1 aand:mas E:e2 {:
        RESULT = new Logica(e1, e2, Operacion.Operador.AND, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    :}    
    |E:e1 igualigual:mas E:e2 {:
        RESULT = new Relacional(e1, e2, Operacion.Operador.IGUAL, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    :}
    |E:e1 diferente:mas E:e2 {:
        RESULT = new Relacional(e1, e2, Operacion.Operador.DIFERENTE, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    :}
    |diferenteunario:mas E:e1 {:
        RESULT = new Logica(e1, Operacion.Operador.NOT, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    :}    
    |E:e1 mayorq:mas E:e2 {:
        RESULT = new Relacional(e1, e2, Operacion.Operador.MAYORQ, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    :}
    |E:e1 menorq:mas E:e2 {:
        RESULT = new Relacional(e1, e2, Operacion.Operador.MENORQ, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    :}
    |E:e1 mayorigualq:mas E:e2 {:
        RESULT = new Relacional(e1, e2, Operacion.Operador.MAYORIGUALQ, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    :}
    |E:e1 menorigualq:mas E:e2 {:
        RESULT = new Relacional(e1, e2, Operacion.Operador.MENORIGUALQ, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    :}
    |E:e1 mas:mas E:e2{:
        RESULT = new Aritmetica(e1, e2, Operacion.Operador.MAS, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    :}
    |E:e1 por:mas E:e2{:
        RESULT = new Aritmetica(e1, e2, Operacion.Operador.POR, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    :}
    |E:e1 dividir:mas E:e2{:
        RESULT = new Aritmetica(e1, e2, Operacion.Operador.DIVIDIR, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    :}
    |E:e1 potencia:mas E:e2{:
        RESULT = new Aritmetica(e1, e2, Operacion.Operador.POTENCIA, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    :}        
    |E:e1 menos:mas E:e2{:
        RESULT = new Aritmetica(e1, e2, Operacion.Operador.MENOS, masleft, masright, new TipoContenedor(Simbolo.Tipo.STRING));
    :}
    
    |cadena:ee{:
        RESULT = new Cadena(ee.substring(1,ee.length()-1), new TipoContenedor(Simbolo.Tipo.STRING), eeleft, eeright);
    :}
    |entero:ee {:
        RESULT = new Entero(ee, new TipoContenedor(Simbolo.Tipo.INT), eeleft, eeright);
    :}
    |decimal:ee {:
        RESULT = new Decimal(ee, new TipoContenedor(Simbolo.Tipo.DOUBLE), eeleft, eeright);
    :}
    |charER: ee {:
        
        Object ww = ee.substring(1,ee.length()-1);
        RESULT = new Caracter(ww, new TipoContenedor(Simbolo.Tipo.CHAR), eeleft, eeright);
    :}
    |truee:ee{:
        RESULT = new Booleano(ee,new TipoContenedor(Simbolo.Tipo.BOOLEAN), eeleft, eeright);
    :}
    |falsee:ee{:
        RESULT = new Booleano(ee,new TipoContenedor(Simbolo.Tipo.BOOLEAN), eeleft, eeright);
    :}
    |id:id{:
        RESULT = new Identificador(id, new TipoContenedor(Simbolo.Tipo.ID), idleft, idright);
    :}
    
    |E:cond interrogacion E:vdd dospuntos E:fake {:
        RESULT = new OpTernario(cond, vdd, fake,condleft, condright);
    :}


    |apar E:e cpar{:
        RESULT = e;
    :};
    

